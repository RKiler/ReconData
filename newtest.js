/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import {
  useUsabilityhubContext,
  UsabilityhubContext,
} from "./usabilityhub-context";
import type * as Fetcher from "./usabilityhub-fetcher";
import { usabilityhubFetch } from "./usabilityhub-fetcher";
import type * as Schemas from "./usabilityhubSchemas";
import type * as Responses from "./usabilityhubResponses";

export type ApplyDemographicsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type ApplyDemographicsRequestBody = {
  conversation_id: string;
  usability_test_unique_id: string | null;
  message_history: {
    content: {
      text?: string;
      tool_use?: {
        input: string;
        name: string;
        tool_use_id: string;
      };
    }[];
    role: "user" | "assistant";
  }[];
  message: string;
};

export type ApplyDemographicsVariables = {
  body: ApplyDemographicsRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Turns a text description of a demographic into a list of demographic attributes via an LLM. Response is streamed to the AiChannel.
 */
export const fetchApplyDemographics = (variables: ApplyDemographicsVariables) =>
  usabilityhubFetch<
    Responses.R204,
    ApplyDemographicsError,
    ApplyDemographicsRequestBody,
    {},
    {},
    {}
  >({ url: "/api/ai_demographics", method: "post", ...variables });

/**
 * Turns a text description of a demographic into a list of demographic attributes via an LLM. Response is streamed to the AiChannel.
 */
export const useApplyDemographics = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      ApplyDemographicsError,
      ApplyDemographicsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    ApplyDemographicsError,
    ApplyDemographicsVariables
  >(
    (variables: ApplyDemographicsVariables) =>
      fetchApplyDemographics({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AiFollowUpError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type AiFollowUpResponse = {
  complete: boolean;
  summary: string | null;
  messages: {
    role: "user" | "assistant";
    content: string;
    content_blocks?: {
      text?: string;
    }[];
  }[];
};

export type AiFollowUpRequestBody = {
  question_id: number;
  previewing: boolean;
  messages: {
    role: "user" | "assistant";
    content: string;
  }[];
};

export type AiFollowUpVariables = {
  body: AiFollowUpRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Send a message to the AI
 */
export const fetchAiFollowUp = (variables: AiFollowUpVariables) =>
  usabilityhubFetch<
    AiFollowUpResponse,
    AiFollowUpError,
    AiFollowUpRequestBody,
    {},
    {},
    {}
  >({ url: "/api/ai_follow_up", method: "post", ...variables });

/**
 * Send a message to the AI
 */
export const useAiFollowUp = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      AiFollowUpResponse,
      AiFollowUpError,
      AiFollowUpVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    AiFollowUpResponse,
    AiFollowUpError,
    AiFollowUpVariables
  >(
    (variables: AiFollowUpVariables) =>
      fetchAiFollowUp({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetAdminNotesQueryParams = {
  /**
   * The ID of the notable to get admin notes for
   */
  admin_notable_id: number;
  /**
   * The type of the notable to get admin notes for
   */
  admin_notable_type: string;
};

export type GetAdminNotesError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type GetAdminNotesResponse = {
  admin_notes: Schemas.AdminNote[];
};

export type GetAdminNotesVariables = {
  queryParams: GetAdminNotesQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get all admin notes for a notable
 */
export const fetchGetAdminNotes = (variables: GetAdminNotesVariables) =>
  usabilityhubFetch<
    GetAdminNotesResponse,
    GetAdminNotesError,
    undefined,
    {},
    GetAdminNotesQueryParams,
    {}
  >({ url: "/api/admin/admin_notes", method: "get", ...variables });

/**
 * Get all admin notes for a notable
 */
export const useGetAdminNotes = <TData = GetAdminNotesResponse,>(
  variables: GetAdminNotesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetAdminNotesResponse,
      GetAdminNotesError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<GetAdminNotesResponse, GetAdminNotesError, TData>(
    queryKeyFn({
      path: "/api/admin/admin_notes",
      operationId: "getAdminNotes",
      variables,
    }),
    () => fetchGetAdminNotes({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CreateAdminNoteError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type CreateAdminNoteRequestBody = {
  admin_note: {
    admin_notable_type: string;
    admin_notable_id: number;
    text: string;
    /**
     * @format date-time
     */
    pinned_at: string | null;
  };
};

export type CreateAdminNoteVariables = {
  body: CreateAdminNoteRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create an admin note
 */
export const fetchCreateAdminNote = (variables: CreateAdminNoteVariables) =>
  usabilityhubFetch<
    Schemas.AdminNoteResponse,
    CreateAdminNoteError,
    CreateAdminNoteRequestBody,
    {},
    {},
    {}
  >({ url: "/api/admin/admin_notes", method: "post", ...variables });

/**
 * Create an admin note
 */
export const useCreateAdminNote = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AdminNoteResponse,
      CreateAdminNoteError,
      CreateAdminNoteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.AdminNoteResponse,
    CreateAdminNoteError,
    CreateAdminNoteVariables
  >(
    (variables: CreateAdminNoteVariables) =>
      fetchCreateAdminNote({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UpdateAdminNotePathParams = {
  /**
   * The ID of the admin note to update
   */
  id: number;
};

export type UpdateAdminNoteError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UpdateAdminNoteRequestBody = {
  admin_note: {
    text?: string;
    /**
     * @format date-time
     */
    pinned_at?: string | null;
  };
};

export type UpdateAdminNoteVariables = {
  body: UpdateAdminNoteRequestBody;
  pathParams: UpdateAdminNotePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update an admin note
 */
export const fetchUpdateAdminNote = (variables: UpdateAdminNoteVariables) =>
  usabilityhubFetch<
    Schemas.AdminNoteResponse,
    UpdateAdminNoteError,
    UpdateAdminNoteRequestBody,
    {},
    {},
    UpdateAdminNotePathParams
  >({ url: "/api/admin/admin_notes/{id}", method: "patch", ...variables });

/**
 * Update an admin note
 */
export const useUpdateAdminNote = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AdminNoteResponse,
      UpdateAdminNoteError,
      UpdateAdminNoteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.AdminNoteResponse,
    UpdateAdminNoteError,
    UpdateAdminNoteVariables
  >(
    (variables: UpdateAdminNoteVariables) =>
      fetchUpdateAdminNote({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DeleteAdminNotePathParams = {
  /**
   * The ID of the admin note to delete
   */
  id: number;
};

export type DeleteAdminNoteError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type DeleteAdminNoteVariables = {
  pathParams: DeleteAdminNotePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Delete an admin note
 */
export const fetchDeleteAdminNote = (variables: DeleteAdminNoteVariables) =>
  usabilityhubFetch<
    Responses.R204,
    DeleteAdminNoteError,
    undefined,
    {},
    {},
    DeleteAdminNotePathParams
  >({ url: "/api/admin/admin_notes/{id}", method: "delete", ...variables });

/**
 * Delete an admin note
 */
export const useDeleteAdminNote = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeleteAdminNoteError,
      DeleteAdminNoteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeleteAdminNoteError,
    DeleteAdminNoteVariables
  >(
    (variables: DeleteAdminNoteVariables) =>
      fetchDeleteAdminNote({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminDemographicProfileUpdateFluenciesPathParams = {
  /**
   * Unique ID of the (panelist) user
   */
  id: number;
};

export type AdminDemographicProfileUpdateFluenciesError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type AdminDemographicProfileUpdateFluenciesResponse = {
  fluencies: Schemas.Fluency[];
};

export type AdminDemographicProfileUpdateFluenciesRequestBody = {
  fluencies: {
    id: number | null;
    language_code: string;
    is_fluent: boolean;
  }[];
};

export type AdminDemographicProfileUpdateFluenciesVariables = {
  body: AdminDemographicProfileUpdateFluenciesRequestBody;
  pathParams: AdminDemographicProfileUpdateFluenciesPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update a demographic profile fluencies (admin)
 */
export const fetchAdminDemographicProfileUpdateFluencies = (
  variables: AdminDemographicProfileUpdateFluenciesVariables,
) =>
  usabilityhubFetch<
    AdminDemographicProfileUpdateFluenciesResponse,
    AdminDemographicProfileUpdateFluenciesError,
    AdminDemographicProfileUpdateFluenciesRequestBody,
    {},
    {},
    AdminDemographicProfileUpdateFluenciesPathParams
  >({
    url: "/api/admin/demographic_profiles/{id}/update_fluencies",
    method: "post",
    ...variables,
  });

/**
 * Update a demographic profile fluencies (admin)
 */
export const useAdminDemographicProfileUpdateFluencies = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      AdminDemographicProfileUpdateFluenciesResponse,
      AdminDemographicProfileUpdateFluenciesError,
      AdminDemographicProfileUpdateFluenciesVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    AdminDemographicProfileUpdateFluenciesResponse,
    AdminDemographicProfileUpdateFluenciesError,
    AdminDemographicProfileUpdateFluenciesVariables
  >(
    (variables: AdminDemographicProfileUpdateFluenciesVariables) =>
      fetchAdminDemographicProfileUpdateFluencies({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type AdminDemographicProfileFluenciesPathParams = {
  /**
   * Unique ID of the (panelist) user
   */
  id: number;
};

export type AdminDemographicProfileFluenciesError =
  Fetcher.ErrorWrapper<undefined>;

export type AdminDemographicProfileFluenciesResponse = {
  fluencies: Schemas.Fluency[];
};

export type AdminDemographicProfileFluenciesVariables = {
  pathParams: AdminDemographicProfileFluenciesPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Retrive a demographic profile fluencies (admin)
 */
export const fetchAdminDemographicProfileFluencies = (
  variables: AdminDemographicProfileFluenciesVariables,
) =>
  usabilityhubFetch<
    AdminDemographicProfileFluenciesResponse,
    AdminDemographicProfileFluenciesError,
    undefined,
    {},
    {},
    AdminDemographicProfileFluenciesPathParams
  >({
    url: "/api/admin/demographic_profiles/{id}/fluencies",
    method: "get",
    ...variables,
  });

/**
 * Retrive a demographic profile fluencies (admin)
 */
export const useAdminDemographicProfileFluencies = <
  TData = AdminDemographicProfileFluenciesResponse,
>(
  variables: AdminDemographicProfileFluenciesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AdminDemographicProfileFluenciesResponse,
      AdminDemographicProfileFluenciesError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    AdminDemographicProfileFluenciesResponse,
    AdminDemographicProfileFluenciesError,
    TData
  >(
    queryKeyFn({
      path: "/api/admin/demographic_profiles/{id}/fluencies",
      operationId: "adminDemographicProfileFluencies",
      variables,
    }),
    () =>
      fetchAdminDemographicProfileFluencies({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type LookupIpAddressError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type LookupIpAddressResponse = {
  ip_address: string;
  isp: string;
  country_code: string;
  country_name: string;
  city: string;
  vpn: boolean;
  proxy: boolean;
  tor: boolean;
  threat: boolean;
  cloud_provider: boolean;
};

export type LookupIpAddressRequestBody = {
  ip_address: string;
  /**
   * @format date-time
   */
  date: string | null;
};

export type LookupIpAddressVariables = {
  body: LookupIpAddressRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Looks up information about an IP address
 */
export const fetchLookupIpAddress = (variables: LookupIpAddressVariables) =>
  usabilityhubFetch<
    LookupIpAddressResponse,
    LookupIpAddressError,
    LookupIpAddressRequestBody,
    {},
    {},
    {}
  >({ url: "/api/admin/lookup_ip", method: "post", ...variables });

/**
 * Looks up information about an IP address
 */
export const useLookupIpAddress = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      LookupIpAddressResponse,
      LookupIpAddressError,
      LookupIpAddressVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    LookupIpAddressResponse,
    LookupIpAddressError,
    LookupIpAddressVariables
  >(
    (variables: LookupIpAddressVariables) =>
      fetchLookupIpAddress({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminListDemographicsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type AdminListDemographicsResponse = {
  id: number;
  name: string;
  demographic_attribute_group_id: number;
  profile_helper: string | null;
  target_helper: string | null;
  question: string;
  group: string;
  multi_select: boolean;
  sort_order: number;
  individual_sort_order: number;
  visible_to_panelists: boolean;
  visible_to_customers: boolean;
  options: {
    id: number;
    value: string;
    profile_helper: string | null;
    is_none_of_above: boolean;
    is_prefer_not_to_say: boolean;
  }[];
}[];

export type AdminListDemographicsVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * List all active demographic attributes and their options
 */
export const fetchAdminListDemographics = (
  variables: AdminListDemographicsVariables,
) =>
  usabilityhubFetch<
    AdminListDemographicsResponse,
    AdminListDemographicsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/admin/demographics", method: "get", ...variables });

/**
 * List all active demographic attributes and their options
 */
export const useAdminListDemographics = <
  TData = AdminListDemographicsResponse,
>(
  variables: AdminListDemographicsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AdminListDemographicsResponse,
      AdminListDemographicsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    AdminListDemographicsResponse,
    AdminListDemographicsError,
    TData
  >(
    queryKeyFn({
      path: "/api/admin/demographics",
      operationId: "adminListDemographics",
      variables,
    }),
    () => fetchAdminListDemographics({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type AdminCreateDemographicError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type AdminCreateDemographicVariables = {
  body: Schemas.DemographicAttributeRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create a new demographic attribute, not visible to panelists or customers
 */
export const fetchAdminCreateDemographic = (
  variables: AdminCreateDemographicVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    AdminCreateDemographicError,
    Schemas.DemographicAttributeRequestBody,
    {},
    {},
    {}
  >({ url: "/api/admin/demographics", method: "post", ...variables });

/**
 * Create a new demographic attribute, not visible to panelists or customers
 */
export const useAdminCreateDemographic = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AdminCreateDemographicError,
      AdminCreateDemographicVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AdminCreateDemographicError,
    AdminCreateDemographicVariables
  >(
    (variables: AdminCreateDemographicVariables) =>
      fetchAdminCreateDemographic({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminUpdateDemographicPathParams = {
  /**
   * ID of the demographic attribute
   */
  demographicAttributeId: number;
};

export type AdminUpdateDemographicError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type AdminUpdateDemographicVariables = {
  body: Schemas.DemographicAttributeRequestBody;
  pathParams: AdminUpdateDemographicPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Updates an existing demographic attribute
 */
export const fetchAdminUpdateDemographic = (
  variables: AdminUpdateDemographicVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    AdminUpdateDemographicError,
    Schemas.DemographicAttributeRequestBody,
    {},
    {},
    AdminUpdateDemographicPathParams
  >({
    url: "/api/admin/demographics/{demographicAttributeId}",
    method: "patch",
    ...variables,
  });

/**
 * Updates an existing demographic attribute
 */
export const useAdminUpdateDemographic = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AdminUpdateDemographicError,
      AdminUpdateDemographicVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AdminUpdateDemographicError,
    AdminUpdateDemographicVariables
  >(
    (variables: AdminUpdateDemographicVariables) =>
      fetchAdminUpdateDemographic({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminListDemographicGroupsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type AdminListDemographicGroupsResponse = {
  id: number;
  name: string;
}[];

export type AdminListDemographicGroupsVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * List all demographic attribute groups
 */
export const fetchAdminListDemographicGroups = (
  variables: AdminListDemographicGroupsVariables,
) =>
  usabilityhubFetch<
    AdminListDemographicGroupsResponse,
    AdminListDemographicGroupsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/admin/demographics/groups", method: "get", ...variables });

/**
 * List all demographic attribute groups
 */
export const useAdminListDemographicGroups = <
  TData = AdminListDemographicGroupsResponse,
>(
  variables: AdminListDemographicGroupsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AdminListDemographicGroupsResponse,
      AdminListDemographicGroupsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    AdminListDemographicGroupsResponse,
    AdminListDemographicGroupsError,
    TData
  >(
    queryKeyFn({
      path: "/api/admin/demographics/groups",
      operationId: "adminListDemographicGroups",
      variables,
    }),
    () => fetchAdminListDemographicGroups({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type AdminSubmitReviewError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AdminSubmitReviewRequestBody = {
  data?: {
    id: number;
    review_status: number | null;
  }[];
};

export type AdminSubmitReviewVariables = {
  body?: AdminSubmitReviewRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Submits review data for an arbitrary set of responses
 */
export const fetchAdminSubmitReview = (variables: AdminSubmitReviewVariables) =>
  usabilityhubFetch<
    Responses.R204,
    AdminSubmitReviewError,
    AdminSubmitReviewRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/admin/responses/submit_review",
    method: "post",
    ...variables,
  });

/**
 * Submits review data for an arbitrary set of responses
 */
export const useAdminSubmitReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AdminSubmitReviewError,
      AdminSubmitReviewVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AdminSubmitReviewError,
    AdminSubmitReviewVariables
  >(
    (variables: AdminSubmitReviewVariables) =>
      fetchAdminSubmitReview({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminSaveReviewedResponsesPathParams = {
  /**
   * The ID of the third party order
   */
  id: number;
};

export type AdminSaveReviewedResponsesError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AdminSaveReviewedResponsesRequestBody = {
  data: {
    /**
     * The response ID
     */
    response_id: number;
    review_status: number | null;
  }[];
  /**
   * @default false
   */
  revise?: boolean;
};

export type AdminSaveReviewedResponsesVariables = {
  body: AdminSaveReviewedResponsesRequestBody;
  pathParams: AdminSaveReviewedResponsesPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Saves reviewed responses for a third party order and updates the order state
 */
export const fetchAdminSaveReviewedResponses = (
  variables: AdminSaveReviewedResponsesVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    AdminSaveReviewedResponsesError,
    AdminSaveReviewedResponsesRequestBody,
    {},
    {},
    AdminSaveReviewedResponsesPathParams
  >({
    url: "/api/admin/third_party_orders/{id}/save_reviewed_responses",
    method: "post",
    ...variables,
  });

/**
 * Saves reviewed responses for a third party order and updates the order state
 */
export const useAdminSaveReviewedResponses = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AdminSaveReviewedResponsesError,
      AdminSaveReviewedResponsesVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AdminSaveReviewedResponsesError,
    AdminSaveReviewedResponsesVariables
  >(
    (variables: AdminSaveReviewedResponsesVariables) =>
      fetchAdminSaveReviewedResponses({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminEmulateUserError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type AdminEmulateUserRequestBody = {
  /**
   * ID of the user to emulate
   */
  user_id: number;
  /**
   * Reason for emulating the user
   */
  reason: "support_enquiry" | "sales_enquiry" | "other";
  /**
   * Link to the conversation with the user
   */
  conversation_link?: string;
  /**
   * Details about the user
   */
  details: string;
};

export type AdminEmulateUserVariables = {
  body: AdminEmulateUserRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Emulate a user
 */
export const fetchAdminEmulateUser = (variables: AdminEmulateUserVariables) =>
  usabilityhubFetch<
    Responses.R204,
    AdminEmulateUserError,
    AdminEmulateUserRequestBody,
    {},
    {},
    {}
  >({ url: "/api/admin/user_emulation", method: "post", ...variables });

/**
 * Emulate a user
 */
export const useAdminEmulateUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AdminEmulateUserError,
      AdminEmulateUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AdminEmulateUserError,
    AdminEmulateUserVariables
  >(
    (variables: AdminEmulateUserVariables) =>
      fetchAdminEmulateUser({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminStopEmulatingUserError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type AdminStopEmulatingUserVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Stop emulating a user
 */
export const fetchAdminStopEmulatingUser = (
  variables: AdminStopEmulatingUserVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    AdminStopEmulatingUserError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/admin/user_emulation", method: "delete", ...variables });

/**
 * Stop emulating a user
 */
export const useAdminStopEmulatingUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AdminStopEmulatingUserError,
      AdminStopEmulatingUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AdminStopEmulatingUserError,
    AdminStopEmulatingUserVariables
  >(
    (variables: AdminStopEmulatingUserVariables) =>
      fetchAdminStopEmulatingUser({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminStopEmulatingPanelistError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type AdminStopEmulatingPanelistVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Stop emulating a user
 */
export const fetchAdminStopEmulatingPanelist = (
  variables: AdminStopEmulatingPanelistVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    AdminStopEmulatingPanelistError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/admin/panelist_emulation", method: "delete", ...variables });

/**
 * Stop emulating a user
 */
export const useAdminStopEmulatingPanelist = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AdminStopEmulatingPanelistError,
      AdminStopEmulatingPanelistVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AdminStopEmulatingPanelistError,
    AdminStopEmulatingPanelistVariables
  >(
    (variables: AdminStopEmulatingPanelistVariables) =>
      fetchAdminStopEmulatingPanelist({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminResponseUsabilityTestResultsPathParams = {
  responseId: number;
};

export type AdminResponseUsabilityTestResultsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type AdminResponseUsabilityTestResultsVariables = {
  pathParams: AdminResponseUsabilityTestResultsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Admin usability test results for a single response
 */
export const fetchAdminResponseUsabilityTestResults = (
  variables: AdminResponseUsabilityTestResultsVariables,
) =>
  usabilityhubFetch<
    Schemas.UsabilityTestResultsData,
    AdminResponseUsabilityTestResultsError,
    undefined,
    {},
    {},
    AdminResponseUsabilityTestResultsPathParams
  >({ url: "/api/admin/responses/{responseId}", method: "get", ...variables });

/**
 * Admin usability test results for a single response
 */
export const useAdminResponseUsabilityTestResults = <
  TData = Schemas.UsabilityTestResultsData,
>(
  variables: AdminResponseUsabilityTestResultsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UsabilityTestResultsData,
      AdminResponseUsabilityTestResultsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.UsabilityTestResultsData,
    AdminResponseUsabilityTestResultsError,
    TData
  >(
    queryKeyFn({
      path: "/api/admin/responses/{response_id}",
      operationId: "adminResponseUsabilityTestResults",
      variables,
    }),
    () =>
      fetchAdminResponseUsabilityTestResults({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type AdminSendPasswordResetPathParams = {
  /**
   * The ID of the user to send the password reset email to
   */
  id: number;
};

export type AdminSendPasswordResetError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AdminSendPasswordResetVariables = {
  pathParams: AdminSendPasswordResetPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Send a password reset email to a user
 */
export const fetchAdminSendPasswordReset = (
  variables: AdminSendPasswordResetVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    AdminSendPasswordResetError,
    undefined,
    {},
    {},
    AdminSendPasswordResetPathParams
  >({
    url: "/api/admin/users/{id}/send_password_reset",
    method: "post",
    ...variables,
  });

/**
 * Send a password reset email to a user
 */
export const useAdminSendPasswordReset = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AdminSendPasswordResetError,
      AdminSendPasswordResetVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AdminSendPasswordResetError,
    AdminSendPasswordResetVariables
  >(
    (variables: AdminSendPasswordResetVariables) =>
      fetchAdminSendPasswordReset({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminMakeOwnerPathParams = {
  /**
   * The ID of the user to transfer ownership to
   */
  id: number;
};

export type AdminMakeOwnerError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AdminMakeOwnerResponse = {
  user_is_admin?: boolean;
};

export type AdminMakeOwnerVariables = {
  pathParams: AdminMakeOwnerPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Transfer account ownership to a user and optionally make them an admin
 */
export const fetchAdminMakeOwner = (variables: AdminMakeOwnerVariables) =>
  usabilityhubFetch<
    AdminMakeOwnerResponse,
    AdminMakeOwnerError,
    undefined,
    {},
    {},
    AdminMakeOwnerPathParams
  >({ url: "/api/admin/users/{id}/make_owner", method: "post", ...variables });

/**
 * Transfer account ownership to a user and optionally make them an admin
 */
export const useAdminMakeOwner = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      AdminMakeOwnerResponse,
      AdminMakeOwnerError,
      AdminMakeOwnerVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    AdminMakeOwnerResponse,
    AdminMakeOwnerError,
    AdminMakeOwnerVariables
  >(
    (variables: AdminMakeOwnerVariables) =>
      fetchAdminMakeOwner({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminLogOutPathParams = {
  /**
   * The ID of the user to log out
   */
  id: number;
};

export type AdminLogOutError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AdminLogOutVariables = {
  pathParams: AdminLogOutPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Invalidate all sessions for a user, effectively logging them out
 */
export const fetchAdminLogOut = (variables: AdminLogOutVariables) =>
  usabilityhubFetch<
    Responses.R204,
    AdminLogOutError,
    undefined,
    {},
    {},
    AdminLogOutPathParams
  >({ url: "/api/admin/users/{id}/log_out", method: "post", ...variables });

/**
 * Invalidate all sessions for a user, effectively logging them out
 */
export const useAdminLogOut = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AdminLogOutError,
      AdminLogOutVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AdminLogOutError,
    AdminLogOutVariables
  >(
    (variables: AdminLogOutVariables) =>
      fetchAdminLogOut({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminUpdatePanelistPathParams = {
  /**
   * The ID of the panelist to update
   */
  id: number;
};

export type AdminUpdatePanelistError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AdminUpdatePanelistRequestBody = {
  panelist?: {
    /**
     * The email address of the panelist's user
     */
    email: string;
    /**
     * Whether the panelist wants to receive email notifications for product updates
     */
    email_product_updates: boolean;
    /**
     * Whether the panelist wants to receive email notifications for new assignments
     */
    notify_assignments_by_email: boolean;
    /**
     * The PayPal email address of the panelist
     */
    paypal_email_address?: string | null;
  };
};

export type AdminUpdatePanelistVariables = {
  body?: AdminUpdatePanelistRequestBody;
  pathParams: AdminUpdatePanelistPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update a panelist
 */
export const fetchAdminUpdatePanelist = (
  variables: AdminUpdatePanelistVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    AdminUpdatePanelistError,
    AdminUpdatePanelistRequestBody,
    {},
    {},
    AdminUpdatePanelistPathParams
  >({ url: "/api/admin/panelists/{id}", method: "patch", ...variables });

/**
 * Update a panelist
 */
export const useAdminUpdatePanelist = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AdminUpdatePanelistError,
      AdminUpdatePanelistVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AdminUpdatePanelistError,
    AdminUpdatePanelistVariables
  >(
    (variables: AdminUpdatePanelistVariables) =>
      fetchAdminUpdatePanelist({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminUnbanPanelistPathParams = {
  /**
   * The ID of the the panelist's user to unban
   */
  id: number;
};

export type AdminUnbanPanelistError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AdminUnbanPanelistVariables = {
  pathParams: AdminUnbanPanelistPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Unban a panelist
 */
export const fetchAdminUnbanPanelist = (
  variables: AdminUnbanPanelistVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    AdminUnbanPanelistError,
    undefined,
    {},
    {},
    AdminUnbanPanelistPathParams
  >({ url: "/api/admin/panelists/{id}/unban", method: "post", ...variables });

/**
 * Unban a panelist
 */
export const useAdminUnbanPanelist = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AdminUnbanPanelistError,
      AdminUnbanPanelistVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AdminUnbanPanelistError,
    AdminUnbanPanelistVariables
  >(
    (variables: AdminUnbanPanelistVariables) =>
      fetchAdminUnbanPanelist({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminUnsuspendPanelistPathParams = {
  /**
   * The ID of the the panelist's user to unsuspend
   */
  id: number;
};

export type AdminUnsuspendPanelistError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AdminUnsuspendPanelistVariables = {
  pathParams: AdminUnsuspendPanelistPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Unsuspend a panelist
 */
export const fetchAdminUnsuspendPanelist = (
  variables: AdminUnsuspendPanelistVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    AdminUnsuspendPanelistError,
    undefined,
    {},
    {},
    AdminUnsuspendPanelistPathParams
  >({
    url: "/api/admin/panelists/{id}/unsuspend",
    method: "post",
    ...variables,
  });

/**
 * Unsuspend a panelist
 */
export const useAdminUnsuspendPanelist = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AdminUnsuspendPanelistError,
      AdminUnsuspendPanelistVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AdminUnsuspendPanelistError,
    AdminUnsuspendPanelistVariables
  >(
    (variables: AdminUnsuspendPanelistVariables) =>
      fetchAdminUnsuspendPanelist({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminBanPanelistPathParams = {
  /**
   * The ID of the the panelist's user to ban
   */
  id: number;
};

export type AdminBanPanelistError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AdminBanPanelistRequestBody = {
  reasons: Schemas.BanReason[];
};

export type AdminBanPanelistVariables = {
  body: AdminBanPanelistRequestBody;
  pathParams: AdminBanPanelistPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Ban a panelist from testing
 */
export const fetchAdminBanPanelist = (variables: AdminBanPanelistVariables) =>
  usabilityhubFetch<
    Responses.R204,
    AdminBanPanelistError,
    AdminBanPanelistRequestBody,
    {},
    {},
    AdminBanPanelistPathParams
  >({ url: "/api/admin/panelists/{id}/ban", method: "post", ...variables });

/**
 * Ban a panelist from testing
 */
export const useAdminBanPanelist = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AdminBanPanelistError,
      AdminBanPanelistVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AdminBanPanelistError,
    AdminBanPanelistVariables
  >(
    (variables: AdminBanPanelistVariables) =>
      fetchAdminBanPanelist({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminSuspendPanelistPathParams = {
  /**
   * The ID of the the panelist's user to suspend
   */
  id: number;
};

export type AdminSuspendPanelistError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AdminSuspendPanelistRequestBody = {
  reasons: Schemas.BanReason[];
};

export type AdminSuspendPanelistVariables = {
  body: AdminSuspendPanelistRequestBody;
  pathParams: AdminSuspendPanelistPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Suspend a panelist from testing
 */
export const fetchAdminSuspendPanelist = (
  variables: AdminSuspendPanelistVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    AdminSuspendPanelistError,
    AdminSuspendPanelistRequestBody,
    {},
    {},
    AdminSuspendPanelistPathParams
  >({ url: "/api/admin/panelists/{id}/suspend", method: "post", ...variables });

/**
 * Suspend a panelist from testing
 */
export const useAdminSuspendPanelist = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AdminSuspendPanelistError,
      AdminSuspendPanelistVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AdminSuspendPanelistError,
    AdminSuspendPanelistVariables
  >(
    (variables: AdminSuspendPanelistVariables) =>
      fetchAdminSuspendPanelist({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminUsabilityTestResultsPathParams = {
  usabilityTestUniqueId: string;
};

export type AdminUsabilityTestResultsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type AdminUsabilityTestResultsVariables = {
  pathParams: AdminUsabilityTestResultsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Admin usability test results
 */
export const fetchAdminUsabilityTestResults = (
  variables: AdminUsabilityTestResultsVariables,
) =>
  usabilityhubFetch<
    Schemas.UsabilityTestResultsData,
    AdminUsabilityTestResultsError,
    undefined,
    {},
    {},
    AdminUsabilityTestResultsPathParams
  >({
    url: "/api/admin/usability_test_results/{usabilityTestUniqueId}",
    method: "get",
    ...variables,
  });

/**
 * Admin usability test results
 */
export const useAdminUsabilityTestResults = <
  TData = Schemas.UsabilityTestResultsData,
>(
  variables: AdminUsabilityTestResultsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UsabilityTestResultsData,
      AdminUsabilityTestResultsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.UsabilityTestResultsData,
    AdminUsabilityTestResultsError,
    TData
  >(
    queryKeyFn({
      path: "/api/admin/usability_test_results/{usability_test_unique_id}",
      operationId: "adminUsabilityTestResults",
      variables,
    }),
    () => fetchAdminUsabilityTestResults({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type AdminPracticeUsabilityTestResultsPathParams = {
  usabilityTestUniqueId: string;
};

export type AdminPracticeUsabilityTestResultsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type AdminPracticeUsabilityTestResultsVariables = {
  pathParams: AdminPracticeUsabilityTestResultsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Admin practice usability test results
 */
export const fetchAdminPracticeUsabilityTestResults = (
  variables: AdminPracticeUsabilityTestResultsVariables,
) =>
  usabilityhubFetch<
    Schemas.UsabilityTestResultsData,
    AdminPracticeUsabilityTestResultsError,
    undefined,
    {},
    {},
    AdminPracticeUsabilityTestResultsPathParams
  >({
    url: "/api/admin/usability_test_results/practice_test_results/{usabilityTestUniqueId}",
    method: "get",
    ...variables,
  });

/**
 * Admin practice usability test results
 */
export const useAdminPracticeUsabilityTestResults = <
  TData = Schemas.UsabilityTestResultsData,
>(
  variables: AdminPracticeUsabilityTestResultsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UsabilityTestResultsData,
      AdminPracticeUsabilityTestResultsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.UsabilityTestResultsData,
    AdminPracticeUsabilityTestResultsError,
    TData
  >(
    queryKeyFn({
      path: "/api/admin/usability_test_results/practice_test_results/{usability_test_unique_id}",
      operationId: "adminPracticeUsabilityTestResults",
      variables,
    }),
    () =>
      fetchAdminPracticeUsabilityTestResults({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetCurrentAccountError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.R403;
}>;

export type GetCurrentAccountResponse = {
  current_account: Schemas.CurrentAccount;
  current_user: Schemas.CurrentUser;
  current_account_admin?: Schemas.CurrentAccountAdmin;
  current_plan?: Schemas.Plan;
  active_stripe_subscription?: Schemas.Subscription;
  manual_subscriptions: {
    id: number;
    plan_unique_id: string;
    period_start: string | null;
    period_end?: string | null;
    paid: boolean;
    created_at: string;
    updated_at: string;
    state: "active" | "pending" | "canceled";
    price_in_cents: number;
    paid_seat_count: number;
  }[];
};

export type GetCurrentAccountVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Gets detailed account information for the current account
 */
export const fetchGetCurrentAccount = (variables: GetCurrentAccountVariables) =>
  usabilityhubFetch<
    GetCurrentAccountResponse,
    GetCurrentAccountError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/account/current", method: "get", ...variables });

/**
 * Gets detailed account information for the current account
 */
export const useGetCurrentAccount = <TData = GetCurrentAccountResponse,>(
  variables: GetCurrentAccountVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetCurrentAccountResponse,
      GetCurrentAccountError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetCurrentAccountResponse,
    GetCurrentAccountError,
    TData
  >(
    queryKeyFn({
      path: "/api/account/current",
      operationId: "getCurrentAccount",
      variables,
    }),
    () => fetchGetCurrentAccount({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetAccountTotalCreditsError = Fetcher.ErrorWrapper<undefined>;

export type GetAccountTotalCreditsResponse = {
  total_credits: number;
};

export type GetAccountTotalCreditsVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Gets the total credits of the current account
 */
export const fetchGetAccountTotalCredits = (
  variables: GetAccountTotalCreditsVariables,
) =>
  usabilityhubFetch<
    GetAccountTotalCreditsResponse,
    GetAccountTotalCreditsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/account/total_credits", method: "get", ...variables });

/**
 * Gets the total credits of the current account
 */
export const useGetAccountTotalCredits = <
  TData = GetAccountTotalCreditsResponse,
>(
  variables: GetAccountTotalCreditsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetAccountTotalCreditsResponse,
      GetAccountTotalCreditsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetAccountTotalCreditsResponse,
    GetAccountTotalCreditsError,
    TData
  >(
    queryKeyFn({
      path: "/api/account/total_credits",
      operationId: "getAccountTotalCredits",
      variables,
    }),
    () => fetchGetAccountTotalCredits({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type SwitchAccountToFreePlanError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type SwitchAccountToFreePlanVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Switches the account to a new plan
 */
export const fetchSwitchAccountToFreePlan = (
  variables: SwitchAccountToFreePlanVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    SwitchAccountToFreePlanError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/account/switch_to_free_plan", method: "post", ...variables });

/**
 * Switches the account to a new plan
 */
export const useSwitchAccountToFreePlan = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      SwitchAccountToFreePlanError,
      SwitchAccountToFreePlanVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    SwitchAccountToFreePlanError,
    SwitchAccountToFreePlanVariables
  >(
    (variables: SwitchAccountToFreePlanVariables) =>
      fetchSwitchAccountToFreePlan({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AddCardError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type AddCardResponse = {
  id: string;
  client_secret: string;
};

export type AddCardRequestBody = {
  set_as_default?: boolean;
};

export type AddCardVariables = {
  body?: AddCardRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Start a checkout session to add a credit card to the current user's account
 */
export const fetchAddCard = (variables: AddCardVariables) =>
  usabilityhubFetch<
    AddCardResponse,
    AddCardError,
    AddCardRequestBody,
    {},
    {},
    {}
  >({ url: "/api/billing_sessions/add_card", method: "post", ...variables });

/**
 * Start a checkout session to add a credit card to the current user's account
 */
export const useAddCard = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      AddCardResponse,
      AddCardError,
      AddCardVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    AddCardResponse,
    AddCardError,
    AddCardVariables
  >(
    (variables: AddCardVariables) =>
      fetchAddCard({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CreateSubscriptionCheckoutSessionError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type CreateSubscriptionCheckoutSessionResponse = {
  id: string;
  client_secret: string;
};

export type CreateSubscriptionCheckoutSessionRequestBody = {
  plan_unique_id: string;
};

export type CreateSubscriptionCheckoutSessionVariables = {
  body: CreateSubscriptionCheckoutSessionRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Start a checkout session to create a subscription
 */
export const fetchCreateSubscriptionCheckoutSession = (
  variables: CreateSubscriptionCheckoutSessionVariables,
) =>
  usabilityhubFetch<
    CreateSubscriptionCheckoutSessionResponse,
    CreateSubscriptionCheckoutSessionError,
    CreateSubscriptionCheckoutSessionRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/billing_sessions/create_subscription",
    method: "post",
    ...variables,
  });

/**
 * Start a checkout session to create a subscription
 */
export const useCreateSubscriptionCheckoutSession = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CreateSubscriptionCheckoutSessionResponse,
      CreateSubscriptionCheckoutSessionError,
      CreateSubscriptionCheckoutSessionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CreateSubscriptionCheckoutSessionResponse,
    CreateSubscriptionCheckoutSessionError,
    CreateSubscriptionCheckoutSessionVariables
  >(
    (variables: CreateSubscriptionCheckoutSessionVariables) =>
      fetchCreateSubscriptionCheckoutSession({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type ExpireSessionError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type ExpireSessionRequestBody = {
  id: string;
};

export type ExpireSessionVariables = {
  body: ExpireSessionRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Expire a checkout session
 */
export const fetchExpireSession = (variables: ExpireSessionVariables) =>
  usabilityhubFetch<
    Responses.R204,
    ExpireSessionError,
    ExpireSessionRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/billing_sessions/expire_session",
    method: "post",
    ...variables,
  });

/**
 * Expire a checkout session
 */
export const useExpireSession = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      ExpireSessionError,
      ExpireSessionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    ExpireSessionError,
    ExpireSessionVariables
  >(
    (variables: ExpireSessionVariables) =>
      fetchExpireSession({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UpdateSubscriptionCheckoutSessionError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type UpdateSubscriptionCheckoutSessionResponse = {
  id: string;
  url: string;
};

export type UpdateSubscriptionCheckoutSessionRequestBody = {
  plan_unique_id: string;
  usability_test_unique_id?: string;
};

export type UpdateSubscriptionCheckoutSessionVariables = {
  body: UpdateSubscriptionCheckoutSessionRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Start billing portal flow to update a subscription
 */
export const fetchUpdateSubscriptionCheckoutSession = (
  variables: UpdateSubscriptionCheckoutSessionVariables,
) =>
  usabilityhubFetch<
    UpdateSubscriptionCheckoutSessionResponse,
    UpdateSubscriptionCheckoutSessionError,
    UpdateSubscriptionCheckoutSessionRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/billing_sessions/update_subscription",
    method: "post",
    ...variables,
  });

/**
 * Start billing portal flow to update a subscription
 */
export const useUpdateSubscriptionCheckoutSession = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      UpdateSubscriptionCheckoutSessionResponse,
      UpdateSubscriptionCheckoutSessionError,
      UpdateSubscriptionCheckoutSessionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    UpdateSubscriptionCheckoutSessionResponse,
    UpdateSubscriptionCheckoutSessionError,
    UpdateSubscriptionCheckoutSessionVariables
  >(
    (variables: UpdateSubscriptionCheckoutSessionVariables) =>
      fetchUpdateSubscriptionCheckoutSession({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type ManageBillingError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type ManageBillingResponse = {
  url: string;
};

export type ManageBillingVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Redirect to a portal session to manage the current account's billing settings
 */
export const fetchManageBilling = (variables: ManageBillingVariables) =>
  usabilityhubFetch<
    ManageBillingResponse,
    ManageBillingError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/billing_sessions/manage_billing",
    method: "post",
    ...variables,
  });

/**
 * Redirect to a portal session to manage the current account's billing settings
 */
export const useManageBilling = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ManageBillingResponse,
      ManageBillingError,
      ManageBillingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    ManageBillingResponse,
    ManageBillingError,
    ManageBillingVariables
  >(
    (variables: ManageBillingVariables) =>
      fetchManageBilling({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type SyncCheckoutSessionError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type SyncCheckoutSessionResponse = {
  succeeded: boolean;
  extra: {
    number_of_credits: number | null;
    price_in_cents: number | null;
  };
};

export type SyncCheckoutSessionRequestBody = {
  id: string;
};

export type SyncCheckoutSessionVariables = {
  body: SyncCheckoutSessionRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Sync the result of a checkout session to the current account. This is mostly useful in dev where we don't receive webhooks from Stripe
 */
export const fetchSyncCheckoutSession = (
  variables: SyncCheckoutSessionVariables,
) =>
  usabilityhubFetch<
    SyncCheckoutSessionResponse,
    SyncCheckoutSessionError,
    SyncCheckoutSessionRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/billing_sessions/sync_session",
    method: "post",
    ...variables,
  });

/**
 * Sync the result of a checkout session to the current account. This is mostly useful in dev where we don't receive webhooks from Stripe
 */
export const useSyncCheckoutSession = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      SyncCheckoutSessionResponse,
      SyncCheckoutSessionError,
      SyncCheckoutSessionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    SyncCheckoutSessionResponse,
    SyncCheckoutSessionError,
    SyncCheckoutSessionVariables
  >(
    (variables: SyncCheckoutSessionVariables) =>
      fetchSyncCheckoutSession({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type SyncSubscriptionError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type SyncSubscriptionVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Sync the current account's Stripe subscription
 */
export const fetchSyncSubscription = (variables: SyncSubscriptionVariables) =>
  usabilityhubFetch<
    Responses.R204,
    SyncSubscriptionError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/billing_sessions/sync_subscription",
    method: "post",
    ...variables,
  });

/**
 * Sync the current account's Stripe subscription
 */
export const useSyncSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      SyncSubscriptionError,
      SyncSubscriptionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    SyncSubscriptionError,
    SyncSubscriptionVariables
  >(
    (variables: SyncSubscriptionVariables) =>
      fetchSyncSubscription({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type PurchaseCreditsSessionError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type PurchaseCreditsSessionResponse = {
  id: string;
  client_secret: string;
};

export type PurchaseCreditsSessionRequestBody = {
  credits: number;
  purchase_reason: Schemas.PointTransactionPurchaseReason;
};

export type PurchaseCreditsSessionVariables = {
  body: PurchaseCreditsSessionRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Start a checkout session to purchase credits
 */
export const fetchPurchaseCreditsSession = (
  variables: PurchaseCreditsSessionVariables,
) =>
  usabilityhubFetch<
    PurchaseCreditsSessionResponse,
    PurchaseCreditsSessionError,
    PurchaseCreditsSessionRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/billing_sessions/purchase_credits",
    method: "post",
    ...variables,
  });

/**
 * Start a checkout session to purchase credits
 */
export const usePurchaseCreditsSession = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PurchaseCreditsSessionResponse,
      PurchaseCreditsSessionError,
      PurchaseCreditsSessionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    PurchaseCreditsSessionResponse,
    PurchaseCreditsSessionError,
    PurchaseCreditsSessionVariables
  >(
    (variables: PurchaseCreditsSessionVariables) =>
      fetchPurchaseCreditsSession({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UploadCardImageError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R400;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type UploadCardImageRequestBody = {
  /**
   * @format binary
   */
  file: Blob;
};

export type UploadCardImageVariables = {
  body: UploadCardImageRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Upload an image to a card sort card
 */
export const fetchUploadCardImage = (variables: UploadCardImageVariables) =>
  usabilityhubFetch<
    Schemas.CardSortCardImage,
    UploadCardImageError,
    UploadCardImageRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/card_sort_cards/upload_card_image",
    method: "post",
    ...variables,
  });

/**
 * Upload an image to a card sort card
 */
export const useUploadCardImage = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CardSortCardImage,
      UploadCardImageError,
      UploadCardImageVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.CardSortCardImage,
    UploadCardImageError,
    UploadCardImageVariables
  >(
    (variables: UploadCardImageVariables) =>
      fetchUploadCardImage({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DuplicateCardImageError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R400;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type DuplicateCardImageRequestBody = {
  image_data: Schemas.ShrineData;
};

export type DuplicateCardImageVariables = {
  body: DuplicateCardImageRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Duplicate an image on a card sort card
 */
export const fetchDuplicateCardImage = (
  variables: DuplicateCardImageVariables,
) =>
  usabilityhubFetch<
    Schemas.CardSortCardImage,
    DuplicateCardImageError,
    DuplicateCardImageRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/card_sort_cards/duplicate_card_image",
    method: "post",
    ...variables,
  });

/**
 * Duplicate an image on a card sort card
 */
export const useDuplicateCardImage = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CardSortCardImage,
      DuplicateCardImageError,
      DuplicateCardImageVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.CardSortCardImage,
    DuplicateCardImageError,
    DuplicateCardImageVariables
  >(
    (variables: DuplicateCardImageVariables) =>
      fetchDuplicateCardImage({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UpdateCardSortGroupingsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R400;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type UpdateCardSortGroupingsResponse = {
  id: number;
  card_sort_type: "open" | "closed";
  show_images: boolean;
  show_descriptions: boolean;
  show_category_descriptions: boolean;
  require_sort_all: boolean;
  require_name_all: boolean;
  number_of_cards_shown: number | null;
  card_sort_cards_attributes: {
    id: number;
    label: string;
    description: string | null;
    position: number;
    image_data: {
      id: string;
      storage: string;
      metadata: {
        size: number;
        width: number;
        height: number;
        filename: string;
        mime_type: string;
      };
    };
    uploaded_image_url: string | null;
    is_processing: boolean;
  }[];
  card_sort_categories_attributes: {
    id: string | null;
    label: string;
    description: string | null;
    position: number;
  }[];
  card_sort_open_categories_attributes: {
    id: string;
    label: string;
    card_sort_category_group_id: string | null;
    ranking: number;
  }[];
  card_sort_category_groups: {
    id: number;
    label: string;
  }[];
  shuffle_cards: boolean;
  shuffle_categories: boolean;
};

export type UpdateCardSortGroupingsRequestBody = {
  open_category_ids: (string | null)[];
  group_id: number;
  group_name: string;
};

export type UpdateCardSortGroupingsVariables = {
  body: UpdateCardSortGroupingsRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update card sort groupings
 */
export const fetchUpdateCardSortGroupings = (
  variables: UpdateCardSortGroupingsVariables,
) =>
  usabilityhubFetch<
    UpdateCardSortGroupingsResponse,
    UpdateCardSortGroupingsError,
    UpdateCardSortGroupingsRequestBody,
    {},
    {},
    {}
  >({ url: "/api/card_sort_categories/group", method: "put", ...variables });

/**
 * Update card sort groupings
 */
export const useUpdateCardSortGroupings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      UpdateCardSortGroupingsResponse,
      UpdateCardSortGroupingsError,
      UpdateCardSortGroupingsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    UpdateCardSortGroupingsResponse,
    UpdateCardSortGroupingsError,
    UpdateCardSortGroupingsVariables
  >(
    (variables: UpdateCardSortGroupingsVariables) =>
      fetchUpdateCardSortGroupings({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListPointTransactionsQueryParams = {
  page?: number;
};

export type ListPointTransactionsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R403;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type ListPointTransactionsResponse = {
  id: number;
  total_points: number;
  created_at: string;
  description: string | null;
  reason: Schemas.PointTransactionReason;
}[];

export type ListPointTransactionsVariables = {
  queryParams?: ListPointTransactionsQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Lists an account's transactions
 */
export const fetchListPointTransactions = (
  variables: ListPointTransactionsVariables,
) =>
  usabilityhubFetch<
    ListPointTransactionsResponse,
    ListPointTransactionsError,
    undefined,
    {},
    ListPointTransactionsQueryParams,
    {}
  >({ url: "/api/point_transactions", method: "get", ...variables });

/**
 * Lists an account's transactions
 */
export const useListPointTransactions = <
  TData = ListPointTransactionsResponse,
>(
  variables: ListPointTransactionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListPointTransactionsResponse,
      ListPointTransactionsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListPointTransactionsResponse,
    ListPointTransactionsError,
    TData
  >(
    queryKeyFn({
      path: "/api/point_transactions",
      operationId: "listPointTransactions",
      variables,
    }),
    () => fetchListPointTransactions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ListModeratedStudyChatMessagesQueryParams = {
  moderated_study_application_id?: string;
};

export type ListModeratedStudyChatMessagesError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R403;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type ListModeratedStudyChatMessagesResponse = Schemas.ChatMessage[];

export type ListModeratedStudyChatMessagesVariables = {
  queryParams?: ListModeratedStudyChatMessagesQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Lists chat message history for a moderated study application
 */
export const fetchListModeratedStudyChatMessages = (
  variables: ListModeratedStudyChatMessagesVariables,
) =>
  usabilityhubFetch<
    ListModeratedStudyChatMessagesResponse,
    ListModeratedStudyChatMessagesError,
    undefined,
    {},
    ListModeratedStudyChatMessagesQueryParams,
    {}
  >({ url: "/api/moderated_study_chat_messages", method: "get", ...variables });

/**
 * Lists chat message history for a moderated study application
 */
export const useListModeratedStudyChatMessages = <
  TData = ListModeratedStudyChatMessagesResponse,
>(
  variables: ListModeratedStudyChatMessagesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListModeratedStudyChatMessagesResponse,
      ListModeratedStudyChatMessagesError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListModeratedStudyChatMessagesResponse,
    ListModeratedStudyChatMessagesError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_study_chat_messages",
      operationId: "listModeratedStudyChatMessages",
      variables,
    }),
    () =>
      fetchListModeratedStudyChatMessages({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ListUnreadModeratedStudyChatsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R403;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type ListUnreadModeratedStudyChatsResponse = {
  /**
   * @format uuid
   */
  moderated_study_id: string;
  /**
   * @format uuid
   */
  moderated_study_application_id: string;
  display_name: string;
}[];

export type ListUnreadModeratedStudyChatsVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Lists unread chats for the current account
 */
export const fetchListUnreadModeratedStudyChats = (
  variables: ListUnreadModeratedStudyChatsVariables,
) =>
  usabilityhubFetch<
    ListUnreadModeratedStudyChatsResponse,
    ListUnreadModeratedStudyChatsError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/moderated_study_chat_messages/unread_chats",
    method: "get",
    ...variables,
  });

/**
 * Lists unread chats for the current account
 */
export const useListUnreadModeratedStudyChats = <
  TData = ListUnreadModeratedStudyChatsResponse,
>(
  variables: ListUnreadModeratedStudyChatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListUnreadModeratedStudyChatsResponse,
      ListUnreadModeratedStudyChatsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListUnreadModeratedStudyChatsResponse,
    ListUnreadModeratedStudyChatsError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_study_chat_messages/unread_chats",
      operationId: "listUnreadModeratedStudyChats",
      variables,
    }),
    () =>
      fetchListUnreadModeratedStudyChats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type PurchaseCreditsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type PurchaseCreditsResponse = {
  purchase: {
    credit_count: number;
    price_in_cents: number;
  };
  message: string;
};

export type PurchaseCreditsRequestBody = {
  /**
   * @minimum 1
   */
  credits: number;
};

export type PurchaseCreditsVariables = {
  body: PurchaseCreditsRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Purchase credits
 */
export const fetchPurchaseCredits = (variables: PurchaseCreditsVariables) =>
  usabilityhubFetch<
    PurchaseCreditsResponse,
    PurchaseCreditsError,
    PurchaseCreditsRequestBody,
    {},
    {},
    {}
  >({ url: "/api/credits/purchase", method: "post", ...variables });

/**
 * Purchase credits
 */
export const usePurchaseCredits = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PurchaseCreditsResponse,
      PurchaseCreditsError,
      PurchaseCreditsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    PurchaseCreditsResponse,
    PurchaseCreditsError,
    PurchaseCreditsVariables
  >(
    (variables: PurchaseCreditsVariables) =>
      fetchPurchaseCredits({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListCreditBatchesError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type ListCreditBatchesResponse = {
  batches: {
    amount: number;
    price: number;
  }[];
};

export type ListCreditBatchesVariables = UsabilityhubContext["fetcherOptions"];

/**
 * List available credit batches
 */
export const fetchListCreditBatches = (variables: ListCreditBatchesVariables) =>
  usabilityhubFetch<
    ListCreditBatchesResponse,
    ListCreditBatchesError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/credits/batches", method: "get", ...variables });

/**
 * List available credit batches
 */
export const useListCreditBatches = <TData = ListCreditBatchesResponse,>(
  variables: ListCreditBatchesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListCreditBatchesResponse,
      ListCreditBatchesError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListCreditBatchesResponse,
    ListCreditBatchesError,
    TData
  >(
    queryKeyFn({
      path: "/api/credits/batches",
      operationId: "listCreditBatches",
      variables,
    }),
    () => fetchListCreditBatches({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetAutomaticPurchaseError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type GetAutomaticPurchaseResponse = {
  automatic_purchase: {
    id: string;
    threshold: number;
    amount: number;
    error_message: string | null;
  } | null;
};

export type GetAutomaticPurchaseVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Get the current automatic purchase
 */
export const fetchGetAutomaticPurchase = (
  variables: GetAutomaticPurchaseVariables,
) =>
  usabilityhubFetch<
    GetAutomaticPurchaseResponse,
    GetAutomaticPurchaseError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/credits/automatic_purchase", method: "get", ...variables });

/**
 * Get the current automatic purchase
 */
export const useGetAutomaticPurchase = <TData = GetAutomaticPurchaseResponse,>(
  variables: GetAutomaticPurchaseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetAutomaticPurchaseResponse,
      GetAutomaticPurchaseError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetAutomaticPurchaseResponse,
    GetAutomaticPurchaseError,
    TData
  >(
    queryKeyFn({
      path: "/api/credits/automatic_purchase",
      operationId: "getAutomaticPurchase",
      variables,
    }),
    () => fetchGetAutomaticPurchase({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type SetAutomaticPurchaseError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type SetAutomaticPurchaseRequestBody = {
  current_purchase_id?: string;
  threshold: number;
  amount: number;
};

export type SetAutomaticPurchaseVariables = {
  body: SetAutomaticPurchaseRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Set the current automatic purchase
 */
export const fetchSetAutomaticPurchase = (
  variables: SetAutomaticPurchaseVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    SetAutomaticPurchaseError,
    SetAutomaticPurchaseRequestBody,
    {},
    {},
    {}
  >({ url: "/api/credits/automatic_purchase", method: "post", ...variables });

/**
 * Set the current automatic purchase
 */
export const useSetAutomaticPurchase = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      SetAutomaticPurchaseError,
      SetAutomaticPurchaseVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    SetAutomaticPurchaseError,
    SetAutomaticPurchaseVariables
  >(
    (variables: SetAutomaticPurchaseVariables) =>
      fetchSetAutomaticPurchase({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DeleteAutomaticPurchaseError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type DeleteAutomaticPurchaseRequestBody = {
  current_purchase_id: string;
};

export type DeleteAutomaticPurchaseVariables = {
  body: DeleteAutomaticPurchaseRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Delete the current automatic purchase
 */
export const fetchDeleteAutomaticPurchase = (
  variables: DeleteAutomaticPurchaseVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    DeleteAutomaticPurchaseError,
    DeleteAutomaticPurchaseRequestBody,
    {},
    {},
    {}
  >({ url: "/api/credits/automatic_purchase", method: "delete", ...variables });

/**
 * Delete the current automatic purchase
 */
export const useDeleteAutomaticPurchase = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeleteAutomaticPurchaseError,
      DeleteAutomaticPurchaseVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeleteAutomaticPurchaseError,
    DeleteAutomaticPurchaseVariables
  >(
    (variables: DeleteAutomaticPurchaseVariables) =>
      fetchDeleteAutomaticPurchase({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type EvaluateAutomaticPurchaseError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type EvaluateAutomaticPurchaseResponse = {
  amount: number;
};

export type EvaluateAutomaticPurchaseVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Evaluate the current automatic purchase
 */
export const fetchEvaluateAutomaticPurchase = (
  variables: EvaluateAutomaticPurchaseVariables,
) =>
  usabilityhubFetch<
    EvaluateAutomaticPurchaseResponse,
    EvaluateAutomaticPurchaseError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/credits/automatic_purchase/evaluate",
    method: "get",
    ...variables,
  });

/**
 * Evaluate the current automatic purchase
 */
export const useEvaluateAutomaticPurchase = <
  TData = EvaluateAutomaticPurchaseResponse,
>(
  variables: EvaluateAutomaticPurchaseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      EvaluateAutomaticPurchaseResponse,
      EvaluateAutomaticPurchaseError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    EvaluateAutomaticPurchaseResponse,
    EvaluateAutomaticPurchaseError,
    TData
  >(
    queryKeyFn({
      path: "/api/credits/automatic_purchase/evaluate",
      operationId: "evaluateAutomaticPurchase",
      variables,
    }),
    () => fetchEvaluateAutomaticPurchase({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ClaimCreditCodeError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type ClaimCreditCodeResponse = {
  claimed_points: number;
};

export type ClaimCreditCodeRequestBody = {
  credit_code: string;
};

export type ClaimCreditCodeVariables = {
  body: ClaimCreditCodeRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Claim some credits using a code
 */
export const fetchClaimCreditCode = (variables: ClaimCreditCodeVariables) =>
  usabilityhubFetch<
    ClaimCreditCodeResponse,
    ClaimCreditCodeError,
    ClaimCreditCodeRequestBody,
    {},
    {},
    {}
  >({ url: "/api/credit_codes/claim", method: "post", ...variables });

/**
 * Claim some credits using a code
 */
export const useClaimCreditCode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ClaimCreditCodeResponse,
      ClaimCreditCodeError,
      ClaimCreditCodeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    ClaimCreditCodeResponse,
    ClaimCreditCodeError,
    ClaimCreditCodeVariables
  >(
    (variables: ClaimCreditCodeVariables) =>
      fetchClaimCreditCode({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListDemographicsError = Fetcher.ErrorWrapper<undefined>;

export type ListDemographicsResponse = Schemas.DemographicAttributeGroup[];

export type ListDemographicsVariables = UsabilityhubContext["fetcherOptions"];

/**
 * This is used to list all demographic attributes
 */
export const fetchListDemographics = (variables: ListDemographicsVariables) =>
  usabilityhubFetch<
    ListDemographicsResponse,
    ListDemographicsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/demographics", method: "get", ...variables });

/**
 * This is used to list all demographic attributes
 */
export const useListDemographics = <TData = ListDemographicsResponse,>(
  variables: ListDemographicsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListDemographicsResponse,
      ListDemographicsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListDemographicsResponse,
    ListDemographicsError,
    TData
  >(
    queryKeyFn({
      path: "/api/demographics",
      operationId: "listDemographics",
      variables,
    }),
    () => fetchListDemographics({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type DemographicProfileCompleteProfileError =
  Fetcher.ErrorWrapper<undefined>;

export type DemographicProfileCompleteProfileResponse = {
  /**
   * @format date-time
   */
  completed_profile_at: string | null;
};

export type DemographicProfileCompleteProfileVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Complete demographic profile
 */
export const fetchDemographicProfileCompleteProfile = (
  variables: DemographicProfileCompleteProfileVariables,
) =>
  usabilityhubFetch<
    DemographicProfileCompleteProfileResponse,
    DemographicProfileCompleteProfileError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/demographic_profiles/demographic_profiles_complete_profile",
    method: "post",
    ...variables,
  });

/**
 * Complete demographic profile
 */
export const useDemographicProfileCompleteProfile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DemographicProfileCompleteProfileResponse,
      DemographicProfileCompleteProfileError,
      DemographicProfileCompleteProfileVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    DemographicProfileCompleteProfileResponse,
    DemographicProfileCompleteProfileError,
    DemographicProfileCompleteProfileVariables
  >(
    (variables: DemographicProfileCompleteProfileVariables) =>
      fetchDemographicProfileCompleteProfile({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type DemographicProfileForUserError = Fetcher.ErrorWrapper<undefined>;

export type DemographicProfileForUserResponse = {
  selected_demographic_attribute_option_ids: number[];
  country: string | null;
  formatted_address: string | null;
  google_place_id: string | null;
  fluencies: {
    id: number;
    is_fluent: boolean;
    language_code: string;
    updater_id: number;
    panelist_id: number;
  }[];
  year_of_birth: number | null;
};

export type DemographicProfileForUserVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Demographic profile for user
 */
export const fetchDemographicProfileForUser = (
  variables: DemographicProfileForUserVariables,
) =>
  usabilityhubFetch<
    DemographicProfileForUserResponse,
    DemographicProfileForUserError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/demographic_profiles/demographic_profiles_for_user",
    method: "get",
    ...variables,
  });

/**
 * Demographic profile for user
 */
export const useDemographicProfileForUser = <
  TData = DemographicProfileForUserResponse,
>(
  variables: DemographicProfileForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      DemographicProfileForUserResponse,
      DemographicProfileForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    DemographicProfileForUserResponse,
    DemographicProfileForUserError,
    TData
  >(
    queryKeyFn({
      path: "/api/demographic_profiles/demographic_profiles_for_user",
      operationId: "demographicProfileForUser",
      variables,
    }),
    () => fetchDemographicProfileForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type DemographicProfileIndexError = Fetcher.ErrorWrapper<undefined>;

export type DemographicProfileIndexResponse = {
  group_name: string;
  demographic_attributes: {
    id: number;
    name: string;
    code: string;
    question: string;
    profile_helper: string | null;
    individual_sort_order: number;
    multi_select: boolean;
    required: boolean;
    options: {
      id: number;
      code: string | null;
      value: string;
      profile_helper: string | null;
      is_none_of_above: boolean;
      is_prefer_not_to_say: boolean;
    }[];
  }[];
}[];

export type DemographicProfileIndexVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Demographic profile data for a panelist
 */
export const fetchDemographicProfileIndex = (
  variables: DemographicProfileIndexVariables,
) =>
  usabilityhubFetch<
    DemographicProfileIndexResponse,
    DemographicProfileIndexError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/demographic_profiles/demographic_profiles_index",
    method: "get",
    ...variables,
  });

/**
 * Demographic profile data for a panelist
 */
export const useDemographicProfileIndex = <
  TData = DemographicProfileIndexResponse,
>(
  variables: DemographicProfileIndexVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      DemographicProfileIndexResponse,
      DemographicProfileIndexError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    DemographicProfileIndexResponse,
    DemographicProfileIndexError,
    TData
  >(
    queryKeyFn({
      path: "/api/demographic_profiles/demographic_profiles_index",
      operationId: "demographicProfileIndex",
      variables,
    }),
    () => fetchDemographicProfileIndex({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type DemographicProfileUpdateError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type DemographicProfileUpdateRequestBody = {
  demographic_attribute_id: number;
  selected_demographic_attribute_option_ids: string[];
};

export type DemographicProfileUpdateVariables = {
  body: DemographicProfileUpdateRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update a demographic attribute
 */
export const fetchDemographicProfileUpdate = (
  variables: DemographicProfileUpdateVariables,
) =>
  usabilityhubFetch<
    Record<string, any>,
    DemographicProfileUpdateError,
    DemographicProfileUpdateRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/demographic_profiles/demographic_profiles_update",
    method: "post",
    ...variables,
  });

/**
 * Update a demographic attribute
 */
export const useDemographicProfileUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Record<string, any>,
      DemographicProfileUpdateError,
      DemographicProfileUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Record<string, any>,
    DemographicProfileUpdateError,
    DemographicProfileUpdateVariables
  >(
    (variables: DemographicProfileUpdateVariables) =>
      fetchDemographicProfileUpdate({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UpdatePanelistLocationError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type UpdatePanelistLocationResponse = {
  require_phone_validation: boolean;
};

export type UpdatePanelistLocationRequestBody = {
  google_place_id: string;
};

export type UpdatePanelistLocationVariables = {
  body: UpdatePanelistLocationRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update granular location for a panelist
 */
export const fetchUpdatePanelistLocation = (
  variables: UpdatePanelistLocationVariables,
) =>
  usabilityhubFetch<
    UpdatePanelistLocationResponse,
    UpdatePanelistLocationError,
    UpdatePanelistLocationRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/demographic_profiles/demographic_profiles_update_location",
    method: "post",
    ...variables,
  });

/**
 * Update granular location for a panelist
 */
export const useUpdatePanelistLocation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      UpdatePanelistLocationResponse,
      UpdatePanelistLocationError,
      UpdatePanelistLocationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    UpdatePanelistLocationResponse,
    UpdatePanelistLocationError,
    UpdatePanelistLocationVariables
  >(
    (variables: UpdatePanelistLocationVariables) =>
      fetchUpdatePanelistLocation({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DemographicProfileUpdateFluenciesError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type DemographicProfileUpdateFluenciesResponse = {
  fluencies: Schemas.Fluency[];
};

export type DemographicProfileUpdateFluenciesRequestBody = {
  fluencies: {
    id: number | null;
    language_code: string;
    is_fluent: boolean;
  }[];
};

export type DemographicProfileUpdateFluenciesVariables = {
  body: DemographicProfileUpdateFluenciesRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update a demographic profile fluencies
 */
export const fetchDemographicProfileUpdateFluencies = (
  variables: DemographicProfileUpdateFluenciesVariables,
) =>
  usabilityhubFetch<
    DemographicProfileUpdateFluenciesResponse,
    DemographicProfileUpdateFluenciesError,
    DemographicProfileUpdateFluenciesRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/demographic_profiles/demographic_profiles_update_fluencies",
    method: "post",
    ...variables,
  });

/**
 * Update a demographic profile fluencies
 */
export const useDemographicProfileUpdateFluencies = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DemographicProfileUpdateFluenciesResponse,
      DemographicProfileUpdateFluenciesError,
      DemographicProfileUpdateFluenciesVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    DemographicProfileUpdateFluenciesResponse,
    DemographicProfileUpdateFluenciesError,
    DemographicProfileUpdateFluenciesVariables
  >(
    (variables: DemographicProfileUpdateFluenciesVariables) =>
      fetchDemographicProfileUpdateFluencies({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type DemographicProfileUpdateYearOfBirthError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type DemographicProfileUpdateYearOfBirthRequestBody = {
  year_of_birth: number;
};

export type DemographicProfileUpdateYearOfBirthVariables = {
  body: DemographicProfileUpdateYearOfBirthRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update a demographic profile year of birth
 */
export const fetchDemographicProfileUpdateYearOfBirth = (
  variables: DemographicProfileUpdateYearOfBirthVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    DemographicProfileUpdateYearOfBirthError,
    DemographicProfileUpdateYearOfBirthRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/demographic_profiles/demographic_profiles_update_year_of_birth",
    method: "post",
    ...variables,
  });

/**
 * Update a demographic profile year of birth
 */
export const useDemographicProfileUpdateYearOfBirth = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DemographicProfileUpdateYearOfBirthError,
      DemographicProfileUpdateYearOfBirthVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DemographicProfileUpdateYearOfBirthError,
    DemographicProfileUpdateYearOfBirthVariables
  >(
    (variables: DemographicProfileUpdateYearOfBirthVariables) =>
      fetchDemographicProfileUpdateYearOfBirth({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type GetActiveFeatureFlagsError = Fetcher.ErrorWrapper<undefined>;

export type GetActiveFeatureFlagsResponse = {
  feature_flags: Schemas.FeatureFlag[];
};

export type GetActiveFeatureFlagsVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Returns a list of active feature flags for the current user
 */
export const fetchGetActiveFeatureFlags = (
  variables: GetActiveFeatureFlagsVariables,
) =>
  usabilityhubFetch<
    GetActiveFeatureFlagsResponse,
    GetActiveFeatureFlagsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/feature_flags", method: "get", ...variables });

/**
 * Returns a list of active feature flags for the current user
 */
export const useGetActiveFeatureFlags = <
  TData = GetActiveFeatureFlagsResponse,
>(
  variables: GetActiveFeatureFlagsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetActiveFeatureFlagsResponse,
      GetActiveFeatureFlagsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetActiveFeatureFlagsResponse,
    GetActiveFeatureFlagsError,
    TData
  >(
    queryKeyFn({
      path: "/api/feature_flags",
      operationId: "getActiveFeatureFlags",
      variables,
    }),
    () => fetchGetActiveFeatureFlags({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ListAllFeatureFlagsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type ListAllFeatureFlagsResponse = {
  feature_flags: {
    flag: Schemas.FeatureFlag;
    description: string;
    added_at: string;
    owner: string;
    enabled_globally: boolean;
    is_lyssna_labs_flag: boolean;
  }[];
};

export type ListAllFeatureFlagsVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Returns a list of active feature flags for the current user
 */
export const fetchListAllFeatureFlags = (
  variables: ListAllFeatureFlagsVariables,
) =>
  usabilityhubFetch<
    ListAllFeatureFlagsResponse,
    ListAllFeatureFlagsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/feature_flags/available", method: "get", ...variables });

/**
 * Returns a list of active feature flags for the current user
 */
export const useListAllFeatureFlags = <TData = ListAllFeatureFlagsResponse,>(
  variables: ListAllFeatureFlagsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListAllFeatureFlagsResponse,
      ListAllFeatureFlagsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListAllFeatureFlagsResponse,
    ListAllFeatureFlagsError,
    TData
  >(
    queryKeyFn({
      path: "/api/feature_flags/available",
      operationId: "listAllFeatureFlags",
      variables,
    }),
    () => fetchListAllFeatureFlags({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ToggleFeatureFlagPathParams = {
  /**
   * name of the feature flag
   */
  featureFlagName: Schemas.FeatureFlag;
};

export type ToggleFeatureFlagError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type ToggleFeatureFlagRequestBody = {
  enabled: boolean;
};

export type ToggleFeatureFlagVariables = {
  body: ToggleFeatureFlagRequestBody;
  pathParams: ToggleFeatureFlagPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Enable or disable a feature flag for the current user
 */
export const fetchToggleFeatureFlag = (variables: ToggleFeatureFlagVariables) =>
  usabilityhubFetch<
    Responses.R204,
    ToggleFeatureFlagError,
    ToggleFeatureFlagRequestBody,
    {},
    {},
    ToggleFeatureFlagPathParams
  >({
    url: "/api/feature_flags/{featureFlagName}",
    method: "patch",
    ...variables,
  });

/**
 * Enable or disable a feature flag for the current user
 */
export const useToggleFeatureFlag = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      ToggleFeatureFlagError,
      ToggleFeatureFlagVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    ToggleFeatureFlagError,
    ToggleFeatureFlagVariables
  >(
    (variables: ToggleFeatureFlagVariables) =>
      fetchToggleFeatureFlag({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CreateOrderError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type CreateOrderResponse = {
  id: number;
  purchase?: {
    credit_count: number;
    price_in_cents: number;
  };
};

export type CreateOrderRequestBody = {
  usability_test_unique_id: string;
  /**
   * @minimum 1
   */
  requested_response_count: number;
  demographic_target_id: number | null;
  estimated_incidence_rate: number | null;
};

export type CreateOrderVariables = {
  body: CreateOrderRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Creates a new order for the related UsabilityTest. You'll also need to pass a demographic_target_id representing the targeting (if any) and the number of responses needed.
 */
export const fetchCreateOrder = (variables: CreateOrderVariables) =>
  usabilityhubFetch<
    CreateOrderResponse,
    CreateOrderError,
    CreateOrderRequestBody,
    {},
    {},
    {}
  >({ url: "/api/orders", method: "post", ...variables });

/**
 * Creates a new order for the related UsabilityTest. You'll also need to pass a demographic_target_id representing the targeting (if any) and the number of responses needed.
 */
export const useCreateOrder = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CreateOrderResponse,
      CreateOrderError,
      CreateOrderVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CreateOrderResponse,
    CreateOrderError,
    CreateOrderVariables
  >(
    (variables: CreateOrderVariables) =>
      fetchCreateOrder({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CalculatePriceAndEstimatedDurationQueryParams = {
  usability_test_id: string;
  demographic_attribute_option_ids: string;
  min_age?: number;
  max_age?: number;
  requested_response_count: number;
  estimated_incidence_rate?: number;
};

export type CalculatePriceAndEstimatedDurationError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type CalculatePriceAndEstimatedDurationResponse = {
  test_duration_range: {
    lower_minutes: number;
    upper_minutes: number;
  };
  per_response_cost_breakdown: {
    total_cost: number;
    test_cost: number;
    screener_cost: number;
    recording_cost: number;
  };
  credit_cost: number;
  credits_scale: {
    from: number;
    to: number | null;
    price_in_cents: number;
  }[];
  credits_to_be_purchased: number;
  discount_applied: boolean;
  discount: number | null;
  formatted_discount: string | null;
  formatted_price_before_discount: string | null;
  formatted_price: string;
  price_before_discount: number | null;
  price_per_credit: string;
  price: number;
  requested_response_count: number;
  estimated_duration: string | null;
  demographic_target_id: number | null;
  estimated_incidence_rate: number | null;
};

export type CalculatePriceAndEstimatedDurationRequestBody = {
  target_locations: {
    type: "country" | "state" | "city";
    id: string;
  }[];
};

export type CalculatePriceAndEstimatedDurationVariables = {
  body: CalculatePriceAndEstimatedDurationRequestBody;
  queryParams: CalculatePriceAndEstimatedDurationQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns price and duration estimates for an order
 */
export const fetchCalculatePriceAndEstimatedDuration = (
  variables: CalculatePriceAndEstimatedDurationVariables,
) =>
  usabilityhubFetch<
    CalculatePriceAndEstimatedDurationResponse,
    CalculatePriceAndEstimatedDurationError,
    CalculatePriceAndEstimatedDurationRequestBody,
    {},
    CalculatePriceAndEstimatedDurationQueryParams,
    {}
  >({
    url: "/api/orders/price_and_estimated_duration",
    method: "post",
    ...variables,
  });

/**
 * Returns price and duration estimates for an order
 */
export const useCalculatePriceAndEstimatedDuration = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CalculatePriceAndEstimatedDurationResponse,
      CalculatePriceAndEstimatedDurationError,
      CalculatePriceAndEstimatedDurationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CalculatePriceAndEstimatedDurationResponse,
    CalculatePriceAndEstimatedDurationError,
    CalculatePriceAndEstimatedDurationVariables
  >(
    (variables: CalculatePriceAndEstimatedDurationVariables) =>
      fetchCalculatePriceAndEstimatedDuration({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type GetNewOrderPagePathParams = {
  usabilityTestId: string;
};

export type GetNewOrderPageError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type GetNewOrderPageResponse = {
  has_screener: boolean;
  has_recordings: boolean;
  is_external: boolean;
  is_usability_test_archived: boolean;
  language_code: string;
  permitted_device_type: "any" | "mobile_only" | "desktop_only";
};

export type GetNewOrderPageVariables = {
  pathParams: GetNewOrderPagePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get data for the new order page
 */
export const fetchGetNewOrderPage = (variables: GetNewOrderPageVariables) =>
  usabilityhubFetch<
    GetNewOrderPageResponse,
    GetNewOrderPageError,
    undefined,
    {},
    {},
    GetNewOrderPagePathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/orders/new",
    method: "get",
    ...variables,
  });

/**
 * Get data for the new order page
 */
export const useGetNewOrderPage = <TData = GetNewOrderPageResponse,>(
  variables: GetNewOrderPageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetNewOrderPageResponse,
      GetNewOrderPageError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetNewOrderPageResponse,
    GetNewOrderPageError,
    TData
  >(
    queryKeyFn({
      path: "/api/usability_tests/{usability_test_id}/orders/new",
      operationId: "getNewOrderPage",
      variables,
    }),
    () => fetchGetNewOrderPage({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CancelOrderPathParams = {
  id: number;
};

export type CancelOrderError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type CancelOrderResponse = {
  refunded_credits: number | null;
};

export type CancelOrderRequestBody = {
  reason?:
    | "want_to_modify_test"
    | "technical_issue"
    | "taking_too_long_to_fulfill"
    | "already_have_enough_responses"
    | "adjust_demographic_targeting"
    | "quality_not_sufficient"
    | "other";
  reason_other?: string;
};

export type CancelOrderVariables = {
  body?: CancelOrderRequestBody;
  pathParams: CancelOrderPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Cancel a usability test order
 */
export const fetchCancelOrder = (variables: CancelOrderVariables) =>
  usabilityhubFetch<
    CancelOrderResponse,
    CancelOrderError,
    CancelOrderRequestBody,
    {},
    {},
    CancelOrderPathParams
  >({ url: "/api/orders/{id}/cancel", method: "post", ...variables });

/**
 * Cancel a usability test order
 */
export const useCancelOrder = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CancelOrderResponse,
      CancelOrderError,
      CancelOrderVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CancelOrderResponse,
    CancelOrderError,
    CancelOrderVariables
  >(
    (variables: CancelOrderVariables) =>
      fetchCancelOrder({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DismissOrderDiscountError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type DismissOrderDiscountVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Dismisses the discount banner
 */
export const fetchDismissOrderDiscount = (
  variables: DismissOrderDiscountVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    DismissOrderDiscountError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/orders/dismiss_discount", method: "post", ...variables });

/**
 * Dismisses the discount banner
 */
export const useDismissOrderDiscount = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DismissOrderDiscountError,
      DismissOrderDiscountVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DismissOrderDiscountError,
    DismissOrderDiscountVariables
  >(
    (variables: DismissOrderDiscountVariables) =>
      fetchDismissOrderDiscount({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type PanelEstimateError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type PanelEstimateResponse = {
  formatted_price_per_response: string;
  formatted_price: string;
  requested_response_count: number;
  estimated_duration: string | null;
};

export type PanelEstimateRequestBody = {
  demographic_attribute_option_ids: string;
  min_age?: number;
  max_age?: number;
  target_locations: {
    type?: "country" | "state" | "city";
    id?: string;
  }[];
  requested_response_count: number;
  study_type:
    | "short_survey"
    | "long_survey"
    | "preference_test"
    | "figma_prototype_test"
    | "open_card_sort";
  language_code: string;
};

export type PanelEstimateVariables = {
  body: PanelEstimateRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns price and duration estimates for an order
 */
export const fetchPanelEstimate = (variables: PanelEstimateVariables) =>
  usabilityhubFetch<
    PanelEstimateResponse,
    PanelEstimateError,
    PanelEstimateRequestBody,
    {},
    {},
    {}
  >({ url: "/api/panel_estimate", method: "post", ...variables });

/**
 * Returns price and duration estimates for an order
 */
export const usePanelEstimate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PanelEstimateResponse,
      PanelEstimateError,
      PanelEstimateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    PanelEstimateResponse,
    PanelEstimateError,
    PanelEstimateVariables
  >(
    (variables: PanelEstimateVariables) =>
      fetchPanelEstimate({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListLanguagesError = Fetcher.ErrorWrapper<undefined>;

export type ListLanguagesResponse = Schemas.Language[];

export type ListLanguagesVariables = UsabilityhubContext["fetcherOptions"];

/**
 * List all languages the platform supports
 */
export const fetchListLanguages = (variables: ListLanguagesVariables) =>
  usabilityhubFetch<
    ListLanguagesResponse,
    ListLanguagesError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/languages", method: "get", ...variables });

/**
 * List all languages the platform supports
 */
export const useListLanguages = <TData = ListLanguagesResponse,>(
  variables: ListLanguagesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListLanguagesResponse,
      ListLanguagesError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<ListLanguagesResponse, ListLanguagesError, TData>(
    queryKeyFn({
      path: "/api/languages",
      operationId: "listLanguages",
      variables,
    }),
    () => fetchListLanguages({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ListPlansError = Fetcher.ErrorWrapper<undefined>;

export type ListPlansResponse = Schemas.Plan[];

export type ListPlansVariables = UsabilityhubContext["fetcherOptions"];

/**
 * List all currently available plans
 */
export const fetchListPlans = (variables: ListPlansVariables) =>
  usabilityhubFetch<ListPlansResponse, ListPlansError, undefined, {}, {}, {}>({
    url: "/api/plans",
    method: "get",
    ...variables,
  });

/**
 * List all currently available plans
 */
export const useListPlans = <TData = ListPlansResponse,>(
  variables: ListPlansVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<ListPlansResponse, ListPlansError, TData>,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<ListPlansResponse, ListPlansError, TData>(
    queryKeyFn({ path: "/api/plans", operationId: "listPlans", variables }),
    () => fetchListPlans({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ListTranslationsQueryParams = {
  /**
   * The locale to fetch translations for, defaults to the current user's locale
   */
  locale?: string;
  /**
   * Comma-separated list of which translation keys to fetch
   */
  keys: string;
};

export type ListTranslationsError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type ListTranslationsVariables = {
  queryParams: ListTranslationsQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get translated strings for the current user's locale
 */
export const fetchListTranslations = (variables: ListTranslationsVariables) =>
  usabilityhubFetch<
    Record<string, any>,
    ListTranslationsError,
    undefined,
    {},
    ListTranslationsQueryParams,
    {}
  >({ url: "/api/translations", method: "get", ...variables });

/**
 * Get translated strings for the current user's locale
 */
export const useListTranslations = <TData = Record<string, any>,>(
  variables: ListTranslationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Record<string, any>,
      ListTranslationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<Record<string, any>, ListTranslationsError, TData>(
    queryKeyFn({
      path: "/api/translations",
      operationId: "listTranslations",
      variables,
    }),
    () => fetchListTranslations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type TrackEventError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type TrackEventRequestBody = {
  event: string;
  event_properties?: Record<string, any>;
};

export type TrackEventVariables = {
  body: TrackEventRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Track an event on Ortto, Segment or Eventy
 */
export const fetchTrackEvent = (variables: TrackEventVariables) =>
  usabilityhubFetch<
    Responses.R204,
    TrackEventError,
    TrackEventRequestBody,
    {},
    {},
    {}
  >({ url: "/api/events/track", method: "post", ...variables });

/**
 * Track an event on Ortto, Segment or Eventy
 */
export const useTrackEvent = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      TrackEventError,
      TrackEventVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    TrackEventError,
    TrackEventVariables
  >(
    (variables: TrackEventVariables) =>
      fetchTrackEvent({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UploadRecordingError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type UploadRecordingResponse = {
  key: string;
};

export type UploadRecordingRequestBody = {
  response_id: number | null;
  /**
   * @format uuid
   */
  recording_progress_id: string | null;
  key: string;
  filename: string;
  recording_types: Schemas.RecordingType[];
  /**
   * @format date-time
   */
  started_at: string;
  /**
   * @format date-time
   */
  ended_at: string;
  question_id?: number | null;
};

export type UploadRecordingVariables = {
  body: UploadRecordingRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Upload a recording of a usability test section or task during test taking
 */
export const fetchUploadRecording = (variables: UploadRecordingVariables) =>
  usabilityhubFetch<
    UploadRecordingResponse,
    UploadRecordingError,
    UploadRecordingRequestBody,
    {},
    {},
    {}
  >({ url: "/api/recordings", method: "post", ...variables });

/**
 * Upload a recording of a usability test section or task during test taking
 */
export const useUploadRecording = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      UploadRecordingResponse,
      UploadRecordingError,
      UploadRecordingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    UploadRecordingResponse,
    UploadRecordingError,
    UploadRecordingVariables
  >(
    (variables: UploadRecordingVariables) =>
      fetchUploadRecording({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetRecordingTranscriptPathParams = {
  recordingId: string;
};

export type GetRecordingTranscriptError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type GetRecordingTranscriptVariables = {
  pathParams: GetRecordingTranscriptPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get a recording transcript
 */
export const fetchGetRecordingTranscript = (
  variables: GetRecordingTranscriptVariables,
) =>
  usabilityhubFetch<
    Schemas.RecordingTranscript,
    GetRecordingTranscriptError,
    undefined,
    {},
    {},
    GetRecordingTranscriptPathParams
  >({
    url: "/api/recording_transcripts/{recordingId}",
    method: "get",
    ...variables,
  });

/**
 * Get a recording transcript
 */
export const useGetRecordingTranscript = <TData = Schemas.RecordingTranscript,>(
  variables: GetRecordingTranscriptVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RecordingTranscript,
      GetRecordingTranscriptError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.RecordingTranscript,
    GetRecordingTranscriptError,
    TData
  >(
    queryKeyFn({
      path: "/api/recording_transcripts/{recording_id}",
      operationId: "getRecordingTranscript",
      variables,
    }),
    () => fetchGetRecordingTranscript({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type TranscribeRecordingPathParams = {
  recordingId: string;
};

export type TranscribeRecordingError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type TranscribeRecordingVariables = {
  pathParams: TranscribeRecordingPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Initiate transcription of a recording
 */
export const fetchTranscribeRecording = (
  variables: TranscribeRecordingVariables,
) =>
  usabilityhubFetch<
    Schemas.RecordingTranscript,
    TranscribeRecordingError,
    undefined,
    {},
    {},
    TranscribeRecordingPathParams
  >({
    url: "/api/recording_transcripts/{recordingId}",
    method: "post",
    ...variables,
  });

/**
 * Initiate transcription of a recording
 */
export const useTranscribeRecording = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RecordingTranscript,
      TranscribeRecordingError,
      TranscribeRecordingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.RecordingTranscript,
    TranscribeRecordingError,
    TranscribeRecordingVariables
  >(
    (variables: TranscribeRecordingVariables) =>
      fetchTranscribeRecording({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type BulkCreateRecordingTranscriptsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type BulkCreateRecordingTranscriptsRequestBody = {
  /**
   * The language code to transcribe the recordings in, or "auto"
   */
  language_code: string;
  recording_ids: string[];
};

export type BulkCreateRecordingTranscriptsVariables = {
  body: BulkCreateRecordingTranscriptsRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Bulk create recording transcripts
 */
export const fetchBulkCreateRecordingTranscripts = (
  variables: BulkCreateRecordingTranscriptsVariables,
) =>
  usabilityhubFetch<
    undefined,
    BulkCreateRecordingTranscriptsError,
    BulkCreateRecordingTranscriptsRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/recording_transcripts/bulk_create",
    method: "post",
    ...variables,
  });

/**
 * Bulk create recording transcripts
 */
export const useBulkCreateRecordingTranscripts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      BulkCreateRecordingTranscriptsError,
      BulkCreateRecordingTranscriptsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    undefined,
    BulkCreateRecordingTranscriptsError,
    BulkCreateRecordingTranscriptsVariables
  >(
    (variables: BulkCreateRecordingTranscriptsVariables) =>
      fetchBulkCreateRecordingTranscripts({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListModeratedStudiesQueryParams = {
  show_archived?: boolean;
  search?: string;
  sort_by?: "name" | "created_at" | "updated_at";
  sort_direction?: "asc" | "desc";
};

export type ListModeratedStudiesError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: {
    code: "invalid_sort_requested";
  };
}>;

export type ListModeratedStudiesResponse = Schemas.ModeratedStudyListEntry[];

export type ListModeratedStudiesVariables = {
  queryParams?: ListModeratedStudiesQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns all moderated studies for the current account with sorting/filtering options
 */
export const fetchListModeratedStudies = (
  variables: ListModeratedStudiesVariables,
) =>
  usabilityhubFetch<
    ListModeratedStudiesResponse,
    ListModeratedStudiesError,
    undefined,
    {},
    ListModeratedStudiesQueryParams,
    {}
  >({ url: "/api/moderated_studies", method: "get", ...variables });

/**
 * Returns all moderated studies for the current account with sorting/filtering options
 */
export const useListModeratedStudies = <TData = ListModeratedStudiesResponse,>(
  variables: ListModeratedStudiesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListModeratedStudiesResponse,
      ListModeratedStudiesError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListModeratedStudiesResponse,
    ListModeratedStudiesError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_studies",
      operationId: "listModeratedStudies",
      variables,
    }),
    () => fetchListModeratedStudies({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type PostApiModeratedStudiesModeratedStudyIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type PostApiModeratedStudiesModeratedStudyIdResponse = {
  moderated_study_id: string;
};

export type PostApiModeratedStudiesModeratedStudyIdRequestBody = {
  internal_name: string;
  timezone: string;
  /**
   * @format uuid
   */
  space_id: string | null;
  /**
   * @format uuid
   */
  project_id: string | null;
};

export type PostApiModeratedStudiesModeratedStudyIdVariables = {
  body: PostApiModeratedStudiesModeratedStudyIdRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Creates a newModerated Study and returns the UUID.
 */
export const fetchPostApiModeratedStudiesModeratedStudyId = (
  variables: PostApiModeratedStudiesModeratedStudyIdVariables,
) =>
  usabilityhubFetch<
    PostApiModeratedStudiesModeratedStudyIdResponse,
    PostApiModeratedStudiesModeratedStudyIdError,
    PostApiModeratedStudiesModeratedStudyIdRequestBody,
    {},
    {},
    {}
  >({ url: "/api/moderated_studies", method: "post", ...variables });

/**
 * Creates a newModerated Study and returns the UUID.
 */
export const usePostApiModeratedStudiesModeratedStudyId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostApiModeratedStudiesModeratedStudyIdResponse,
      PostApiModeratedStudiesModeratedStudyIdError,
      PostApiModeratedStudiesModeratedStudyIdVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    PostApiModeratedStudiesModeratedStudyIdResponse,
    PostApiModeratedStudiesModeratedStudyIdError,
    PostApiModeratedStudiesModeratedStudyIdVariables
  >(
    (variables: PostApiModeratedStudiesModeratedStudyIdVariables) =>
      fetchPostApiModeratedStudiesModeratedStudyId({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type ListActiveModeratedStudiesError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type ListActiveModeratedStudiesResponse = string[];

export type ListActiveModeratedStudiesVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Returns a list of IDs for all active moderated studies for the current account
 */
export const fetchListActiveModeratedStudies = (
  variables: ListActiveModeratedStudiesVariables,
) =>
  usabilityhubFetch<
    ListActiveModeratedStudiesResponse,
    ListActiveModeratedStudiesError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/moderated_studies/active_studies",
    method: "get",
    ...variables,
  });

/**
 * Returns a list of IDs for all active moderated studies for the current account
 */
export const useListActiveModeratedStudies = <
  TData = ListActiveModeratedStudiesResponse,
>(
  variables: ListActiveModeratedStudiesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListActiveModeratedStudiesResponse,
      ListActiveModeratedStudiesError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListActiveModeratedStudiesResponse,
    ListActiveModeratedStudiesError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_studies/active_studies",
      operationId: "listActiveModeratedStudies",
      variables,
    }),
    () => fetchListActiveModeratedStudies({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetModeratedStudyPathParams = {
  /**
   * Moderated Study ID
   */
  moderatedStudyId: string;
};

export type GetModeratedStudyError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type GetModeratedStudyVariables = {
  pathParams: GetModeratedStudyPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns a researcher view of a moderated study with nested attributes for other pieces that will be needed on the edit page.
 */
export const fetchGetModeratedStudy = (variables: GetModeratedStudyVariables) =>
  usabilityhubFetch<
    Schemas.ModeratedStudy,
    GetModeratedStudyError,
    undefined,
    {},
    {},
    GetModeratedStudyPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}",
    method: "get",
    ...variables,
  });

/**
 * Returns a researcher view of a moderated study with nested attributes for other pieces that will be needed on the edit page.
 */
export const useGetModeratedStudy = <TData = Schemas.ModeratedStudy,>(
  variables: GetModeratedStudyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ModeratedStudy,
      GetModeratedStudyError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.ModeratedStudy,
    GetModeratedStudyError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_studies/{moderated_study_id}",
      operationId: "getModeratedStudy",
      variables,
    }),
    () => fetchGetModeratedStudy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type PutApiModeratedStudiesIdPathParams = {
  /**
   * Moderated Study ID
   */
  moderatedStudyId: string;
};

export type PutApiModeratedStudiesIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type PutApiModeratedStudiesIdRequestBody = {
  internal_name: string;
  external_name?: string;
  description?: string;
};

export type PutApiModeratedStudiesIdVariables = {
  body: PutApiModeratedStudiesIdRequestBody;
  pathParams: PutApiModeratedStudiesIdPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update Moderated Study details
 */
export const fetchPutApiModeratedStudiesId = (
  variables: PutApiModeratedStudiesIdVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    PutApiModeratedStudiesIdError,
    PutApiModeratedStudiesIdRequestBody,
    {},
    {},
    PutApiModeratedStudiesIdPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}",
    method: "put",
    ...variables,
  });

/**
 * Update Moderated Study details
 */
export const usePutApiModeratedStudiesId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      PutApiModeratedStudiesIdError,
      PutApiModeratedStudiesIdVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    PutApiModeratedStudiesIdError,
    PutApiModeratedStudiesIdVariables
  >(
    (variables: PutApiModeratedStudiesIdVariables) =>
      fetchPutApiModeratedStudiesId({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetModeratedStudyLocationsPathParams = {
  /**
   * Moderated Study ID
   */
  moderatedStudyId: string;
};

export type GetModeratedStudyLocationsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type GetModeratedStudyLocationsResponse = {
  locations: {
    type: "country" | "state" | "city";
    id: string;
  }[];
};

export type GetModeratedStudyLocationsVariables = {
  pathParams: GetModeratedStudyLocationsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns a list of all locations that are used on an application for this study.
 */
export const fetchGetModeratedStudyLocations = (
  variables: GetModeratedStudyLocationsVariables,
) =>
  usabilityhubFetch<
    GetModeratedStudyLocationsResponse,
    GetModeratedStudyLocationsError,
    undefined,
    {},
    {},
    GetModeratedStudyLocationsPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/locations",
    method: "get",
    ...variables,
  });

/**
 * Returns a list of all locations that are used on an application for this study.
 */
export const useGetModeratedStudyLocations = <
  TData = GetModeratedStudyLocationsResponse,
>(
  variables: GetModeratedStudyLocationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetModeratedStudyLocationsResponse,
      GetModeratedStudyLocationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetModeratedStudyLocationsResponse,
    GetModeratedStudyLocationsError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_studies/{moderated_study_id}/locations",
      operationId: "getModeratedStudyLocations",
      variables,
    }),
    () => fetchGetModeratedStudyLocations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetModeratedStudySummaryPathParams = {
  /**
   * ID of the moderated study
   */
  moderatedStudyId: string;
};

export type GetModeratedStudySummaryError = Fetcher.ErrorWrapper<undefined>;

export type GetModeratedStudySummaryResponse = {
  has_active_recruitment_link: boolean;
  applications_count: number;
  recordings_count: number;
  bookings_count: number;
  has_available_booking_slots: boolean;
};

export type GetModeratedStudySummaryVariables = {
  pathParams: GetModeratedStudySummaryPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Gets the summary of a moderated study. This includes whether the study has an active recruitment link.
 */
export const fetchGetModeratedStudySummary = (
  variables: GetModeratedStudySummaryVariables,
) =>
  usabilityhubFetch<
    GetModeratedStudySummaryResponse,
    GetModeratedStudySummaryError,
    undefined,
    {},
    {},
    GetModeratedStudySummaryPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/summary",
    method: "get",
    ...variables,
  });

/**
 * Gets the summary of a moderated study. This includes whether the study has an active recruitment link.
 */
export const useGetModeratedStudySummary = <
  TData = GetModeratedStudySummaryResponse,
>(
  variables: GetModeratedStudySummaryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetModeratedStudySummaryResponse,
      GetModeratedStudySummaryError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetModeratedStudySummaryResponse,
    GetModeratedStudySummaryError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_studies/{moderated_study_id}/summary",
      operationId: "getModeratedStudySummary",
      variables,
    }),
    () => fetchGetModeratedStudySummary({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type DisableModeratedStudyScreenerPathParams = {
  moderatedStudyId: string;
};

export type DisableModeratedStudyScreenerError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type DisableModeratedStudyScreenerVariables = {
  pathParams: DisableModeratedStudyScreenerPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Disables a moderated study screener so that it will no longer be editable in the test builder or visible to the applicant.
 */
export const fetchDisableModeratedStudyScreener = (
  variables: DisableModeratedStudyScreenerVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    DisableModeratedStudyScreenerError,
    undefined,
    {},
    {},
    DisableModeratedStudyScreenerPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/disable_screener",
    method: "post",
    ...variables,
  });

/**
 * Disables a moderated study screener so that it will no longer be editable in the test builder or visible to the applicant.
 */
export const useDisableModeratedStudyScreener = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DisableModeratedStudyScreenerError,
      DisableModeratedStudyScreenerVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DisableModeratedStudyScreenerError,
    DisableModeratedStudyScreenerVariables
  >(
    (variables: DisableModeratedStudyScreenerVariables) =>
      fetchDisableModeratedStudyScreener({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type EnableModeratedStudyScreenerPathParams = {
  moderatedStudyId: string;
};

export type EnableModeratedStudyScreenerError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type EnableModeratedStudyScreenerVariables = {
  pathParams: EnableModeratedStudyScreenerPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Enables a moderated study screener so that it will be both editable in the test builder and visible to the applicant.
 */
export const fetchEnableModeratedStudyScreener = (
  variables: EnableModeratedStudyScreenerVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    EnableModeratedStudyScreenerError,
    undefined,
    {},
    {},
    EnableModeratedStudyScreenerPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/enable_screener",
    method: "post",
    ...variables,
  });

/**
 * Enables a moderated study screener so that it will be both editable in the test builder and visible to the applicant.
 */
export const useEnableModeratedStudyScreener = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      EnableModeratedStudyScreenerError,
      EnableModeratedStudyScreenerVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    EnableModeratedStudyScreenerError,
    EnableModeratedStudyScreenerVariables
  >(
    (variables: EnableModeratedStudyScreenerVariables) =>
      fetchEnableModeratedStudyScreener({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UpdateAgreementForModeratedStudyPathParams = {
  /**
   * Moderated Study ID
   */
  moderatedStudyId: string;
};

export type UpdateAgreementForModeratedStudyError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UpdateAgreementForModeratedStudyRequestBody = {
  enabled: boolean;
  key?: string;
  filename?: string;
  _destroy?: boolean;
};

export type UpdateAgreementForModeratedStudyVariables = {
  body: UpdateAgreementForModeratedStudyRequestBody;
  pathParams: UpdateAgreementForModeratedStudyPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update the agreement for a moderated study
 */
export const fetchUpdateAgreementForModeratedStudy = (
  variables: UpdateAgreementForModeratedStudyVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdateAgreementForModeratedStudyError,
    UpdateAgreementForModeratedStudyRequestBody,
    {},
    {},
    UpdateAgreementForModeratedStudyPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/agreement",
    method: "put",
    ...variables,
  });

/**
 * Update the agreement for a moderated study
 */
export const useUpdateAgreementForModeratedStudy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdateAgreementForModeratedStudyError,
      UpdateAgreementForModeratedStudyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdateAgreementForModeratedStudyError,
    UpdateAgreementForModeratedStudyVariables
  >(
    (variables: UpdateAgreementForModeratedStudyVariables) =>
      fetchUpdateAgreementForModeratedStudy({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type AddRecordingToModeratedStudyBookingPathParams = {
  moderatedStudyId: string;
  moderatedStudyBookingId: string;
};

export type AddRecordingToModeratedStudyBookingError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AddRecordingToModeratedStudyBookingResponse = {
  /**
   * Unique ID of the job processing the recording
   *
   * @format uuid
   */
  job_id: string;
};

export type AddRecordingToModeratedStudyBookingRequestBody = {
  key: string;
  filename: string;
};

export type AddRecordingToModeratedStudyBookingVariables = {
  body: AddRecordingToModeratedStudyBookingRequestBody;
  pathParams: AddRecordingToModeratedStudyBookingPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Adds a recording to a Moderated Study Booking
 */
export const fetchAddRecordingToModeratedStudyBooking = (
  variables: AddRecordingToModeratedStudyBookingVariables,
) =>
  usabilityhubFetch<
    AddRecordingToModeratedStudyBookingResponse,
    AddRecordingToModeratedStudyBookingError,
    AddRecordingToModeratedStudyBookingRequestBody,
    {},
    {},
    AddRecordingToModeratedStudyBookingPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings/{moderatedStudyBookingId}/recordings",
    method: "post",
    ...variables,
  });

/**
 * Adds a recording to a Moderated Study Booking
 */
export const useAddRecordingToModeratedStudyBooking = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      AddRecordingToModeratedStudyBookingResponse,
      AddRecordingToModeratedStudyBookingError,
      AddRecordingToModeratedStudyBookingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    AddRecordingToModeratedStudyBookingResponse,
    AddRecordingToModeratedStudyBookingError,
    AddRecordingToModeratedStudyBookingVariables
  >(
    (variables: AddRecordingToModeratedStudyBookingVariables) =>
      fetchAddRecordingToModeratedStudyBooking({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type GetModeratedStudyBookingRecordingsPathParams = {
  moderatedStudyId: string;
  moderatedStudyBookingId: string;
};

export type GetModeratedStudyBookingRecordingsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type GetModeratedStudyBookingRecordingsResponse =
  Schemas.ModeratedStudyBookingRecording[];

export type GetModeratedStudyBookingRecordingsVariables = {
  pathParams: GetModeratedStudyBookingRecordingsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get the Moderated Study Booking recording
 */
export const fetchGetModeratedStudyBookingRecordings = (
  variables: GetModeratedStudyBookingRecordingsVariables,
) =>
  usabilityhubFetch<
    GetModeratedStudyBookingRecordingsResponse,
    GetModeratedStudyBookingRecordingsError,
    undefined,
    {},
    {},
    GetModeratedStudyBookingRecordingsPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings/{moderatedStudyBookingId}/recordings",
    method: "get",
    ...variables,
  });

/**
 * Get the Moderated Study Booking recording
 */
export const useGetModeratedStudyBookingRecordings = <
  TData = GetModeratedStudyBookingRecordingsResponse,
>(
  variables: GetModeratedStudyBookingRecordingsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetModeratedStudyBookingRecordingsResponse,
      GetModeratedStudyBookingRecordingsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetModeratedStudyBookingRecordingsResponse,
    GetModeratedStudyBookingRecordingsError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_studies/{moderated_study_id}/bookings/{moderated_study_booking_id}/recordings",
      operationId: "getModeratedStudyBookingRecordings",
      variables,
    }),
    () =>
      fetchGetModeratedStudyBookingRecordings({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdateModeratedStudyBookingRecordingPathParams = {
  moderatedStudyId: string;
  moderatedStudyBookingId: string;
  recordingId: string;
};

export type UpdateModeratedStudyBookingRecordingError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UpdateModeratedStudyBookingRecordingRequestBody = {
  filename?: string;
};

export type UpdateModeratedStudyBookingRecordingVariables = {
  body?: UpdateModeratedStudyBookingRecordingRequestBody;
  pathParams: UpdateModeratedStudyBookingRecordingPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update a Moderated Study Booking recording
 */
export const fetchUpdateModeratedStudyBookingRecording = (
  variables: UpdateModeratedStudyBookingRecordingVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdateModeratedStudyBookingRecordingError,
    UpdateModeratedStudyBookingRecordingRequestBody,
    {},
    {},
    UpdateModeratedStudyBookingRecordingPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings/{moderatedStudyBookingId}/recordings/{recordingId}",
    method: "patch",
    ...variables,
  });

/**
 * Update a Moderated Study Booking recording
 */
export const useUpdateModeratedStudyBookingRecording = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdateModeratedStudyBookingRecordingError,
      UpdateModeratedStudyBookingRecordingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdateModeratedStudyBookingRecordingError,
    UpdateModeratedStudyBookingRecordingVariables
  >(
    (variables: UpdateModeratedStudyBookingRecordingVariables) =>
      fetchUpdateModeratedStudyBookingRecording({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type DeleteModeratedStudyBookingRecordingPathParams = {
  moderatedStudyId: string;
  moderatedStudyBookingId: string;
  recordingId: string;
};

export type DeleteModeratedStudyBookingRecordingError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type DeleteModeratedStudyBookingRecordingVariables = {
  pathParams: DeleteModeratedStudyBookingRecordingPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Delete a recording from a Moderated Study Booking
 */
export const fetchDeleteModeratedStudyBookingRecording = (
  variables: DeleteModeratedStudyBookingRecordingVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    DeleteModeratedStudyBookingRecordingError,
    undefined,
    {},
    {},
    DeleteModeratedStudyBookingRecordingPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings/{moderatedStudyBookingId}/recordings/{recordingId}",
    method: "delete",
    ...variables,
  });

/**
 * Delete a recording from a Moderated Study Booking
 */
export const useDeleteModeratedStudyBookingRecording = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeleteModeratedStudyBookingRecordingError,
      DeleteModeratedStudyBookingRecordingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeleteModeratedStudyBookingRecordingError,
    DeleteModeratedStudyBookingRecordingVariables
  >(
    (variables: DeleteModeratedStudyBookingRecordingVariables) =>
      fetchDeleteModeratedStudyBookingRecording({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type GetModeratedStudyInterviewTranscriptPathParams = {
  /**
   * ID of the moderated study
   */
  moderatedStudyId: string;
  /**
   * ID of the booking
   */
  moderatedStudyBookingId: string;
  /**
   * ID of the recording
   */
  recordingId: string;
};

export type GetModeratedStudyInterviewTranscriptError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type GetModeratedStudyInterviewTranscriptVariables = {
  pathParams: GetModeratedStudyInterviewTranscriptPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Retrieve a transcript
 */
export const fetchGetModeratedStudyInterviewTranscript = (
  variables: GetModeratedStudyInterviewTranscriptVariables,
) =>
  usabilityhubFetch<
    Schemas.InterviewTranscript,
    GetModeratedStudyInterviewTranscriptError,
    undefined,
    {},
    {},
    GetModeratedStudyInterviewTranscriptPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings/{moderatedStudyBookingId}/recordings/{recordingId}/transcript",
    method: "get",
    ...variables,
  });

/**
 * Retrieve a transcript
 */
export const useGetModeratedStudyInterviewTranscript = <
  TData = Schemas.InterviewTranscript,
>(
  variables: GetModeratedStudyInterviewTranscriptVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.InterviewTranscript,
      GetModeratedStudyInterviewTranscriptError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.InterviewTranscript,
    GetModeratedStudyInterviewTranscriptError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_studies/{moderated_study_id}/bookings/{moderated_study_booking_id}/recordings/{recording_id}/transcript",
      operationId: "getModeratedStudyInterviewTranscript",
      variables,
    }),
    () =>
      fetchGetModeratedStudyInterviewTranscript({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CreateModeratedStudyInterviewTranscriptPathParams = {
  /**
   * ID of the moderated study
   */
  moderatedStudyId: string;
  /**
   * ID of the booking
   */
  moderatedStudyBookingId: string;
  /**
   * ID of the recording
   */
  recordingId: string;
};

export type CreateModeratedStudyInterviewTranscriptError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type CreateModeratedStudyInterviewTranscriptRequestBody = {
  language_code: string | null;
};

export type CreateModeratedStudyInterviewTranscriptVariables = {
  body: CreateModeratedStudyInterviewTranscriptRequestBody;
  pathParams: CreateModeratedStudyInterviewTranscriptPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Request an automated transcription
 */
export const fetchCreateModeratedStudyInterviewTranscript = (
  variables: CreateModeratedStudyInterviewTranscriptVariables,
) =>
  usabilityhubFetch<
    Schemas.InterviewTranscript,
    CreateModeratedStudyInterviewTranscriptError,
    CreateModeratedStudyInterviewTranscriptRequestBody,
    {},
    {},
    CreateModeratedStudyInterviewTranscriptPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings/{moderatedStudyBookingId}/recordings/{recordingId}/transcript",
    method: "post",
    ...variables,
  });

/**
 * Request an automated transcription
 */
export const useCreateModeratedStudyInterviewTranscript = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.InterviewTranscript,
      CreateModeratedStudyInterviewTranscriptError,
      CreateModeratedStudyInterviewTranscriptVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.InterviewTranscript,
    CreateModeratedStudyInterviewTranscriptError,
    CreateModeratedStudyInterviewTranscriptVariables
  >(
    (variables: CreateModeratedStudyInterviewTranscriptVariables) =>
      fetchCreateModeratedStudyInterviewTranscript({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type UpdateModeratedStudyInterviewTranscriptPathParams = {
  /**
   * ID of the moderated study
   */
  moderatedStudyId: string;
  /**
   * ID of the booking
   */
  moderatedStudyBookingId: string;
  /**
   * ID of the recording
   */
  recordingId: string;
};

export type UpdateModeratedStudyInterviewTranscriptError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UpdateModeratedStudyInterviewTranscriptRequestBody = {
  speaker_names?: string[];
};

export type UpdateModeratedStudyInterviewTranscriptVariables = {
  body?: UpdateModeratedStudyInterviewTranscriptRequestBody;
  pathParams: UpdateModeratedStudyInterviewTranscriptPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update a transcript
 */
export const fetchUpdateModeratedStudyInterviewTranscript = (
  variables: UpdateModeratedStudyInterviewTranscriptVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdateModeratedStudyInterviewTranscriptError,
    UpdateModeratedStudyInterviewTranscriptRequestBody,
    {},
    {},
    UpdateModeratedStudyInterviewTranscriptPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings/{moderatedStudyBookingId}/recordings/{recordingId}/transcript",
    method: "put",
    ...variables,
  });

/**
 * Update a transcript
 */
export const useUpdateModeratedStudyInterviewTranscript = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdateModeratedStudyInterviewTranscriptError,
      UpdateModeratedStudyInterviewTranscriptVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdateModeratedStudyInterviewTranscriptError,
    UpdateModeratedStudyInterviewTranscriptVariables
  >(
    (variables: UpdateModeratedStudyInterviewTranscriptVariables) =>
      fetchUpdateModeratedStudyInterviewTranscript({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type DeleteModeratedStudyInterviewTranscriptPathParams = {
  /**
   * ID of the moderated study
   */
  moderatedStudyId: string;
  /**
   * ID of the booking
   */
  moderatedStudyBookingId: string;
  /**
   * ID of the recording
   */
  recordingId: string;
};

export type DeleteModeratedStudyInterviewTranscriptError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type DeleteModeratedStudyInterviewTranscriptVariables = {
  pathParams: DeleteModeratedStudyInterviewTranscriptPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Delete an interview transcript from a Moderated Study Booking
 */
export const fetchDeleteModeratedStudyInterviewTranscript = (
  variables: DeleteModeratedStudyInterviewTranscriptVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    DeleteModeratedStudyInterviewTranscriptError,
    undefined,
    {},
    {},
    DeleteModeratedStudyInterviewTranscriptPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings/{moderatedStudyBookingId}/recordings/{recordingId}/transcript",
    method: "delete",
    ...variables,
  });

/**
 * Delete an interview transcript from a Moderated Study Booking
 */
export const useDeleteModeratedStudyInterviewTranscript = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeleteModeratedStudyInterviewTranscriptError,
      DeleteModeratedStudyInterviewTranscriptVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeleteModeratedStudyInterviewTranscriptError,
    DeleteModeratedStudyInterviewTranscriptVariables
  >(
    (variables: DeleteModeratedStudyInterviewTranscriptVariables) =>
      fetchDeleteModeratedStudyInterviewTranscript({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type UploadModeratedStudyInterviewTranscriptPathParams = {
  /**
   * ID of the moderated study
   */
  moderatedStudyId: string;
  /**
   * ID of the booking
   */
  moderatedStudyBookingId: string;
  /**
   * ID of the recording
   */
  recordingId: string;
};

export type UploadModeratedStudyInterviewTranscriptError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UploadModeratedStudyInterviewTranscriptRequestBody = {
  text: string;
};

export type UploadModeratedStudyInterviewTranscriptVariables = {
  body: UploadModeratedStudyInterviewTranscriptRequestBody;
  pathParams: UploadModeratedStudyInterviewTranscriptPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Upload a transcript
 */
export const fetchUploadModeratedStudyInterviewTranscript = (
  variables: UploadModeratedStudyInterviewTranscriptVariables,
) =>
  usabilityhubFetch<
    Schemas.InterviewTranscript,
    UploadModeratedStudyInterviewTranscriptError,
    UploadModeratedStudyInterviewTranscriptRequestBody,
    {},
    {},
    UploadModeratedStudyInterviewTranscriptPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings/{moderatedStudyBookingId}/recordings/{recordingId}/transcript/upload",
    method: "post",
    ...variables,
  });

/**
 * Upload a transcript
 */
export const useUploadModeratedStudyInterviewTranscript = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.InterviewTranscript,
      UploadModeratedStudyInterviewTranscriptError,
      UploadModeratedStudyInterviewTranscriptVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.InterviewTranscript,
    UploadModeratedStudyInterviewTranscriptError,
    UploadModeratedStudyInterviewTranscriptVariables
  >(
    (variables: UploadModeratedStudyInterviewTranscriptVariables) =>
      fetchUploadModeratedStudyInterviewTranscript({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type UpdateScreenerRequiredPathParams = {
  /**
   * ID of the moderated study application to edit
   */
  moderatedStudyApplicationId: string;
};

export type UpdateScreenerRequiredError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type UpdateScreenerRequiredVariables = {
  pathParams: UpdateScreenerRequiredPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Disable screener required when screener questions are deleted
 */
export const fetchUpdateScreenerRequired = (
  variables: UpdateScreenerRequiredVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdateScreenerRequiredError,
    undefined,
    {},
    {},
    UpdateScreenerRequiredPathParams
  >({
    url: "/api/moderated_study_applications/{moderatedStudyApplicationId}/update_screener_required",
    method: "post",
    ...variables,
  });

/**
 * Disable screener required when screener questions are deleted
 */
export const useUpdateScreenerRequired = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdateScreenerRequiredError,
      UpdateScreenerRequiredVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdateScreenerRequiredError,
    UpdateScreenerRequiredVariables
  >(
    (variables: UpdateScreenerRequiredVariables) =>
      fetchUpdateScreenerRequired({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AcceptAgreementPathParams = {
  moderatedStudyApplicationId: string;
};

export type AcceptAgreementError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AcceptAgreementRequestBody = {
  full_name: string;
};

export type AcceptAgreementVariables = {
  body: AcceptAgreementRequestBody;
  pathParams: AcceptAgreementPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Accept the agreement
 */
export const fetchAcceptAgreement = (variables: AcceptAgreementVariables) =>
  usabilityhubFetch<
    Responses.R204,
    AcceptAgreementError,
    AcceptAgreementRequestBody,
    {},
    {},
    AcceptAgreementPathParams
  >({
    url: "/api/moderated_study_applications/{moderatedStudyApplicationId}/accept_agreement",
    method: "post",
    ...variables,
  });

/**
 * Accept the agreement
 */
export const useAcceptAgreement = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AcceptAgreementError,
      AcceptAgreementVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AcceptAgreementError,
    AcceptAgreementVariables
  >(
    (variables: AcceptAgreementVariables) =>
      fetchAcceptAgreement({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListModeratedStudyBookingSlotsPathParams = {
  moderatedStudyApplicationId: string;
};

export type ListModeratedStudyBookingSlotsQueryParams = {
  /**
   * Which year to check for available slots
   */
  year: number;
  /**
   * Which month to check for available slots
   */
  month: number;
  /**
   * Which timezone to present available slots in
   */
  timezone: string;
};

export type ListModeratedStudyBookingSlotsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type ListModeratedStudyBookingSlotsResponse = {
  booking_slots: {
    /**
     * @format date-time
     */
    start_time: string;
  }[];
  earlier_data: boolean;
  later_data: boolean;
  /**
   * Indicates whether the moderated study has available booking slots or not.
   */
  has_available_booking_slots: boolean;
};

export type ListModeratedStudyBookingSlotsVariables = {
  pathParams: ListModeratedStudyBookingSlotsPathParams;
  queryParams: ListModeratedStudyBookingSlotsQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns available booking slots for a study so that candidates can select one to use when creating a booking.  One month of data will be returned at a time, with a 1 day buffer either side so the user can display a whole month in their local timezone.
 */
export const fetchListModeratedStudyBookingSlots = (
  variables: ListModeratedStudyBookingSlotsVariables,
) =>
  usabilityhubFetch<
    ListModeratedStudyBookingSlotsResponse,
    ListModeratedStudyBookingSlotsError,
    undefined,
    {},
    ListModeratedStudyBookingSlotsQueryParams,
    ListModeratedStudyBookingSlotsPathParams
  >({
    url: "/api/moderated_study_applications/{moderatedStudyApplicationId}/booking_slots",
    method: "get",
    ...variables,
  });

/**
 * Returns available booking slots for a study so that candidates can select one to use when creating a booking.  One month of data will be returned at a time, with a 1 day buffer either side so the user can display a whole month in their local timezone.
 */
export const useListModeratedStudyBookingSlots = <
  TData = ListModeratedStudyBookingSlotsResponse,
>(
  variables: ListModeratedStudyBookingSlotsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListModeratedStudyBookingSlotsResponse,
      ListModeratedStudyBookingSlotsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListModeratedStudyBookingSlotsResponse,
    ListModeratedStudyBookingSlotsError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_study_applications/{moderated_study_application_id}/booking_slots",
      operationId: "listModeratedStudyBookingSlots",
      variables,
    }),
    () =>
      fetchListModeratedStudyBookingSlots({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type TrackJoinButtonClickPathParams = {
  /**
   * ID of the moderated study application
   */
  moderatedStudyApplicationId: string;
  /**
   * ID of the moderated study booking
   */
  moderatedStudyBookingId: string;
};

export type TrackJoinButtonClickError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type TrackJoinButtonClickRequestBody = {
  missing_meeting_link: boolean;
};

export type TrackJoinButtonClickVariables = {
  body: TrackJoinButtonClickRequestBody;
  pathParams: TrackJoinButtonClickPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Track clicking the join call button
 */
export const fetchTrackJoinButtonClick = (
  variables: TrackJoinButtonClickVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    TrackJoinButtonClickError,
    TrackJoinButtonClickRequestBody,
    {},
    {},
    TrackJoinButtonClickPathParams
  >({
    url: "/api/moderated_study_applications/{moderatedStudyApplicationId}/moderated_study_bookings/{moderatedStudyBookingId}/join_button_click",
    method: "post",
    ...variables,
  });

/**
 * Track clicking the join call button
 */
export const useTrackJoinButtonClick = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      TrackJoinButtonClickError,
      TrackJoinButtonClickVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    TrackJoinButtonClickError,
    TrackJoinButtonClickVariables
  >(
    (variables: TrackJoinButtonClickVariables) =>
      fetchTrackJoinButtonClick({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type PreviewModeratedStudyBookingSlotsPathParams = {
  moderatedStudyId: string;
};

export type PreviewModeratedStudyBookingSlotsQueryParams = {
  /**
   * Which year to check for available slots
   */
  year: number;
  /**
   * Which month to check for available slots
   */
  month: number;
  /**
   * Which timezone to present available slots in
   */
  timezone: string;
};

export type PreviewModeratedStudyBookingSlotsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type PreviewModeratedStudyBookingSlotsResponse = {
  booking_slots: {
    /**
     * @format date-time
     */
    start_time: string;
  }[];
  earlier_data: boolean;
  later_data: boolean;
  /**
   * Indicates whether the moderated study has available booking slots or not.
   */
  has_available_booking_slots: boolean;
};

export type PreviewModeratedStudyBookingSlotsVariables = {
  pathParams: PreviewModeratedStudyBookingSlotsPathParams;
  queryParams: PreviewModeratedStudyBookingSlotsQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns preview of available booking slots for a study so that candidates can select one to use when creating a booking.  One month of data will be returned at a time, with a 1 day buffer either side so the user can display a whole month in their local timezone.
 */
export const fetchPreviewModeratedStudyBookingSlots = (
  variables: PreviewModeratedStudyBookingSlotsVariables,
) =>
  usabilityhubFetch<
    PreviewModeratedStudyBookingSlotsResponse,
    PreviewModeratedStudyBookingSlotsError,
    undefined,
    {},
    PreviewModeratedStudyBookingSlotsQueryParams,
    PreviewModeratedStudyBookingSlotsPathParams
  >({
    url: "/api/moderated_study_previews/{moderatedStudyId}/booking_slots",
    method: "get",
    ...variables,
  });

/**
 * Returns preview of available booking slots for a study so that candidates can select one to use when creating a booking.  One month of data will be returned at a time, with a 1 day buffer either side so the user can display a whole month in their local timezone.
 */
export const usePreviewModeratedStudyBookingSlots = <
  TData = PreviewModeratedStudyBookingSlotsResponse,
>(
  variables: PreviewModeratedStudyBookingSlotsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PreviewModeratedStudyBookingSlotsResponse,
      PreviewModeratedStudyBookingSlotsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    PreviewModeratedStudyBookingSlotsResponse,
    PreviewModeratedStudyBookingSlotsError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_study_previews/{moderated_study_id}/booking_slots",
      operationId: "previewModeratedStudyBookingSlots",
      variables,
    }),
    () =>
      fetchPreviewModeratedStudyBookingSlots({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdateProfileError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
>;

export type UpdateProfileResponse = {
  message: string;
};

export type UpdateProfileRequestBody = {
  name?: string;
  preferred_name?: string;
  job_role?: string;
  custom_job_role?: string;
  email?: string;
  email_general?: "true" | "false";
  email_newsletters_and_promotions?: "true" | "false";
  email_comment_notifications?: "true" | "false";
  email_product_updates?: "true" | "false";
  /**
   * @format binary
   */
  avatar?: Blob;
};

export type UpdateProfileVariables = {
  body?: UpdateProfileRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update the current user's profile
 */
export const fetchUpdateProfile = (variables: UpdateProfileVariables) =>
  usabilityhubFetch<
    UpdateProfileResponse,
    UpdateProfileError,
    UpdateProfileRequestBody,
    {},
    {},
    {}
  >({ url: "/api/profile", method: "patch", ...variables });

/**
 * Update the current user's profile
 */
export const useUpdateProfile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      UpdateProfileResponse,
      UpdateProfileError,
      UpdateProfileVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    UpdateProfileResponse,
    UpdateProfileError,
    UpdateProfileVariables
  >(
    (variables: UpdateProfileVariables) =>
      fetchUpdateProfile({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetNoticesError = Fetcher.ErrorWrapper<undefined>;

export type GetNoticesResponse = {
  user_notices: Schemas.Notice[];
};

export type GetNoticesVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Returns an array of all the user_dismissed_notices that have not yet been dismissed
 */
export const fetchGetNotices = (variables: GetNoticesVariables) =>
  usabilityhubFetch<GetNoticesResponse, GetNoticesError, undefined, {}, {}, {}>(
    { url: "/api/user_notices", method: "get", ...variables },
  );

/**
 * Returns an array of all the user_dismissed_notices that have not yet been dismissed
 */
export const useGetNotices = <TData = GetNoticesResponse,>(
  variables: GetNoticesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetNoticesResponse, GetNoticesError, TData>,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<GetNoticesResponse, GetNoticesError, TData>(
    queryKeyFn({
      path: "/api/user_notices",
      operationId: "getNotices",
      variables,
    }),
    () => fetchGetNotices({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type DeferNoticePathParams = {
  slug: Schemas.Notice;
};

export type DeferNoticeError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type DeferNoticeVariables = {
  pathParams: DeferNoticePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Mark a user notice as deferred for the current user. Notice will be active again after the defer period
 */
export const fetchDeferNotice = (variables: DeferNoticeVariables) =>
  usabilityhubFetch<
    Responses.R204,
    DeferNoticeError,
    undefined,
    {},
    {},
    DeferNoticePathParams
  >({ url: "/api/user_notices/{slug}/defer", method: "post", ...variables });

/**
 * Mark a user notice as deferred for the current user. Notice will be active again after the defer period
 */
export const useDeferNotice = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeferNoticeError,
      DeferNoticeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeferNoticeError,
    DeferNoticeVariables
  >(
    (variables: DeferNoticeVariables) =>
      fetchDeferNotice({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DismissNoticePathParams = {
  slug: Schemas.Notice;
};

export type DismissNoticeError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type DismissNoticeVariables = {
  pathParams: DismissNoticePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Mark a user notice as dismissed for the current user
 */
export const fetchDismissNotice = (variables: DismissNoticeVariables) =>
  usabilityhubFetch<
    Responses.R204,
    DismissNoticeError,
    undefined,
    {},
    {},
    DismissNoticePathParams
  >({ url: "/api/user_notices/{slug}/dismiss", method: "post", ...variables });

/**
 * Mark a user notice as dismissed for the current user
 */
export const useDismissNotice = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DismissNoticeError,
      DismissNoticeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DismissNoticeError,
    DismissNoticeVariables
  >(
    (variables: DismissNoticeVariables) =>
      fetchDismissNotice({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListSavedRecordingsQueryParams = {
  usability_test_id?: number;
};

export type ListSavedRecordingsError = Fetcher.ErrorWrapper<undefined>;

export type ListSavedRecordingsResponse = string[];

export type ListSavedRecordingsVariables = {
  queryParams?: ListSavedRecordingsQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * List all recording IDs of saved recordings for the current account
 */
export const fetchListSavedRecordings = (
  variables: ListSavedRecordingsVariables,
) =>
  usabilityhubFetch<
    ListSavedRecordingsResponse,
    ListSavedRecordingsError,
    undefined,
    {},
    ListSavedRecordingsQueryParams,
    {}
  >({ url: "/api/saved_recordings", method: "get", ...variables });

/**
 * List all recording IDs of saved recordings for the current account
 */
export const useListSavedRecordings = <TData = ListSavedRecordingsResponse,>(
  variables: ListSavedRecordingsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListSavedRecordingsResponse,
      ListSavedRecordingsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListSavedRecordingsResponse,
    ListSavedRecordingsError,
    TData
  >(
    queryKeyFn({
      path: "/api/saved_recordings",
      operationId: "listSavedRecordings",
      variables,
    }),
    () => fetchListSavedRecordings({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type SaveRecordingPathParams = {
  recordingId: string;
};

export type SaveRecordingError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type SaveRecordingVariables = {
  pathParams: SaveRecordingPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Save a recording for the current account
 */
export const fetchSaveRecording = (variables: SaveRecordingVariables) =>
  usabilityhubFetch<
    Responses.R204,
    SaveRecordingError,
    undefined,
    {},
    {},
    SaveRecordingPathParams
  >({
    url: "/api/saved_recordings/{recordingId}",
    method: "post",
    ...variables,
  });

/**
 * Save a recording for the current account
 */
export const useSaveRecording = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      SaveRecordingError,
      SaveRecordingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    SaveRecordingError,
    SaveRecordingVariables
  >(
    (variables: SaveRecordingVariables) =>
      fetchSaveRecording({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UnsaveRecordingPathParams = {
  recordingId: string;
};

export type UnsaveRecordingError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UnsaveRecordingVariables = {
  pathParams: UnsaveRecordingPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Unsave a recording for the current account
 */
export const fetchUnsaveRecording = (variables: UnsaveRecordingVariables) =>
  usabilityhubFetch<
    Responses.R204,
    UnsaveRecordingError,
    undefined,
    {},
    {},
    UnsaveRecordingPathParams
  >({
    url: "/api/saved_recordings/{recordingId}",
    method: "delete",
    ...variables,
  });

/**
 * Unsave a recording for the current account
 */
export const useUnsaveRecording = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UnsaveRecordingError,
      UnsaveRecordingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UnsaveRecordingError,
    UnsaveRecordingVariables
  >(
    (variables: UnsaveRecordingVariables) =>
      fetchUnsaveRecording({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListRecordingViewsQueryParams = {
  usability_test_id?: number;
};

export type ListRecordingViewsError = Fetcher.ErrorWrapper<undefined>;

export type ListRecordingViewsResponse = string[];

export type ListRecordingViewsVariables = {
  queryParams?: ListRecordingViewsQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * List all recording IDs of recordings that have been viewed by the current user
 */
export const fetchListRecordingViews = (
  variables: ListRecordingViewsVariables,
) =>
  usabilityhubFetch<
    ListRecordingViewsResponse,
    ListRecordingViewsError,
    undefined,
    {},
    ListRecordingViewsQueryParams,
    {}
  >({ url: "/api/recording_views", method: "get", ...variables });

/**
 * List all recording IDs of recordings that have been viewed by the current user
 */
export const useListRecordingViews = <TData = ListRecordingViewsResponse,>(
  variables: ListRecordingViewsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListRecordingViewsResponse,
      ListRecordingViewsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListRecordingViewsResponse,
    ListRecordingViewsError,
    TData
  >(
    queryKeyFn({
      path: "/api/recording_views",
      operationId: "listRecordingViews",
      variables,
    }),
    () => fetchListRecordingViews({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type MarkRecordingAsViewedPathParams = {
  recordingId: string;
};

export type MarkRecordingAsViewedError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type MarkRecordingAsViewedVariables = {
  pathParams: MarkRecordingAsViewedPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Mark a recording as viewed for the current user
 */
export const fetchMarkRecordingAsViewed = (
  variables: MarkRecordingAsViewedVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    MarkRecordingAsViewedError,
    undefined,
    {},
    {},
    MarkRecordingAsViewedPathParams
  >({
    url: "/api/recording_views/{recordingId}",
    method: "post",
    ...variables,
  });

/**
 * Mark a recording as viewed for the current user
 */
export const useMarkRecordingAsViewed = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      MarkRecordingAsViewedError,
      MarkRecordingAsViewedVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    MarkRecordingAsViewedError,
    MarkRecordingAsViewedVariables
  >(
    (variables: MarkRecordingAsViewedVariables) =>
      fetchMarkRecordingAsViewed({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type MarkRecordingAsUnviewedPathParams = {
  recordingId: string;
};

export type MarkRecordingAsUnviewedError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type MarkRecordingAsUnviewedVariables = {
  pathParams: MarkRecordingAsUnviewedPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Mark a recording as unviewed for the current user. Not currently in use!
 */
export const fetchMarkRecordingAsUnviewed = (
  variables: MarkRecordingAsUnviewedVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    MarkRecordingAsUnviewedError,
    undefined,
    {},
    {},
    MarkRecordingAsUnviewedPathParams
  >({
    url: "/api/recording_views/{recordingId}",
    method: "delete",
    ...variables,
  });

/**
 * Mark a recording as unviewed for the current user. Not currently in use!
 */
export const useMarkRecordingAsUnviewed = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      MarkRecordingAsUnviewedError,
      MarkRecordingAsUnviewedVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    MarkRecordingAsUnviewedError,
    MarkRecordingAsUnviewedVariables
  >(
    (variables: MarkRecordingAsUnviewedVariables) =>
      fetchMarkRecordingAsUnviewed({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CreateScreenshotError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        code: "validation_error";
      };
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type CreateScreenshotRequestBody = {
  screenshot: {
    direct_upload_id: string;
    /**
     * Must be null for audio, non-null for images/video
     */
    height: number | null;
    /**
     * Must be null for audio, non-null for images/video
     */
    width: number | null;
    name: string | null;
    media_type: "image" | "video" | "audio";
    /**
     * Must be null for images, non-null for video/audio
     */
    duration_ms: number | null;
    /**
     * Must be null for non-images, non-null for images
     */
    display_scale: number | null;
  };
};

export type CreateScreenshotVariables = {
  body: CreateScreenshotRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create a new screenshot with the provided attributes
 */
export const fetchCreateScreenshot = (variables: CreateScreenshotVariables) =>
  usabilityhubFetch<
    Schemas.ImageScreenshot | Schemas.VideoScreenshot | Schemas.AudioScreenshot,
    CreateScreenshotError,
    CreateScreenshotRequestBody,
    {},
    {},
    {}
  >({ url: "/api/screenshots", method: "post", ...variables });

/**
 * Create a new screenshot with the provided attributes
 */
export const useCreateScreenshot = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      | Schemas.ImageScreenshot
      | Schemas.VideoScreenshot
      | Schemas.AudioScreenshot,
      CreateScreenshotError,
      CreateScreenshotVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.ImageScreenshot | Schemas.VideoScreenshot | Schemas.AudioScreenshot,
    CreateScreenshotError,
    CreateScreenshotVariables
  >(
    (variables: CreateScreenshotVariables) =>
      fetchCreateScreenshot({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetScreenshotPathParams = {
  id: number;
};

export type GetScreenshotError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type GetScreenshotVariables = {
  pathParams: GetScreenshotPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Retrieve a specific screenshot by ID
 */
export const fetchGetScreenshot = (variables: GetScreenshotVariables) =>
  usabilityhubFetch<
    Schemas.ImageScreenshot | Schemas.VideoScreenshot | Schemas.AudioScreenshot,
    GetScreenshotError,
    undefined,
    {},
    {},
    GetScreenshotPathParams
  >({ url: "/api/screenshots/{id}", method: "get", ...variables });

/**
 * Retrieve a specific screenshot by ID
 */
export const useGetScreenshot = <
  TData =
    | Schemas.ImageScreenshot
    | Schemas.VideoScreenshot
    | Schemas.AudioScreenshot,
>(
  variables: GetScreenshotVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      | Schemas.ImageScreenshot
      | Schemas.VideoScreenshot
      | Schemas.AudioScreenshot,
      GetScreenshotError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.ImageScreenshot | Schemas.VideoScreenshot | Schemas.AudioScreenshot,
    GetScreenshotError,
    TData
  >(
    queryKeyFn({
      path: "/api/screenshots/{id}",
      operationId: "getScreenshot",
      variables,
    }),
    () => fetchGetScreenshot({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdateScreenshotPathParams = {
  id: number;
};

export type UpdateScreenshotError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        code: "validation_error";
      };
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UpdateScreenshotRequestBody = {
  name: string;
  display_scale: number;
};

export type UpdateScreenshotVariables = {
  body: UpdateScreenshotRequestBody;
  pathParams: UpdateScreenshotPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update a screenshot's name and display scale
 */
export const fetchUpdateScreenshot = (variables: UpdateScreenshotVariables) =>
  usabilityhubFetch<
    Schemas.ImageScreenshot | Schemas.VideoScreenshot | Schemas.AudioScreenshot,
    UpdateScreenshotError,
    UpdateScreenshotRequestBody,
    {},
    {},
    UpdateScreenshotPathParams
  >({ url: "/api/screenshots/{id}", method: "patch", ...variables });

/**
 * Update a screenshot's name and display scale
 */
export const useUpdateScreenshot = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      | Schemas.ImageScreenshot
      | Schemas.VideoScreenshot
      | Schemas.AudioScreenshot,
      UpdateScreenshotError,
      UpdateScreenshotVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.ImageScreenshot | Schemas.VideoScreenshot | Schemas.AudioScreenshot,
    UpdateScreenshotError,
    UpdateScreenshotVariables
  >(
    (variables: UpdateScreenshotVariables) =>
      fetchUpdateScreenshot({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListSpacesError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type ListSpacesResponse = {
  spaces: Schemas.Space[];
};

export type ListSpacesVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Return all spaces for the current account
 */
export const fetchListSpaces = (variables: ListSpacesVariables) =>
  usabilityhubFetch<ListSpacesResponse, ListSpacesError, undefined, {}, {}, {}>(
    { url: "/api/spaces", method: "get", ...variables },
  );

/**
 * Return all spaces for the current account
 */
export const useListSpaces = <TData = ListSpacesResponse,>(
  variables: ListSpacesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<ListSpacesResponse, ListSpacesError, TData>,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<ListSpacesResponse, ListSpacesError, TData>(
    queryKeyFn({ path: "/api/spaces", operationId: "listSpaces", variables }),
    () => fetchListSpaces({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CreateSpaceError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        code: "validation_failed" | "invalid_space_type" | "too_many_spaces";
      };
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type CreateSpaceRequestBody = {
  name: string;
  type: "open" | "closed" | "everyone";
  space_user_ids: number[];
};

export type CreateSpaceVariables = {
  body: CreateSpaceRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create a new space
 */
export const fetchCreateSpace = (variables: CreateSpaceVariables) =>
  usabilityhubFetch<
    Responses.R204,
    CreateSpaceError,
    CreateSpaceRequestBody,
    {},
    {},
    {}
  >({ url: "/api/spaces", method: "post", ...variables });

/**
 * Create a new space
 */
export const useCreateSpace = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      CreateSpaceError,
      CreateSpaceVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    CreateSpaceError,
    CreateSpaceVariables
  >(
    (variables: CreateSpaceVariables) =>
      fetchCreateSpace({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetSpacePathParams = {
  spaceId: string;
};

export type GetSpaceError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type GetSpaceVariables = {
  pathParams: GetSpacePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get a space by ID
 */
export const fetchGetSpace = (variables: GetSpaceVariables) =>
  usabilityhubFetch<
    Schemas.Space,
    GetSpaceError,
    undefined,
    {},
    {},
    GetSpacePathParams
  >({ url: "/api/spaces/{spaceId}", method: "get", ...variables });

/**
 * Get a space by ID
 */
export const useGetSpace = <TData = Schemas.Space,>(
  variables: GetSpaceVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Space, GetSpaceError, TData>,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<Schemas.Space, GetSpaceError, TData>(
    queryKeyFn({
      path: "/api/spaces/{space_id}",
      operationId: "getSpace",
      variables,
    }),
    () => fetchGetSpace({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdateSpacePathParams = {
  spaceId: string;
};

export type UpdateSpaceError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        code: "invalid";
      };
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UpdateSpaceRequestBody = {
  type: "open" | "closed" | "everyone";
  name: string;
};

export type UpdateSpaceVariables = {
  body: UpdateSpaceRequestBody;
  pathParams: UpdateSpacePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update a space
 */
export const fetchUpdateSpace = (variables: UpdateSpaceVariables) =>
  usabilityhubFetch<
    Responses.R204,
    UpdateSpaceError,
    UpdateSpaceRequestBody,
    {},
    {},
    UpdateSpacePathParams
  >({ url: "/api/spaces/{spaceId}", method: "put", ...variables });

/**
 * Update a space
 */
export const useUpdateSpace = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdateSpaceError,
      UpdateSpaceVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdateSpaceError,
    UpdateSpaceVariables
  >(
    (variables: UpdateSpaceVariables) =>
      fetchUpdateSpace({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DeleteSpacePathParams = {
  spaceId: string;
};

export type DeleteSpaceError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type DeleteSpaceVariables = {
  pathParams: DeleteSpacePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Delete a space
 */
export const fetchDeleteSpace = (variables: DeleteSpaceVariables) =>
  usabilityhubFetch<
    Responses.R204,
    DeleteSpaceError,
    undefined,
    {},
    {},
    DeleteSpacePathParams
  >({ url: "/api/spaces/{spaceId}", method: "delete", ...variables });

/**
 * Delete a space
 */
export const useDeleteSpace = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeleteSpaceError,
      DeleteSpaceVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeleteSpaceError,
    DeleteSpaceVariables
  >(
    (variables: DeleteSpaceVariables) =>
      fetchDeleteSpace({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type JoinSpacePathParams = {
  spaceId: string;
};

export type JoinSpaceError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        code: "space_cannot_be_joined";
      };
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type JoinSpaceVariables = {
  pathParams: JoinSpacePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Join a space
 */
export const fetchJoinSpace = (variables: JoinSpaceVariables) =>
  usabilityhubFetch<
    Responses.R204,
    JoinSpaceError,
    undefined,
    {},
    {},
    JoinSpacePathParams
  >({ url: "/api/spaces/{spaceId}/join", method: "post", ...variables });

/**
 * Join a space
 */
export const useJoinSpace = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      JoinSpaceError,
      JoinSpaceVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    JoinSpaceError,
    JoinSpaceVariables
  >(
    (variables: JoinSpaceVariables) =>
      fetchJoinSpace({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type LeaveSpacePathParams = {
  spaceId: string;
};

export type LeaveSpaceError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        code: "space_cannot_be_left";
      };
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type LeaveSpaceVariables = {
  pathParams: LeaveSpacePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Leave a space
 */
export const fetchLeaveSpace = (variables: LeaveSpaceVariables) =>
  usabilityhubFetch<
    Responses.R204,
    LeaveSpaceError,
    undefined,
    {},
    {},
    LeaveSpacePathParams
  >({ url: "/api/spaces/{spaceId}/leave", method: "post", ...variables });

/**
 * Leave a space
 */
export const useLeaveSpace = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      LeaveSpaceError,
      LeaveSpaceVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    LeaveSpaceError,
    LeaveSpaceVariables
  >(
    (variables: LeaveSpaceVariables) =>
      fetchLeaveSpace({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AddSpaceMemberPathParams = {
  spaceId: string;
};

export type AddSpaceMemberError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AddSpaceMemberRequestBody = {
  user_id: number;
};

export type AddSpaceMemberVariables = {
  body: AddSpaceMemberRequestBody;
  pathParams: AddSpaceMemberPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Add a member to a space
 */
export const fetchAddSpaceMember = (variables: AddSpaceMemberVariables) =>
  usabilityhubFetch<
    Responses.R204,
    AddSpaceMemberError,
    AddSpaceMemberRequestBody,
    {},
    {},
    AddSpaceMemberPathParams
  >({ url: "/api/spaces/{spaceId}/members", method: "post", ...variables });

/**
 * Add a member to a space
 */
export const useAddSpaceMember = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AddSpaceMemberError,
      AddSpaceMemberVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AddSpaceMemberError,
    AddSpaceMemberVariables
  >(
    (variables: AddSpaceMemberVariables) =>
      fetchAddSpaceMember({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type RemoveSpaceMemberPathParams = {
  spaceId: string;
  userId: number;
};

export type RemoveSpaceMemberError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type RemoveSpaceMemberVariables = {
  pathParams: RemoveSpaceMemberPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Remove a member from a space
 */
export const fetchRemoveSpaceMember = (variables: RemoveSpaceMemberVariables) =>
  usabilityhubFetch<
    Responses.R204,
    RemoveSpaceMemberError,
    undefined,
    {},
    {},
    RemoveSpaceMemberPathParams
  >({
    url: "/api/spaces/{spaceId}/members/{userId}",
    method: "delete",
    ...variables,
  });

/**
 * Remove a member from a space
 */
export const useRemoveSpaceMember = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      RemoveSpaceMemberError,
      RemoveSpaceMemberVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    RemoveSpaceMemberError,
    RemoveSpaceMemberVariables
  >(
    (variables: RemoveSpaceMemberVariables) =>
      fetchRemoveSpaceMember({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CreateMultipartUploadError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.R403;
}>;

export type CreateMultipartUploadResponse = {
  key: string;
  upload_id: string;
};

export type CreateMultipartUploadVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Create a new multipart upload
 */
export const fetchCreateMultipartUpload = (
  variables: CreateMultipartUploadVariables,
) =>
  usabilityhubFetch<
    CreateMultipartUploadResponse,
    CreateMultipartUploadError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/storage/multipart", method: "post", ...variables });

/**
 * Create a new multipart upload
 */
export const useCreateMultipartUpload = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CreateMultipartUploadResponse,
      CreateMultipartUploadError,
      CreateMultipartUploadVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CreateMultipartUploadResponse,
    CreateMultipartUploadError,
    CreateMultipartUploadVariables
  >(
    (variables: CreateMultipartUploadVariables) =>
      fetchCreateMultipartUpload({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListPartsPathParams = {
  /**
   * Unique identifier for the object being uploaded
   */
  key: string;
  /**
   * Unique identifier for the multipart upload
   */
  uploadId: string;
};

export type ListPartsError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.R403;
}>;

export type ListPartsResponse = {
  part_number: number;
  size: number;
  etag: string;
}[];

export type ListPartsVariables = {
  pathParams: ListPartsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * List the parts in a multipart upload
 */
export const fetchListParts = (variables: ListPartsVariables) =>
  usabilityhubFetch<
    ListPartsResponse,
    ListPartsError,
    undefined,
    {},
    {},
    ListPartsPathParams
  >({
    url: "/api/storage/multipart/{key}/{uploadId}",
    method: "get",
    ...variables,
  });

/**
 * List the parts in a multipart upload
 */
export const useListParts = <TData = ListPartsResponse,>(
  variables: ListPartsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<ListPartsResponse, ListPartsError, TData>,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<ListPartsResponse, ListPartsError, TData>(
    queryKeyFn({
      path: "/api/storage/multipart/{key}/{upload_id}",
      operationId: "listParts",
      variables,
    }),
    () => fetchListParts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CompleteMultipartUploadPathParams = {
  /**
   * Unique identifier for the object being uploaded
   */
  key: string;
  /**
   * Unique identifier for the multipart upload
   */
  uploadId: string;
};

export type CompleteMultipartUploadError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.R403;
}>;

export type CompleteMultipartUploadResponse = {
  /**
   * @format uri
   */
  location: string;
};

export type CompleteMultipartUploadRequestBody = {
  parts: {
    part_number: number;
    etag: string;
  }[];
};

export type CompleteMultipartUploadVariables = {
  body: CompleteMultipartUploadRequestBody;
  pathParams: CompleteMultipartUploadPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Complete a multipart upload
 */
export const fetchCompleteMultipartUpload = (
  variables: CompleteMultipartUploadVariables,
) =>
  usabilityhubFetch<
    CompleteMultipartUploadResponse,
    CompleteMultipartUploadError,
    CompleteMultipartUploadRequestBody,
    {},
    {},
    CompleteMultipartUploadPathParams
  >({
    url: "/api/storage/multipart/{key}/{uploadId}",
    method: "post",
    ...variables,
  });

/**
 * Complete a multipart upload
 */
export const useCompleteMultipartUpload = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CompleteMultipartUploadResponse,
      CompleteMultipartUploadError,
      CompleteMultipartUploadVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CompleteMultipartUploadResponse,
    CompleteMultipartUploadError,
    CompleteMultipartUploadVariables
  >(
    (variables: CompleteMultipartUploadVariables) =>
      fetchCompleteMultipartUpload({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AbortMultipartUploadPathParams = {
  /**
   * Unique identifier for the object being uploaded
   */
  key: string;
  /**
   * Unique identifier for the multipart upload
   */
  uploadId: string;
};

export type AbortMultipartUploadError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.R403;
}>;

export type AbortMultipartUploadVariables = {
  pathParams: AbortMultipartUploadPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Abort a multipart upload
 */
export const fetchAbortMultipartUpload = (
  variables: AbortMultipartUploadVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    AbortMultipartUploadError,
    undefined,
    {},
    {},
    AbortMultipartUploadPathParams
  >({
    url: "/api/storage/multipart/{key}/{uploadId}",
    method: "delete",
    ...variables,
  });

/**
 * Abort a multipart upload
 */
export const useAbortMultipartUpload = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AbortMultipartUploadError,
      AbortMultipartUploadVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AbortMultipartUploadError,
    AbortMultipartUploadVariables
  >(
    (variables: AbortMultipartUploadVariables) =>
      fetchAbortMultipartUpload({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type SignPartPathParams = {
  /**
   * Unique identifier for the object being uploaded
   */
  key: string;
  /**
   * Unique identifier for the multipart upload
   */
  uploadId: string;
  /**
   * The part of a multipart upload to sign
   */
  partNumber: number;
};

export type SignPartError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.R403;
}>;

export type SignPartResponse = {
  /**
   * @format uri
   */
  url: string;
};

export type SignPartVariables = {
  pathParams: SignPartPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create a signed URL for part of a multipart upload
 */
export const fetchSignPart = (variables: SignPartVariables) =>
  usabilityhubFetch<
    SignPartResponse,
    SignPartError,
    undefined,
    {},
    {},
    SignPartPathParams
  >({
    url: "/api/storage/multipart/{key}/{uploadId}/{partNumber}",
    method: "post",
    ...variables,
  });

/**
 * Create a signed URL for part of a multipart upload
 */
export const useSignPart = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      SignPartResponse,
      SignPartError,
      SignPartVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    SignPartResponse,
    SignPartError,
    SignPartVariables
  >(
    (variables: SignPartVariables) =>
      fetchSignPart({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type PostPresignedConfigError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type PostPresignedConfigResponse = {
  /**
   * @format uri
   */
  url: string;
  fields: Record<string, any>;
};

export type PostPresignedConfigVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Generate config for a short lived, pre-signed URL to upload a file
 */
export const fetchPostPresignedConfig = (
  variables: PostPresignedConfigVariables,
) =>
  usabilityhubFetch<
    PostPresignedConfigResponse,
    PostPresignedConfigError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/storage/presigned_config", method: "post", ...variables });

/**
 * Generate config for a short lived, pre-signed URL to upload a file
 */
export const usePostPresignedConfig = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostPresignedConfigResponse,
      PostPresignedConfigError,
      PostPresignedConfigVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    PostPresignedConfigResponse,
    PostPresignedConfigError,
    PostPresignedConfigVariables
  >(
    (variables: PostPresignedConfigVariables) =>
      fetchPostPresignedConfig({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type PostStorageRecordingError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.R403;
}>;

export type PostStorageRecordingResponse = {
  id: string;
} & {
  [key: string]: any;
};

export type PostStorageRecordingVariables = {
  body?: Record<string, any>;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Dev and test endpoint for direct uploads
 */
export const fetchPostStorageRecording = (
  variables: PostStorageRecordingVariables,
) =>
  usabilityhubFetch<
    PostStorageRecordingResponse,
    PostStorageRecordingError,
    Record<string, any>,
    {},
    {},
    {}
  >({ url: "/api/storage/recording", method: "post", ...variables });

/**
 * Dev and test endpoint for direct uploads
 */
export const usePostStorageRecording = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostStorageRecordingResponse,
      PostStorageRecordingError,
      PostStorageRecordingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    PostStorageRecordingResponse,
    PostStorageRecordingError,
    PostStorageRecordingVariables
  >(
    (variables: PostStorageRecordingVariables) =>
      fetchPostStorageRecording({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListStudiesQueryParams = {
  /**
   * Filter to a specific study type. If not provided, a mixed list of all types will be returned
   */
  study_type?: "usability_test" | "moderated_study";
  /**
   * Filter to studies within a specific space
   */
  space_id?: string;
  /**
   * Filter to studies within a specific project
   */
  project_id?: string;
  /**
   * Filter to studies that are archived or not. Deafult is false
   */
  archived?: boolean;
  /**
   * Study attribute to sort by. Default is updated_at
   */
  sort_by?: "created_at" | "updated_at" | "name";
  /**
   * Direction of the sort. Default is desc
   */
  sort_direction?: "asc" | "desc";
  /**
   * Pass the value of the previous call's next_page to retrieve further pages
   */
  cursor?: string;
};

export type ListStudiesError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type ListStudiesResponse = {
  studies: Schemas.Study[];
  counts: {
    total: number;
    usability_test: number;
    moderated_study: number;
  };
  next_page: string | null;
};

export type ListStudiesVariables = {
  queryParams?: ListStudiesQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns basic information about recent studies (either usability tests or interviews) for the account
 */
export const fetchListStudies = (variables: ListStudiesVariables) =>
  usabilityhubFetch<
    ListStudiesResponse,
    ListStudiesError,
    undefined,
    {},
    ListStudiesQueryParams,
    {}
  >({ url: "/api/studies", method: "get", ...variables });

/**
 * Returns basic information about recent studies (either usability tests or interviews) for the account
 */
export const useListStudies = <TData = ListStudiesResponse,>(
  variables: ListStudiesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<ListStudiesResponse, ListStudiesError, TData>,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<ListStudiesResponse, ListStudiesError, TData>(
    queryKeyFn({ path: "/api/studies", operationId: "listStudies", variables }),
    () => fetchListStudies({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type DeleteStudyPathParams = {
  studyId: string;
};

export type DeleteStudyError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type DeleteStudyResponse = {
  refund_point_count: number;
};

export type DeleteStudyVariables = {
  pathParams: DeleteStudyPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Delete a study
 */
export const fetchDeleteStudy = (variables: DeleteStudyVariables) =>
  usabilityhubFetch<
    DeleteStudyResponse,
    DeleteStudyError,
    undefined,
    {},
    {},
    DeleteStudyPathParams
  >({ url: "/api/studies/{studyId}", method: "delete", ...variables });

/**
 * Delete a study
 */
export const useDeleteStudy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteStudyResponse,
      DeleteStudyError,
      DeleteStudyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    DeleteStudyResponse,
    DeleteStudyError,
    DeleteStudyVariables
  >(
    (variables: DeleteStudyVariables) =>
      fetchDeleteStudy({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type BulkMoveStudiesError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type BulkMoveStudiesRequestBody = {
  project_id: string | null;
  space_id: string;
  study_ids: string[];
};

export type BulkMoveStudiesVariables = {
  body: BulkMoveStudiesRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Move studies to a new project or space
 */
export const fetchBulkMoveStudies = (variables: BulkMoveStudiesVariables) =>
  usabilityhubFetch<
    Responses.R204,
    BulkMoveStudiesError,
    BulkMoveStudiesRequestBody,
    {},
    {},
    {}
  >({ url: "/api/studies/bulk_move", method: "post", ...variables });

/**
 * Move studies to a new project or space
 */
export const useBulkMoveStudies = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      BulkMoveStudiesError,
      BulkMoveStudiesVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    BulkMoveStudiesError,
    BulkMoveStudiesVariables
  >(
    (variables: BulkMoveStudiesVariables) =>
      fetchBulkMoveStudies({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetDeletingUserInfoPathParams = {
  userId: number;
};

export type GetDeletingUserInfoError = Fetcher.ErrorWrapper<undefined>;

export type GetDeletingUserInfoResponse = {
  moderated_study_host_count: number;
  moderated_study_active_booking_host_count: number;
};

export type GetDeletingUserInfoVariables = {
  pathParams: GetDeletingUserInfoPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns info about the user to be deleted
 */
export const fetchGetDeletingUserInfo = (
  variables: GetDeletingUserInfoVariables,
) =>
  usabilityhubFetch<
    GetDeletingUserInfoResponse,
    GetDeletingUserInfoError,
    undefined,
    {},
    {},
    GetDeletingUserInfoPathParams
  >({
    url: "/api/team_members/deleting_user_info/{userId}",
    method: "get",
    ...variables,
  });

/**
 * Returns info about the user to be deleted
 */
export const useGetDeletingUserInfo = <TData = GetDeletingUserInfoResponse,>(
  variables: GetDeletingUserInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetDeletingUserInfoResponse,
      GetDeletingUserInfoError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetDeletingUserInfoResponse,
    GetDeletingUserInfoError,
    TData
  >(
    queryKeyFn({
      path: "/api/team_members/deleting_user_info/{user_id}",
      operationId: "getDeletingUserInfo",
      variables,
    }),
    () => fetchGetDeletingUserInfo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetTeamMembersSummaryError = Fetcher.ErrorWrapper<undefined>;

export type GetTeamMembersSummaryResponse = {
  collaborators_count: number;
};

export type GetTeamMembersSummaryVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Returns a summary of an account's team members
 */
export const fetchGetTeamMembersSummary = (
  variables: GetTeamMembersSummaryVariables,
) =>
  usabilityhubFetch<
    GetTeamMembersSummaryResponse,
    GetTeamMembersSummaryError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/team_members/summary", method: "get", ...variables });

/**
 * Returns a summary of an account's team members
 */
export const useGetTeamMembersSummary = <
  TData = GetTeamMembersSummaryResponse,
>(
  variables: GetTeamMembersSummaryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetTeamMembersSummaryResponse,
      GetTeamMembersSummaryError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetTeamMembersSummaryResponse,
    GetTeamMembersSummaryError,
    TData
  >(
    queryKeyFn({
      path: "/api/team_members/summary",
      operationId: "getTeamMembersSummary",
      variables,
    }),
    () => fetchGetTeamMembersSummary({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ListTeamMembersError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type ListTeamMembersResponse = Schemas.TeamMember[];

export type ListTeamMembersVariables = UsabilityhubContext["fetcherOptions"];

/**
 * List team members
 */
export const fetchListTeamMembers = (variables: ListTeamMembersVariables) =>
  usabilityhubFetch<
    ListTeamMembersResponse,
    ListTeamMembersError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/team_members", method: "get", ...variables });

/**
 * List team members
 */
export const useListTeamMembers = <TData = ListTeamMembersResponse,>(
  variables: ListTeamMembersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListTeamMembersResponse,
      ListTeamMembersError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListTeamMembersResponse,
    ListTeamMembersError,
    TData
  >(
    queryKeyFn({
      path: "/api/team_members",
      operationId: "listTeamMembers",
      variables,
    }),
    () => fetchListTeamMembers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type InviteTeamMemberError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
>;

export type InviteTeamMemberRequestBody = {
  name: string | null;
  email: string;
  role: "admin";
};

export type InviteTeamMemberVariables = {
  body: InviteTeamMemberRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Invite a team member to an account
 */
export const fetchInviteTeamMember = (variables: InviteTeamMemberVariables) =>
  usabilityhubFetch<
    Responses.R204,
    InviteTeamMemberError,
    InviteTeamMemberRequestBody,
    {},
    {},
    {}
  >({ url: "/api/team_members", method: "post", ...variables });

/**
 * Invite a team member to an account
 */
export const useInviteTeamMember = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      InviteTeamMemberError,
      InviteTeamMemberVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    InviteTeamMemberError,
    InviteTeamMemberVariables
  >(
    (variables: InviteTeamMemberVariables) =>
      fetchInviteTeamMember({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DenyUnarchiveRequestError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type DenyUnarchiveRequestRequestBody = {
  user_id: number;
};

export type DenyUnarchiveRequestVariables = {
  body: DenyUnarchiveRequestRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Deny a team member's unarchive request
 */
export const fetchDenyUnarchiveRequest = (
  variables: DenyUnarchiveRequestVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    DenyUnarchiveRequestError,
    DenyUnarchiveRequestRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/team_members/deny_unarchive_request",
    method: "post",
    ...variables,
  });

/**
 * Deny a team member's unarchive request
 */
export const useDenyUnarchiveRequest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DenyUnarchiveRequestError,
      DenyUnarchiveRequestVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DenyUnarchiveRequestError,
    DenyUnarchiveRequestVariables
  >(
    (variables: DenyUnarchiveRequestVariables) =>
      fetchDenyUnarchiveRequest({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type RequestUnarchiveError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type RequestUnarchiveVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Request team member unarchive
 */
export const fetchRequestUnarchive = (variables: RequestUnarchiveVariables) =>
  usabilityhubFetch<
    Responses.R204,
    RequestUnarchiveError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/team_members/request_unarchive",
    method: "post",
    ...variables,
  });

/**
 * Request team member unarchive
 */
export const useRequestUnarchive = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      RequestUnarchiveError,
      RequestUnarchiveVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    RequestUnarchiveError,
    RequestUnarchiveVariables
  >(
    (variables: RequestUnarchiveVariables) =>
      fetchRequestUnarchive({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UnarchiveRequestedError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type UnarchiveRequestedResponse = {
  requested: boolean;
};

export type UnarchiveRequestedVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Is an unarchive requested
 */
export const fetchUnarchiveRequested = (
  variables: UnarchiveRequestedVariables,
) =>
  usabilityhubFetch<
    UnarchiveRequestedResponse,
    UnarchiveRequestedError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/team_members/unarchive_requested",
    method: "get",
    ...variables,
  });

/**
 * Is an unarchive requested
 */
export const useUnarchiveRequested = <TData = UnarchiveRequestedResponse,>(
  variables: UnarchiveRequestedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UnarchiveRequestedResponse,
      UnarchiveRequestedError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    UnarchiveRequestedResponse,
    UnarchiveRequestedError,
    TData
  >(
    queryKeyFn({
      path: "/api/team_members/unarchive_requested",
      operationId: "unarchiveRequested",
      variables,
    }),
    () => fetchUnarchiveRequested({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type TeamMemberUnarchiveRequestsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type TeamMemberUnarchiveRequestsResponse = {
  team_member_unarchive_request_user_ids: number[];
};

export type TeamMemberUnarchiveRequestsVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Team member unarchive requests
 */
export const fetchTeamMemberUnarchiveRequests = (
  variables: TeamMemberUnarchiveRequestsVariables,
) =>
  usabilityhubFetch<
    TeamMemberUnarchiveRequestsResponse,
    TeamMemberUnarchiveRequestsError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/team_members/team_member_unarchive_requests",
    method: "get",
    ...variables,
  });

/**
 * Team member unarchive requests
 */
export const useTeamMemberUnarchiveRequests = <
  TData = TeamMemberUnarchiveRequestsResponse,
>(
  variables: TeamMemberUnarchiveRequestsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamMemberUnarchiveRequestsResponse,
      TeamMemberUnarchiveRequestsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    TeamMemberUnarchiveRequestsResponse,
    TeamMemberUnarchiveRequestsError,
    TData
  >(
    queryKeyFn({
      path: "/api/team_members/team_member_unarchive_requests",
      operationId: "teamMemberUnarchiveRequests",
      variables,
    }),
    () => fetchTeamMemberUnarchiveRequests({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ResendInvitationPathParams = {
  id: number;
};

export type ResendInvitationError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type ResendInvitationVariables = {
  pathParams: ResendInvitationPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Resend team member invitation
 */
export const fetchResendInvitation = (variables: ResendInvitationVariables) =>
  usabilityhubFetch<
    Responses.R204,
    ResendInvitationError,
    undefined,
    {},
    {},
    ResendInvitationPathParams
  >({
    url: "/api/team_members/{id}/resend_invitation",
    method: "post",
    ...variables,
  });

/**
 * Resend team member invitation
 */
export const useResendInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      ResendInvitationError,
      ResendInvitationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    ResendInvitationError,
    ResendInvitationVariables
  >(
    (variables: ResendInvitationVariables) =>
      fetchResendInvitation({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetTestResultsIndividualResponsePathParams = {
  usabilityTestUniqueId: string;
  responseId: number;
};

export type GetTestResultsIndividualResponseQueryParams = {
  private_id?: string;
};

export type GetTestResultsIndividualResponseError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type GetTestResultsIndividualResponseResponse = {
  id: number;
  usability_test_id: number;
  user_id: number | null;
  order_id: number | null;
  third_party_order_id: number | null;
  deleted_at: string | null;
  deletion_reason: Schemas.ParticipantDeletionReason;
  device_type: string | null;
  duration_ms: number | null;
  estimated_duration_ms: number | null;
  platform: string | null;
  review_status: number | null;
  automated_review_status: number | null;
  submitted_at: string | null;
  query_parameters: Record<string, any>;
  response_demographic_profile: {
    age: number | null;
    location: {
      type: "country" | "state" | "city";
      id: string;
    } | null;
    demographic_attribute_option_ids: number[];
  } | null;
  cint_respondent_id: string | null;
  screener_response: {
    questions: {
      type: "long_text" | "single_select" | "multi_select" | "short_text";
      text: string;
      answers: string[];
    }[];
  } | null;
  agreement: {
    name: string;
    url: string;
    /**
     * @format date-time
     */
    created_at: string;
  } | null;
};

export type GetTestResultsIndividualResponseVariables = {
  pathParams: GetTestResultsIndividualResponsePathParams;
  queryParams?: GetTestResultsIndividualResponseQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns information about an individual test response
 */
export const fetchGetTestResultsIndividualResponse = (
  variables: GetTestResultsIndividualResponseVariables,
) =>
  usabilityhubFetch<
    GetTestResultsIndividualResponseResponse,
    GetTestResultsIndividualResponseError,
    undefined,
    {},
    GetTestResultsIndividualResponseQueryParams,
    GetTestResultsIndividualResponsePathParams
  >({
    url: "/api/test_results/{usabilityTestUniqueId}/responses/{responseId}",
    method: "get",
    ...variables,
  });

/**
 * Returns information about an individual test response
 */
export const useGetTestResultsIndividualResponse = <
  TData = GetTestResultsIndividualResponseResponse,
>(
  variables: GetTestResultsIndividualResponseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetTestResultsIndividualResponseResponse,
      GetTestResultsIndividualResponseError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetTestResultsIndividualResponseResponse,
    GetTestResultsIndividualResponseError,
    TData
  >(
    queryKeyFn({
      path: "/api/test_results/{usability_test_unique_id}/responses/{response_id}",
      operationId: "getTestResultsIndividualResponse",
      variables,
    }),
    () =>
      fetchGetTestResultsIndividualResponse({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetApiTestResultsPathParams = {
  /**
   * ID of the usability test to retrieve results for
   */
  usabilityTestUniqueId: string;
};

export type GetApiTestResultsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type GetApiTestResultsResponse = {
  comments: Schemas.Comment[];
  customer_rating: number | null;
  status: string | null;
  status_tags: (
    | "Waiting for recruitment"
    | "Order active"
    | "Order complete"
    | "Link active"
    | "Link disabled"
  )[];
  question_summaries: {
    usability_test_section_question_id: number;
    results_summary_id: string;
    text: string;
    creator: {
      id: number;
      name: string;
      email: string;
      avatar_url: string;
    };
    last_action: {
      type: "written" | "generated" | "edited";
      /**
       * @format date-time
       */
      performed_at: string;
    };
  }[];
  section_summaries: {
    usability_test_section_id: number;
    results_summary_id: string;
    text: string;
    creator: {
      id: number;
      name: string;
      email: string;
      avatar_url: string;
    };
    last_action: {
      type: "written" | "generated" | "edited";
      /**
       * @format date-time
       */
      performed_at: string;
    };
  }[];
  test_summary: {
    usability_test_id: number;
    results_summary_id: string;
    text: string;
    creator: {
      id: number;
      name: string;
      email: string;
      avatar_url: string;
    };
    last_action: {
      type: "written" | "generated" | "edited";
      /**
       * @format date-time
       */
      performed_at: string;
    };
  } | null;
};

export type GetApiTestResultsVariables = {
  pathParams: GetApiTestResultsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * This is intended to become a BFF-style endpoint powering the test results page.  We're starting off with just comments but eventually it might include the test results themselves.
 *
 * If you need any new data on the test results page, consider if it would fit in here before adding anything new to ReduxStateBuilder!
 */
export const fetchGetApiTestResults = (variables: GetApiTestResultsVariables) =>
  usabilityhubFetch<
    GetApiTestResultsResponse,
    GetApiTestResultsError,
    undefined,
    {},
    {},
    GetApiTestResultsPathParams
  >({
    url: "/api/test_results/{usabilityTestUniqueId}",
    method: "get",
    ...variables,
  });

/**
 * This is intended to become a BFF-style endpoint powering the test results page.  We're starting off with just comments but eventually it might include the test results themselves.
 *
 * If you need any new data on the test results page, consider if it would fit in here before adding anything new to ReduxStateBuilder!
 */
export const useGetApiTestResults = <TData = GetApiTestResultsResponse,>(
  variables: GetApiTestResultsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetApiTestResultsResponse,
      GetApiTestResultsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetApiTestResultsResponse,
    GetApiTestResultsError,
    TData
  >(
    queryKeyFn({
      path: "/api/test_results/{usability_test_unique_id}",
      operationId: "getApiTestResults",
      variables,
    }),
    () => fetchGetApiTestResults({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetPanelistNotificationPreferencesError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type GetPanelistNotificationPreferencesResponse = {
  notification_preferences: {
    type: string;
    enabled: boolean;
  }[];
};

export type GetPanelistNotificationPreferencesVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Gets the notification preferences for a panelist
 */
export const fetchGetPanelistNotificationPreferences = (
  variables: GetPanelistNotificationPreferencesVariables,
) =>
  usabilityhubFetch<
    GetPanelistNotificationPreferencesResponse,
    GetPanelistNotificationPreferencesError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/usercrowd/notification_preferences",
    method: "get",
    ...variables,
  });

/**
 * Gets the notification preferences for a panelist
 */
export const useGetPanelistNotificationPreferences = <
  TData = GetPanelistNotificationPreferencesResponse,
>(
  variables: GetPanelistNotificationPreferencesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetPanelistNotificationPreferencesResponse,
      GetPanelistNotificationPreferencesError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetPanelistNotificationPreferencesResponse,
    GetPanelistNotificationPreferencesError,
    TData
  >(
    queryKeyFn({
      path: "/api/usercrowd/notification_preferences",
      operationId: "getPanelistNotificationPreferences",
      variables,
    }),
    () =>
      fetchGetPanelistNotificationPreferences({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdatePanelistNotificationPreferenceError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type UpdatePanelistNotificationPreferenceRequestBody = {
  type: "usability_tests" | "moderated_studies" | "usability_test_recordings";
  enabled: boolean;
};

export type UpdatePanelistNotificationPreferenceVariables = {
  body: UpdatePanelistNotificationPreferenceRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Updates a notification preference for a panelist
 */
export const fetchUpdatePanelistNotificationPreference = (
  variables: UpdatePanelistNotificationPreferenceVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdatePanelistNotificationPreferenceError,
    UpdatePanelistNotificationPreferenceRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/usercrowd/notification_preferences",
    method: "patch",
    ...variables,
  });

/**
 * Updates a notification preference for a panelist
 */
export const useUpdatePanelistNotificationPreference = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdatePanelistNotificationPreferenceError,
      UpdatePanelistNotificationPreferenceVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdatePanelistNotificationPreferenceError,
    UpdatePanelistNotificationPreferenceVariables
  >(
    (variables: UpdatePanelistNotificationPreferenceVariables) =>
      fetchUpdatePanelistNotificationPreference({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type ListUsercrowdOrderAssignmentsError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.R403;
}>;

export type ListUsercrowdOrderAssignmentsResponse = {
  panelist_order_assignments: Schemas.PanelOrderAssignment[];
  moderated_study_order_assignments: Schemas.ModeratedStudyOrderAssignment[];
};

export type ListUsercrowdOrderAssignmentsVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Returns all order assignments for the current panelist
 */
export const fetchListUsercrowdOrderAssignments = (
  variables: ListUsercrowdOrderAssignmentsVariables,
) =>
  usabilityhubFetch<
    ListUsercrowdOrderAssignmentsResponse,
    ListUsercrowdOrderAssignmentsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/order_assignments", method: "get", ...variables });

/**
 * Returns all order assignments for the current panelist
 */
export const useListUsercrowdOrderAssignments = <
  TData = ListUsercrowdOrderAssignmentsResponse,
>(
  variables: ListUsercrowdOrderAssignmentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListUsercrowdOrderAssignmentsResponse,
      ListUsercrowdOrderAssignmentsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListUsercrowdOrderAssignmentsResponse,
    ListUsercrowdOrderAssignmentsError,
    TData
  >(
    queryKeyFn({
      path: "/api/order_assignments",
      operationId: "listUsercrowdOrderAssignments",
      variables,
    }),
    () =>
      fetchListUsercrowdOrderAssignments({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetUsercrowdOrderAssignmentPathParams = {
  id: number;
};

export type GetUsercrowdOrderAssignmentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type GetUsercrowdOrderAssignmentVariables = {
  pathParams: GetUsercrowdOrderAssignmentPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns a single order assignments
 */
export const fetchGetUsercrowdOrderAssignment = (
  variables: GetUsercrowdOrderAssignmentVariables,
) =>
  usabilityhubFetch<
    Schemas.PanelOrderAssignment,
    GetUsercrowdOrderAssignmentError,
    undefined,
    {},
    {},
    GetUsercrowdOrderAssignmentPathParams
  >({ url: "/api/order_assignments/{id}", method: "get", ...variables });

/**
 * Returns a single order assignments
 */
export const useGetUsercrowdOrderAssignment = <
  TData = Schemas.PanelOrderAssignment,
>(
  variables: GetUsercrowdOrderAssignmentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PanelOrderAssignment,
      GetUsercrowdOrderAssignmentError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.PanelOrderAssignment,
    GetUsercrowdOrderAssignmentError,
    TData
  >(
    queryKeyFn({
      path: "/api/order_assignments/{id}",
      operationId: "getUsercrowdOrderAssignment",
      variables,
    }),
    () => fetchGetUsercrowdOrderAssignment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type AcceptModeratedStudyOrderAssignmentPathParams = {
  id: string;
};

export type AcceptModeratedStudyOrderAssignmentError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AcceptModeratedStudyOrderAssignmentResponse = {
  moderated_study_application_id: string;
};

export type AcceptModeratedStudyOrderAssignmentVariables = {
  pathParams: AcceptModeratedStudyOrderAssignmentPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Accept a moderated study order assignment
 */
export const fetchAcceptModeratedStudyOrderAssignment = (
  variables: AcceptModeratedStudyOrderAssignmentVariables,
) =>
  usabilityhubFetch<
    AcceptModeratedStudyOrderAssignmentResponse,
    AcceptModeratedStudyOrderAssignmentError,
    undefined,
    {},
    {},
    AcceptModeratedStudyOrderAssignmentPathParams
  >({
    url: "/api/moderated_study_order_assignments/{id}/accept",
    method: "post",
    ...variables,
  });

/**
 * Accept a moderated study order assignment
 */
export const useAcceptModeratedStudyOrderAssignment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      AcceptModeratedStudyOrderAssignmentResponse,
      AcceptModeratedStudyOrderAssignmentError,
      AcceptModeratedStudyOrderAssignmentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    AcceptModeratedStudyOrderAssignmentResponse,
    AcceptModeratedStudyOrderAssignmentError,
    AcceptModeratedStudyOrderAssignmentVariables
  >(
    (variables: AcceptModeratedStudyOrderAssignmentVariables) =>
      fetchAcceptModeratedStudyOrderAssignment({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type RejectModeratedStudyOrderAssignmentPathParams = {
  id: string;
};

export type RejectModeratedStudyOrderAssignmentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type RejectModeratedStudyOrderAssignmentVariables = {
  pathParams: RejectModeratedStudyOrderAssignmentPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Rejects a moderated study order assignment
 */
export const fetchRejectModeratedStudyOrderAssignment = (
  variables: RejectModeratedStudyOrderAssignmentVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    RejectModeratedStudyOrderAssignmentError,
    undefined,
    {},
    {},
    RejectModeratedStudyOrderAssignmentPathParams
  >({
    url: "/api/moderated_study_order_assignments/{id}/reject",
    method: "post",
    ...variables,
  });

/**
 * Rejects a moderated study order assignment
 */
export const useRejectModeratedStudyOrderAssignment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      RejectModeratedStudyOrderAssignmentError,
      RejectModeratedStudyOrderAssignmentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    RejectModeratedStudyOrderAssignmentError,
    RejectModeratedStudyOrderAssignmentVariables
  >(
    (variables: RejectModeratedStudyOrderAssignmentVariables) =>
      fetchRejectModeratedStudyOrderAssignment({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type CreateQuestionTagError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type CreateQuestionTagResponse = {
  question_tag: Schemas.QuestionTag;
  answer_tags: Schemas.AnswerTag[];
};

export type CreateQuestionTagRequestBody = {
  question_tag: {
    name: string;
    color?: string;
    usability_test_section_question_id: number;
  };
  answer_ids?: number[];
};

export type CreateQuestionTagVariables = {
  body: CreateQuestionTagRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create a new question tag
 */
export const fetchCreateQuestionTag = (variables: CreateQuestionTagVariables) =>
  usabilityhubFetch<
    CreateQuestionTagResponse,
    CreateQuestionTagError,
    CreateQuestionTagRequestBody,
    {},
    {},
    {}
  >({ url: "/api/question_tags", method: "post", ...variables });

/**
 * Create a new question tag
 */
export const useCreateQuestionTag = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CreateQuestionTagResponse,
      CreateQuestionTagError,
      CreateQuestionTagVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CreateQuestionTagResponse,
    CreateQuestionTagError,
    CreateQuestionTagVariables
  >(
    (variables: CreateQuestionTagVariables) =>
      fetchCreateQuestionTag({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UpdateQuestionTagPathParams = {
  id: number;
};

export type UpdateQuestionTagError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type UpdateQuestionTagResponse = {
  question_tag: Schemas.QuestionTag;
};

export type UpdateQuestionTagRequestBody = {
  question_tag: {
    name: string;
    color: string;
  };
};

export type UpdateQuestionTagVariables = {
  body: UpdateQuestionTagRequestBody;
  pathParams: UpdateQuestionTagPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Updates a question tag
 */
export const fetchUpdateQuestionTag = (variables: UpdateQuestionTagVariables) =>
  usabilityhubFetch<
    UpdateQuestionTagResponse,
    UpdateQuestionTagError,
    UpdateQuestionTagRequestBody,
    {},
    {},
    UpdateQuestionTagPathParams
  >({ url: "/api/question_tags/{id}", method: "patch", ...variables });

/**
 * Updates a question tag
 */
export const useUpdateQuestionTag = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      UpdateQuestionTagResponse,
      UpdateQuestionTagError,
      UpdateQuestionTagVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    UpdateQuestionTagResponse,
    UpdateQuestionTagError,
    UpdateQuestionTagVariables
  >(
    (variables: UpdateQuestionTagVariables) =>
      fetchUpdateQuestionTag({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DeleteQuestionTagPathParams = {
  id: number;
};

export type DeleteQuestionTagError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type DeleteQuestionTagVariables = {
  pathParams: DeleteQuestionTagPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Deletes a question tag
 */
export const fetchDeleteQuestionTag = (variables: DeleteQuestionTagVariables) =>
  usabilityhubFetch<
    Responses.R204,
    DeleteQuestionTagError,
    undefined,
    {},
    {},
    DeleteQuestionTagPathParams
  >({ url: "/api/question_tags/{id}", method: "delete", ...variables });

/**
 * Deletes a question tag
 */
export const useDeleteQuestionTag = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeleteQuestionTagError,
      DeleteQuestionTagVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeleteQuestionTagError,
    DeleteQuestionTagVariables
  >(
    (variables: DeleteQuestionTagVariables) =>
      fetchDeleteQuestionTag({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CreateAnswerTagsPathParams = {
  id: number;
};

export type CreateAnswerTagsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type CreateAnswerTagsResponse = {
  answer_tags: Schemas.AnswerTag[];
};

export type CreateAnswerTagsRequestBody = {
  answer_ids: number[];
};

export type CreateAnswerTagsVariables = {
  body: CreateAnswerTagsRequestBody;
  pathParams: CreateAnswerTagsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Creates answer tags for a question tag
 */
export const fetchCreateAnswerTags = (variables: CreateAnswerTagsVariables) =>
  usabilityhubFetch<
    CreateAnswerTagsResponse,
    CreateAnswerTagsError,
    CreateAnswerTagsRequestBody,
    {},
    {},
    CreateAnswerTagsPathParams
  >({
    url: "/api/question_tags/{id}/answer_tags",
    method: "post",
    ...variables,
  });

/**
 * Creates answer tags for a question tag
 */
export const useCreateAnswerTags = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CreateAnswerTagsResponse,
      CreateAnswerTagsError,
      CreateAnswerTagsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CreateAnswerTagsResponse,
    CreateAnswerTagsError,
    CreateAnswerTagsVariables
  >(
    (variables: CreateAnswerTagsVariables) =>
      fetchCreateAnswerTags({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DeleteAnswerTagsPathParams = {
  id: number;
};

export type DeleteAnswerTagsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type DeleteAnswerTagsRequestBody = {
  answer_ids: number[];
};

export type DeleteAnswerTagsVariables = {
  body: DeleteAnswerTagsRequestBody;
  pathParams: DeleteAnswerTagsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Deletes answer tags for a question tag
 */
export const fetchDeleteAnswerTags = (variables: DeleteAnswerTagsVariables) =>
  usabilityhubFetch<
    Responses.R204,
    DeleteAnswerTagsError,
    DeleteAnswerTagsRequestBody,
    {},
    {},
    DeleteAnswerTagsPathParams
  >({
    url: "/api/question_tags/{id}/answer_tags",
    method: "delete",
    ...variables,
  });

/**
 * Deletes answer tags for a question tag
 */
export const useDeleteAnswerTags = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeleteAnswerTagsError,
      DeleteAnswerTagsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeleteAnswerTagsError,
    DeleteAnswerTagsVariables
  >(
    (variables: DeleteAnswerTagsVariables) =>
      fetchDeleteAnswerTags({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetPanelistIntegrationsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
>;

export type GetPanelistIntegrationsResponse = {
  linkedin: {
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * @format date-time
     */
    expires_at: string;
  } | null;
};

export type GetPanelistIntegrationsVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Get the current panelists integrations
 */
export const fetchGetPanelistIntegrations = (
  variables: GetPanelistIntegrationsVariables,
) =>
  usabilityhubFetch<
    GetPanelistIntegrationsResponse,
    GetPanelistIntegrationsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/usercrowd/integrations", method: "get", ...variables });

/**
 * Get the current panelists integrations
 */
export const useGetPanelistIntegrations = <
  TData = GetPanelistIntegrationsResponse,
>(
  variables: GetPanelistIntegrationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetPanelistIntegrationsResponse,
      GetPanelistIntegrationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetPanelistIntegrationsResponse,
    GetPanelistIntegrationsError,
    TData
  >(
    queryKeyFn({
      path: "/api/usercrowd/integrations",
      operationId: "getPanelistIntegrations",
      variables,
    }),
    () => fetchGetPanelistIntegrations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type DeletePanelistIntegrationError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type DeletePanelistIntegrationRequestBody = {
  integration?: "linkedin";
};

export type DeletePanelistIntegrationVariables = {
  body?: DeletePanelistIntegrationRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Deletes the integration for the current panelist
 */
export const fetchDeletePanelistIntegration = (
  variables: DeletePanelistIntegrationVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    DeletePanelistIntegrationError,
    DeletePanelistIntegrationRequestBody,
    {},
    {},
    {}
  >({ url: "/api/usercrowd/integrations", method: "delete", ...variables });

/**
 * Deletes the integration for the current panelist
 */
export const useDeletePanelistIntegration = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeletePanelistIntegrationError,
      DeletePanelistIntegrationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeletePanelistIntegrationError,
    DeletePanelistIntegrationVariables
  >(
    (variables: DeletePanelistIntegrationVariables) =>
      fetchDeletePanelistIntegration({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListNotificationSubscriptionsError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.R403;
}>;

export type ListNotificationSubscriptionsResponse = {
  notification_subscriptions: {
    id: number;
    endpoint: string;
    host: string;
  }[];
};

export type ListNotificationSubscriptionsVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Returns all notification subscriptions for the current user
 */
export const fetchListNotificationSubscriptions = (
  variables: ListNotificationSubscriptionsVariables,
) =>
  usabilityhubFetch<
    ListNotificationSubscriptionsResponse,
    ListNotificationSubscriptionsError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/usercrowd/notification_subscriptions",
    method: "get",
    ...variables,
  });

/**
 * Returns all notification subscriptions for the current user
 */
export const useListNotificationSubscriptions = <
  TData = ListNotificationSubscriptionsResponse,
>(
  variables: ListNotificationSubscriptionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListNotificationSubscriptionsResponse,
      ListNotificationSubscriptionsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListNotificationSubscriptionsResponse,
    ListNotificationSubscriptionsError,
    TData
  >(
    queryKeyFn({
      path: "/api/usercrowd/notification_subscriptions",
      operationId: "listNotificationSubscriptions",
      variables,
    }),
    () =>
      fetchListNotificationSubscriptions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type AgreeToCurrentTermsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type AgreeToCurrentTermsRequestBody = {
  agreed: {
    [key: string]: any;
  };
};

export type AgreeToCurrentTermsVariables = {
  body: AgreeToCurrentTermsRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Marks the currently logged in panelist as having agreed to the current Tester Agreement
 */
export const fetchAgreeToCurrentTerms = (
  variables: AgreeToCurrentTermsVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    AgreeToCurrentTermsError,
    AgreeToCurrentTermsRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/usercrowd/panelist/agree_to_terms",
    method: "post",
    ...variables,
  });

/**
 * Marks the currently logged in panelist as having agreed to the current Tester Agreement
 */
export const useAgreeToCurrentTerms = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AgreeToCurrentTermsError,
      AgreeToCurrentTermsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AgreeToCurrentTermsError,
    AgreeToCurrentTermsVariables
  >(
    (variables: AgreeToCurrentTermsVariables) =>
      fetchAgreeToCurrentTerms({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CreatePanelistLocationLogError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type CreatePanelistLocationLogRequestBody = {
  timezone: string;
};

export type CreatePanelistLocationLogVariables = {
  body: CreatePanelistLocationLogRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create a new location log for the current panelist if the newly detected values differ from the previous ones.
 */
export const fetchCreatePanelistLocationLog = (
  variables: CreatePanelistLocationLogVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    CreatePanelistLocationLogError,
    CreatePanelistLocationLogRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/usercrowd/panelist/create_panelist_location_log",
    method: "patch",
    ...variables,
  });

/**
 * Create a new location log for the current panelist if the newly detected values differ from the previous ones.
 */
export const useCreatePanelistLocationLog = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      CreatePanelistLocationLogError,
      CreatePanelistLocationLogVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    CreatePanelistLocationLogError,
    CreatePanelistLocationLogVariables
  >(
    (variables: CreatePanelistLocationLogVariables) =>
      fetchCreatePanelistLocationLog({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetPanelistAvailabilityError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type GetPanelistAvailabilityResponse = {
  timezone: string | null;
  start_time: string;
  end_time: string;
  sunday: boolean;
  monday: boolean;
  tuesday: boolean;
  wednesday: boolean;
  thursday: boolean;
  friday: boolean;
  saturday: boolean;
};

export type GetPanelistAvailabilityVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Show availability information for the currently logged-in panelist
 */
export const fetchGetPanelistAvailability = (
  variables: GetPanelistAvailabilityVariables,
) =>
  usabilityhubFetch<
    GetPanelistAvailabilityResponse,
    GetPanelistAvailabilityError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/usercrowd/panelist/availability",
    method: "get",
    ...variables,
  });

/**
 * Show availability information for the currently logged-in panelist
 */
export const useGetPanelistAvailability = <
  TData = GetPanelistAvailabilityResponse,
>(
  variables: GetPanelistAvailabilityVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetPanelistAvailabilityResponse,
      GetPanelistAvailabilityError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetPanelistAvailabilityResponse,
    GetPanelistAvailabilityError,
    TData
  >(
    queryKeyFn({
      path: "/api/usercrowd/panelist/availability",
      operationId: "getPanelistAvailability",
      variables,
    }),
    () => fetchGetPanelistAvailability({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdatePanelistAvailabilityError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type UpdatePanelistAvailabilityRequestBody = {
  timezone: string | null;
  start_time: string;
  end_time: string;
  sunday: boolean;
  monday: boolean;
  tuesday: boolean;
  wednesday: boolean;
  thursday: boolean;
  friday: boolean;
  saturday: boolean;
};

export type UpdatePanelistAvailabilityVariables = {
  body: UpdatePanelistAvailabilityRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Updates availability information for the currently logged-in panelist
 */
export const fetchUpdatePanelistAvailability = (
  variables: UpdatePanelistAvailabilityVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdatePanelistAvailabilityError,
    UpdatePanelistAvailabilityRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/usercrowd/panelist/availability",
    method: "patch",
    ...variables,
  });

/**
 * Updates availability information for the currently logged-in panelist
 */
export const useUpdatePanelistAvailability = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdatePanelistAvailabilityError,
      UpdatePanelistAvailabilityVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdatePanelistAvailabilityError,
    UpdatePanelistAvailabilityVariables
  >(
    (variables: UpdatePanelistAvailabilityVariables) =>
      fetchUpdatePanelistAvailability({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CurrentPanelistInfoError = Fetcher.ErrorWrapper<undefined>;

export type CurrentPanelistInfoResponse = {
  id: number;
  panelist_id: number;
  account_id: number;
  name: string;
  preferred_name: string | null;
  email: string;
  phone_number: string | null;
  country: string | null;
  created_at: string;
  intercom_user_hash: string;
  current_device_type: "mobile" | "tablet" | "console" | "desktop";
  agreed_to_current_tester_terms: boolean;
  completed_profile_at: string | null;
  phone_number_required_for_panel: boolean;
  panelist_state: "waitlisted" | "accepted" | "verified";
  email_confirmation_state: {
    confirmation_id: number;
    is_expired: boolean;
  } | null;
  practice_test_state:
    | "not_required"
    | "not_started"
    | "in_progress"
    | "awaiting_review"
    | "passed"
    | "auto_review_fail"
    | "manual_qa_fail";
  linkedin_profile: {
    vanity_url: string;
  } | null;
};

export type CurrentPanelistInfoVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Has basic panelist info for the currently logged-in user
 */
export const fetchCurrentPanelistInfo = (
  variables: CurrentPanelistInfoVariables,
) =>
  usabilityhubFetch<
    CurrentPanelistInfoResponse,
    CurrentPanelistInfoError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/usercrowd/panelist/me", method: "get", ...variables });

/**
 * Has basic panelist info for the currently logged-in user
 */
export const useCurrentPanelistInfo = <TData = CurrentPanelistInfoResponse,>(
  variables: CurrentPanelistInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CurrentPanelistInfoResponse,
      CurrentPanelistInfoError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    CurrentPanelistInfoResponse,
    CurrentPanelistInfoError,
    TData
  >(
    queryKeyFn({
      path: "/api/usercrowd/panelist/me",
      operationId: "currentPanelistInfo",
      variables,
    }),
    () => fetchCurrentPanelistInfo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdatePanelistPasswordError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
>;

export type UpdatePanelistPasswordResponse = {
  message: string;
};

export type UpdatePanelistPasswordRequestBody = {
  current_password: string;
  password: string;
  password_confirmation: string;
};

export type UpdatePanelistPasswordVariables = {
  body: UpdatePanelistPasswordRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update panelist password
 */
export const fetchUpdatePanelistPassword = (
  variables: UpdatePanelistPasswordVariables,
) =>
  usabilityhubFetch<
    UpdatePanelistPasswordResponse,
    UpdatePanelistPasswordError,
    UpdatePanelistPasswordRequestBody,
    {},
    {},
    {}
  >({ url: "/api/usercrowd/panelist/password", method: "patch", ...variables });

/**
 * Update panelist password
 */
export const useUpdatePanelistPassword = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      UpdatePanelistPasswordResponse,
      UpdatePanelistPasswordError,
      UpdatePanelistPasswordVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    UpdatePanelistPasswordResponse,
    UpdatePanelistPasswordError,
    UpdatePanelistPasswordVariables
  >(
    (variables: UpdatePanelistPasswordVariables) =>
      fetchUpdatePanelistPassword({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type PanelistStatsError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.R403;
}>;

export type PanelistStatsResponse = {
  credit_balance: {
    current: number;
    pending: number;
  };
  studies_completed: {
    tests: number;
    interviews: number;
  };
  profile_completeness: number;
  rating: number | null;
  recent_interview: boolean;
  upcoming_interview: boolean;
  estimated_payout_review_time_in_days: number;
};

export type PanelistStatsVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Has high-level panelist stats about profile completion, tests completed, etc.
 */
export const fetchPanelistStats = (variables: PanelistStatsVariables) =>
  usabilityhubFetch<
    PanelistStatsResponse,
    PanelistStatsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/usercrowd/panelist/stats", method: "get", ...variables });

/**
 * Has high-level panelist stats about profile completion, tests completed, etc.
 */
export const usePanelistStats = <TData = PanelistStatsResponse,>(
  variables: PanelistStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PanelistStatsResponse,
      PanelistStatsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<PanelistStatsResponse, PanelistStatsError, TData>(
    queryKeyFn({
      path: "/api/usercrowd/panelist/stats",
      operationId: "panelistStats",
      variables,
    }),
    () => fetchPanelistStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdatePanelistAccountDetailsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
>;

export type UpdatePanelistAccountDetailsRequestBody = {
  name?: string;
  preferred_name?: string;
  email?: string;
  paypal_email_address?: string | null;
  email_product_updates?: boolean;
};

export type UpdatePanelistAccountDetailsVariables = {
  body?: UpdatePanelistAccountDetailsRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Updates account information for the currently logged-in panelist
 */
export const fetchUpdatePanelistAccountDetails = (
  variables: UpdatePanelistAccountDetailsVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdatePanelistAccountDetailsError,
    UpdatePanelistAccountDetailsRequestBody,
    {},
    {},
    {}
  >({ url: "/api/usercrowd/panelist/account", method: "patch", ...variables });

/**
 * Updates account information for the currently logged-in panelist
 */
export const useUpdatePanelistAccountDetails = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdatePanelistAccountDetailsError,
      UpdatePanelistAccountDetailsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdatePanelistAccountDetailsError,
    UpdatePanelistAccountDetailsVariables
  >(
    (variables: UpdatePanelistAccountDetailsVariables) =>
      fetchUpdatePanelistAccountDetails({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DeletePanelistAccountError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
>;

export type DeletePanelistAccountResponse = {
  message: string;
};

export type DeletePanelistAccountVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Deletes the account of the currently logged-in panelist
 */
export const fetchDeletePanelistAccount = (
  variables: DeletePanelistAccountVariables,
) =>
  usabilityhubFetch<
    DeletePanelistAccountResponse,
    DeletePanelistAccountError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/usercrowd/panelist/delete_account",
    method: "delete",
    ...variables,
  });

/**
 * Deletes the account of the currently logged-in panelist
 */
export const useDeletePanelistAccount = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeletePanelistAccountResponse,
      DeletePanelistAccountError,
      DeletePanelistAccountVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    DeletePanelistAccountResponse,
    DeletePanelistAccountError,
    DeletePanelistAccountVariables
  >(
    (variables: DeletePanelistAccountVariables) =>
      fetchDeletePanelistAccount({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type PanelistHistoryQueryParams = {
  page?: number;
};

export type PanelistHistoryError = Fetcher.ErrorWrapper<undefined>;

export type PanelistHistoryResponse = {
  total_pages: number;
  point_transactions: {
    id: number;
    karma_points: number;
    updated_at: string;
    reason: string;
  }[];
};

export type PanelistHistoryVariables = {
  queryParams?: PanelistHistoryQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Information about PointTransactions and Payouts for the current panelist
 */
export const fetchPanelistHistory = (variables: PanelistHistoryVariables) =>
  usabilityhubFetch<
    PanelistHistoryResponse,
    PanelistHistoryError,
    undefined,
    {},
    PanelistHistoryQueryParams,
    {}
  >({ url: "/api/usercrowd/panelist/history", method: "get", ...variables });

/**
 * Information about PointTransactions and Payouts for the current panelist
 */
export const usePanelistHistory = <TData = PanelistHistoryResponse,>(
  variables: PanelistHistoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PanelistHistoryResponse,
      PanelistHistoryError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    PanelistHistoryResponse,
    PanelistHistoryError,
    TData
  >(
    queryKeyFn({
      path: "/api/usercrowd/panelist/history",
      operationId: "panelistHistory",
      variables,
    }),
    () => fetchPanelistHistory({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type PanelistPayoutsError = Fetcher.ErrorWrapper<undefined>;

export type PanelistPayoutsResponse = {
  payouts: {
    id: number;
    status:
      | "open"
      | "approved"
      | "paid"
      | "payment_failed"
      | "rejected"
      | "payment_pending";
    amount: number;
    created_at: string;
    reviewed_amount: number | null;
    paid_at: string | null;
    paypal_email_address: string;
  }[];
};

export type PanelistPayoutsVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Returns an (unpaginated) list of all panelists for the currently logged-in user
 */
export const fetchPanelistPayouts = (variables: PanelistPayoutsVariables) =>
  usabilityhubFetch<
    PanelistPayoutsResponse,
    PanelistPayoutsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/usercrowd/panelist/payouts", method: "get", ...variables });

/**
 * Returns an (unpaginated) list of all panelists for the currently logged-in user
 */
export const usePanelistPayouts = <TData = PanelistPayoutsResponse,>(
  variables: PanelistPayoutsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PanelistPayoutsResponse,
      PanelistPayoutsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    PanelistPayoutsResponse,
    PanelistPayoutsError,
    TData
  >(
    queryKeyFn({
      path: "/api/usercrowd/panelist/payouts",
      operationId: "panelistPayouts",
      variables,
    }),
    () => fetchPanelistPayouts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetPanelistSettingsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type GetPanelistSettingsResponse = {
  paypal_email_address: string | null;
  last_dismissed_timezone_suggestion: string | null;
  email_product_updates: boolean;
  notify_assignments_by_email: boolean;
  notify_assignments_by_sms: boolean;
};

export type GetPanelistSettingsVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Get current settings for the logged-in panelist
 */
export const fetchGetPanelistSettings = (
  variables: GetPanelistSettingsVariables,
) =>
  usabilityhubFetch<
    GetPanelistSettingsResponse,
    GetPanelistSettingsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/usercrowd/panelist/settings", method: "get", ...variables });

/**
 * Get current settings for the logged-in panelist
 */
export const useGetPanelistSettings = <TData = GetPanelistSettingsResponse,>(
  variables: GetPanelistSettingsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetPanelistSettingsResponse,
      GetPanelistSettingsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetPanelistSettingsResponse,
    GetPanelistSettingsError,
    TData
  >(
    queryKeyFn({
      path: "/api/usercrowd/panelist/settings",
      operationId: "getPanelistSettings",
      variables,
    }),
    () => fetchGetPanelistSettings({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdatePanelistSettingsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type UpdatePanelistSettingsRequestBody = {
  notify_assignments_by_email: boolean;
  notify_assignments_by_sms: boolean;
  last_dismissed_timezone_suggestion: string | null;
};

export type UpdatePanelistSettingsVariables = {
  body: UpdatePanelistSettingsRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Updates settings for the currently logged-in panelist
 */
export const fetchUpdatePanelistSettings = (
  variables: UpdatePanelistSettingsVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdatePanelistSettingsError,
    UpdatePanelistSettingsRequestBody,
    {},
    {},
    {}
  >({ url: "/api/usercrowd/panelist/settings", method: "patch", ...variables });

/**
 * Updates settings for the currently logged-in panelist
 */
export const useUpdatePanelistSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdatePanelistSettingsError,
      UpdatePanelistSettingsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdatePanelistSettingsError,
    UpdatePanelistSettingsVariables
  >(
    (variables: UpdatePanelistSettingsVariables) =>
      fetchUpdatePanelistSettings({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type RequestPayoutError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type RequestPayoutResponse = {
  message: string;
};

export type RequestPayoutVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Initiates a payout request for the current panelist
 */
export const fetchRequestPayout = (variables: RequestPayoutVariables) =>
  usabilityhubFetch<
    RequestPayoutResponse,
    RequestPayoutError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/usercrowd/payouts", method: "post", ...variables });

/**
 * Initiates a payout request for the current panelist
 */
export const useRequestPayout = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      RequestPayoutResponse,
      RequestPayoutError,
      RequestPayoutVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    RequestPayoutResponse,
    RequestPayoutError,
    RequestPayoutVariables
  >(
    (variables: RequestPayoutVariables) =>
      fetchRequestPayout({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListUsercrowdUpcomingBookingsError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.R403;
}>;

export type ListUsercrowdUpcomingBookingsResponse = {
  moderated_study_bookings: {
    moderated_study_application_id: string;
    external_name: string;
    location: string;
    incentive_text: string;
    /**
     * @format date-time
     */
    starts_at: string;
    /**
     * @format date-time
     */
    ends_at: string;
    device_requirement: Schemas.DeviceRequirement;
    language_code: string;
  }[];
};

export type ListUsercrowdUpcomingBookingsVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Returns all upcoming bookings for the current panelist
 */
export const fetchListUsercrowdUpcomingBookings = (
  variables: ListUsercrowdUpcomingBookingsVariables,
) =>
  usabilityhubFetch<
    ListUsercrowdUpcomingBookingsResponse,
    ListUsercrowdUpcomingBookingsError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/usercrowd/moderated_study_bookings/upcoming",
    method: "get",
    ...variables,
  });

/**
 * Returns all upcoming bookings for the current panelist
 */
export const useListUsercrowdUpcomingBookings = <
  TData = ListUsercrowdUpcomingBookingsResponse,
>(
  variables: ListUsercrowdUpcomingBookingsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListUsercrowdUpcomingBookingsResponse,
      ListUsercrowdUpcomingBookingsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListUsercrowdUpcomingBookingsResponse,
    ListUsercrowdUpcomingBookingsError,
    TData
  >(
    queryKeyFn({
      path: "/api/usercrowd/moderated_study_bookings/upcoming",
      operationId: "listUsercrowdUpcomingBookings",
      variables,
    }),
    () =>
      fetchListUsercrowdUpcomingBookings({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetVersionError = Fetcher.ErrorWrapper<undefined>;

export type GetVersionResponse = {
  version: string;
};

export type GetVersionVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Returns the current version of the API
 */
export const fetchGetVersion = (variables: GetVersionVariables) =>
  usabilityhubFetch<GetVersionResponse, GetVersionError, undefined, {}, {}, {}>(
    { url: "/api/version", method: "get", ...variables },
  );

/**
 * Returns the current version of the API
 */
export const useGetVersion = <TData = GetVersionResponse,>(
  variables: GetVersionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetVersionResponse, GetVersionError, TData>,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<GetVersionResponse, GetVersionError, TData>(
    queryKeyFn({ path: "/api/version", operationId: "getVersion", variables }),
    () => fetchGetVersion({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type SignUpPanelistError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type SignUpPanelistRequestBody = {
  user: {
    full_name: string;
    preferred_name: string;
    country: string;
    email: string;
    password: string;
    accept_terms: boolean;
  };
  ["g-recaptcha-response"]: string;
};

export type SignUpPanelistVariables = {
  body: SignUpPanelistRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Endpoint for submitting the panelist sign-up form
 */
export const fetchSignUpPanelist = (variables: SignUpPanelistVariables) =>
  usabilityhubFetch<
    Responses.R204,
    SignUpPanelistError,
    SignUpPanelistRequestBody,
    {},
    {},
    {}
  >({ url: "/testers/sign_up", method: "post", ...variables });

/**
 * Endpoint for submitting the panelist sign-up form
 */
export const useSignUpPanelist = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      SignUpPanelistError,
      SignUpPanelistVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    SignUpPanelistError,
    SignUpPanelistVariables
  >(
    (variables: SignUpPanelistVariables) =>
      fetchSignUpPanelist({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type PhoneVerificationRequestCodeError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type PhoneVerificationRequestCodeRequestBody = {
  phone_number: string;
};

export type PhoneVerificationRequestCodeVariables = {
  body: PhoneVerificationRequestCodeRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Request a code for phone verification
 */
export const fetchPhoneVerificationRequestCode = (
  variables: PhoneVerificationRequestCodeVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    PhoneVerificationRequestCodeError,
    PhoneVerificationRequestCodeRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/usercrowd/phone_verification/request_code",
    method: "post",
    ...variables,
  });

/**
 * Request a code for phone verification
 */
export const usePhoneVerificationRequestCode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      PhoneVerificationRequestCodeError,
      PhoneVerificationRequestCodeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    PhoneVerificationRequestCodeError,
    PhoneVerificationRequestCodeVariables
  >(
    (variables: PhoneVerificationRequestCodeVariables) =>
      fetchPhoneVerificationRequestCode({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type PhoneVerificationVerifyError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type PhoneVerificationVerifyRequestBody = {
  phone_number: string;
  code: string;
};

export type PhoneVerificationVerifyVariables = {
  body: PhoneVerificationVerifyRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Verify a phone number
 */
export const fetchPhoneVerificationVerify = (
  variables: PhoneVerificationVerifyVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    PhoneVerificationVerifyError,
    PhoneVerificationVerifyRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/usercrowd/phone_verification/verify",
    method: "post",
    ...variables,
  });

/**
 * Verify a phone number
 */
export const usePhoneVerificationVerify = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      PhoneVerificationVerifyError,
      PhoneVerificationVerifyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    PhoneVerificationVerifyError,
    PhoneVerificationVerifyVariables
  >(
    (variables: PhoneVerificationVerifyVariables) =>
      fetchPhoneVerificationVerify({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CreatePanelistNotificationSubscriptionError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type CreatePanelistNotificationSubscriptionResponse = {
  id: number;
  endpoint: string;
  host: string;
};

export type CreatePanelistNotificationSubscriptionRequestBody = {
  panelist_notification_subscription: {
    endpoint: string;
    public_key: string;
    auth_secret: string;
  };
};

export type CreatePanelistNotificationSubscriptionVariables = {
  body: CreatePanelistNotificationSubscriptionRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * TODO
 */
export const fetchCreatePanelistNotificationSubscription = (
  variables: CreatePanelistNotificationSubscriptionVariables,
) =>
  usabilityhubFetch<
    CreatePanelistNotificationSubscriptionResponse,
    CreatePanelistNotificationSubscriptionError,
    CreatePanelistNotificationSubscriptionRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/usercrowd/panelist_notification_subscriptions",
    method: "post",
    ...variables,
  });

/**
 * TODO
 */
export const useCreatePanelistNotificationSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CreatePanelistNotificationSubscriptionResponse,
      CreatePanelistNotificationSubscriptionError,
      CreatePanelistNotificationSubscriptionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CreatePanelistNotificationSubscriptionResponse,
    CreatePanelistNotificationSubscriptionError,
    CreatePanelistNotificationSubscriptionVariables
  >(
    (variables: CreatePanelistNotificationSubscriptionVariables) =>
      fetchCreatePanelistNotificationSubscription({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type DeletePanelistNotificationSubscriptionPathParams = {
  id: number;
};

export type DeletePanelistNotificationSubscriptionError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R400;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type DeletePanelistNotificationSubscriptionVariables = {
  pathParams: DeletePanelistNotificationSubscriptionPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * TODO
 */
export const fetchDeletePanelistNotificationSubscription = (
  variables: DeletePanelistNotificationSubscriptionVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    DeletePanelistNotificationSubscriptionError,
    undefined,
    {},
    {},
    DeletePanelistNotificationSubscriptionPathParams
  >({
    url: "/api/usercrowd/panelist_notification_subscriptions/{id}",
    method: "delete",
    ...variables,
  });

/**
 * TODO
 */
export const useDeletePanelistNotificationSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeletePanelistNotificationSubscriptionError,
      DeletePanelistNotificationSubscriptionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeletePanelistNotificationSubscriptionError,
    DeletePanelistNotificationSubscriptionVariables
  >(
    (variables: DeletePanelistNotificationSubscriptionVariables) =>
      fetchDeletePanelistNotificationSubscription({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type KeepaliveResponsePathParams = {
  responseId: number;
};

export type KeepaliveResponseError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type KeepaliveResponseResponse = {
  deleted_at: string | null;
  deletion_reason: Schemas.ResponseDeletionReason;
};

export type KeepaliveResponseVariables = {
  pathParams: KeepaliveResponsePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Keepalive a response
 */
export const fetchKeepaliveResponse = (variables: KeepaliveResponseVariables) =>
  usabilityhubFetch<
    KeepaliveResponseResponse,
    KeepaliveResponseError,
    undefined,
    {},
    {},
    KeepaliveResponsePathParams
  >({
    url: "/api/usercrowd/responses/{responseId}/keepalive",
    method: "put",
    ...variables,
  });

/**
 * Keepalive a response
 */
export const useKeepaliveResponse = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      KeepaliveResponseResponse,
      KeepaliveResponseError,
      KeepaliveResponseVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    KeepaliveResponseResponse,
    KeepaliveResponseError,
    KeepaliveResponseVariables
  >(
    (variables: KeepaliveResponseVariables) =>
      fetchKeepaliveResponse({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CreateModeratedStudyOrderPathParams = {
  moderatedStudyId: string;
};

export type CreateModeratedStudyOrderError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type CreateModeratedStudyOrderRequestBody = {
  demographic_target_id: number;
  requested_response_count: number;
  handpick_panelists: boolean;
};

export type CreateModeratedStudyOrderVariables = {
  body: CreateModeratedStudyOrderRequestBody;
  pathParams: CreateModeratedStudyOrderPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Creates an order for the given moderated study with a response count and demographic target
 */
export const fetchCreateModeratedStudyOrder = (
  variables: CreateModeratedStudyOrderVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    CreateModeratedStudyOrderError,
    CreateModeratedStudyOrderRequestBody,
    {},
    {},
    CreateModeratedStudyOrderPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/orders",
    method: "post",
    ...variables,
  });

/**
 * Creates an order for the given moderated study with a response count and demographic target
 */
export const useCreateModeratedStudyOrder = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      CreateModeratedStudyOrderError,
      CreateModeratedStudyOrderVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    CreateModeratedStudyOrderError,
    CreateModeratedStudyOrderVariables
  >(
    (variables: CreateModeratedStudyOrderVariables) =>
      fetchCreateModeratedStudyOrder({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetModeratedStudyOrderQuotePathParams = {
  moderatedStudyId: string;
};

export type GetModeratedStudyOrderQuoteError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type GetModeratedStudyOrderQuoteResponse = {
  demographic_target_id: number;
  requested_response_count: number;
  credit_cost: number;
  credits_to_be_purchased: number;
  estimated_fulfillment_time: number | null;
  credits_per_response: number;
  price_in_cents: number;
  price_per_credit: string;
  credits_scale: {
    from: number;
    to: number | null;
    price_in_cents: number;
  }[];
};

export type GetModeratedStudyOrderQuoteRequestBody = {
  min_age: number;
  max_age: number;
  target_locations: {
    type: "country" | "state" | "city";
    id: string;
  }[];
  demographic_attribute_option_ids: number[];
  requested_response_count: number;
  handpick_panelists: boolean;
};

export type GetModeratedStudyOrderQuoteVariables = {
  body: GetModeratedStudyOrderQuoteRequestBody;
  pathParams: GetModeratedStudyOrderQuotePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns information and cost and estimated duration for a set of order parameters
 */
export const fetchGetModeratedStudyOrderQuote = (
  variables: GetModeratedStudyOrderQuoteVariables,
) =>
  usabilityhubFetch<
    GetModeratedStudyOrderQuoteResponse,
    GetModeratedStudyOrderQuoteError,
    GetModeratedStudyOrderQuoteRequestBody,
    {},
    {},
    GetModeratedStudyOrderQuotePathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/orders/quote",
    method: "post",
    ...variables,
  });

/**
 * Returns information and cost and estimated duration for a set of order parameters
 */
export const useGetModeratedStudyOrderQuote = <
  TData = GetModeratedStudyOrderQuoteResponse,
>(
  variables: GetModeratedStudyOrderQuoteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetModeratedStudyOrderQuoteResponse,
      GetModeratedStudyOrderQuoteError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetModeratedStudyOrderQuoteResponse,
    GetModeratedStudyOrderQuoteError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_studies/{moderated_study_id}/orders/quote",
      operationId: "getModeratedStudyOrderQuote",
      variables,
    }),
    () => fetchGetModeratedStudyOrderQuote({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CancelModeratedStudyOrderPathParams = {
  moderatedStudyId: string;
  id: string;
};

export type CancelModeratedStudyOrderError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type CancelModeratedStudyOrderVariables = {
  pathParams: CancelModeratedStudyOrderPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Cancel a moderated study order
 */
export const fetchCancelModeratedStudyOrder = (
  variables: CancelModeratedStudyOrderVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    CancelModeratedStudyOrderError,
    undefined,
    {},
    {},
    CancelModeratedStudyOrderPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/orders/{id}/cancel",
    method: "post",
    ...variables,
  });

/**
 * Cancel a moderated study order
 */
export const useCancelModeratedStudyOrder = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      CancelModeratedStudyOrderError,
      CancelModeratedStudyOrderVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    CancelModeratedStudyOrderError,
    CancelModeratedStudyOrderVariables
  >(
    (variables: CancelModeratedStudyOrderVariables) =>
      fetchCancelModeratedStudyOrder({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type RefreshSessionError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type RefreshSessionRequestBody = {
  password: string;
};

export type RefreshSessionVariables = {
  body: RefreshSessionRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Refreshes the current session
 */
export const fetchRefreshSession = (variables: RefreshSessionVariables) =>
  usabilityhubFetch<
    Responses.R204,
    RefreshSessionError,
    RefreshSessionRequestBody,
    {},
    {},
    {}
  >({ url: "/api/sessions/refresh", method: "post", ...variables });

/**
 * Refreshes the current session
 */
export const useRefreshSession = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      RefreshSessionError,
      RefreshSessionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    RefreshSessionError,
    RefreshSessionVariables
  >(
    (variables: RefreshSessionVariables) =>
      fetchRefreshSession({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type SendModeratedStudyPreviewEmailPathParams = {
  moderatedStudyId: string;
  email:
    | "invited"
    | "booking_confirmation"
    | "rescheduled"
    | "canceled_by_researcher"
    | "reminder_15m";
};

export type SendModeratedStudyPreviewEmailError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type SendModeratedStudyPreviewEmailVariables = {
  pathParams: SendModeratedStudyPreviewEmailPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Sends an email with preview content to the current user's email address
 */
export const fetchSendModeratedStudyPreviewEmail = (
  variables: SendModeratedStudyPreviewEmailVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    SendModeratedStudyPreviewEmailError,
    undefined,
    {},
    {},
    SendModeratedStudyPreviewEmailPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/preview_email/{email}",
    method: "post",
    ...variables,
  });

/**
 * Sends an email with preview content to the current user's email address
 */
export const useSendModeratedStudyPreviewEmail = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      SendModeratedStudyPreviewEmailError,
      SendModeratedStudyPreviewEmailVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    SendModeratedStudyPreviewEmailError,
    SendModeratedStudyPreviewEmailVariables
  >(
    (variables: SendModeratedStudyPreviewEmailVariables) =>
      fetchSendModeratedStudyPreviewEmail({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CalculateScreenerResultError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type CalculateScreenerResultResponse = {
  result: boolean;
};

export type CalculateScreenerResultRequestBody = {
  screener_question_answers: (
    | {
        /**
         * @format uuid
         */
        screener_question_id: string;
        type: "short_text" | "long_text";
        text: string;
      }
    | {
        /**
         * @format uuid
         */
        screener_question_id: string;
        type: "single_select" | "multi_select";
        screener_question_options: string[];
      }
    | {
        /**
         * @format uuid
         */
        screener_question_id: string;
        type: "video";
        /**
         * @format uuid
         */
        recording_id: string;
      }
  )[];
};

export type CalculateScreenerResultVariables = {
  body: CalculateScreenerResultRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Calculate what the result of a screener would be without creating a response
 */
export const fetchCalculateScreenerResult = (
  variables: CalculateScreenerResultVariables,
) =>
  usabilityhubFetch<
    CalculateScreenerResultResponse,
    CalculateScreenerResultError,
    CalculateScreenerResultRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/moderated_study_previews/screener_result",
    method: "post",
    ...variables,
  });

/**
 * Calculate what the result of a screener would be without creating a response
 */
export const useCalculateScreenerResult = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CalculateScreenerResultResponse,
      CalculateScreenerResultError,
      CalculateScreenerResultVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CalculateScreenerResultResponse,
    CalculateScreenerResultError,
    CalculateScreenerResultVariables
  >(
    (variables: CalculateScreenerResultVariables) =>
      fetchCalculateScreenerResult({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetDynamicTemplatesError = Fetcher.ErrorWrapper<undefined>;

export type GetDynamicTemplatesResponse = Schemas.DynamicTemplate[];

export type GetDynamicTemplatesVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Get dynamic template data
 */
export const fetchGetDynamicTemplates = (
  variables: GetDynamicTemplatesVariables,
) =>
  usabilityhubFetch<
    GetDynamicTemplatesResponse,
    GetDynamicTemplatesError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/dynamic_templates", method: "get", ...variables });

/**
 * Get dynamic template data
 */
export const useGetDynamicTemplates = <TData = GetDynamicTemplatesResponse,>(
  variables: GetDynamicTemplatesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetDynamicTemplatesResponse,
      GetDynamicTemplatesError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetDynamicTemplatesResponse,
    GetDynamicTemplatesError,
    TData
  >(
    queryKeyFn({
      path: "/api/dynamic_templates",
      operationId: "getDynamicTemplates",
      variables,
    }),
    () => fetchGetDynamicTemplates({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CheckDynamicTemplateExistsPathParams = {
  /**
   * Unique ID of the template
   */
  id: string;
};

export type CheckDynamicTemplateExistsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type CheckDynamicTemplateExistsVariables = {
  pathParams: CheckDynamicTemplateExistsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Check if a template exists in the marketing account
 */
export const fetchCheckDynamicTemplateExists = (
  variables: CheckDynamicTemplateExistsVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    CheckDynamicTemplateExistsError,
    undefined,
    {},
    {},
    CheckDynamicTemplateExistsPathParams
  >({ url: "/api/dynamic_templates/{id}", method: "get", ...variables });

/**
 * Check if a template exists in the marketing account
 */
export const useCheckDynamicTemplateExists = <TData = Responses.R204,>(
  variables: CheckDynamicTemplateExistsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Responses.R204,
      CheckDynamicTemplateExistsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Responses.R204,
    CheckDynamicTemplateExistsError,
    TData
  >(
    queryKeyFn({
      path: "/api/dynamic_templates/{id}",
      operationId: "checkDynamicTemplateExists",
      variables,
    }),
    () => fetchCheckDynamicTemplateExists({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ApplyDynamicTemplatePathParams = {
  /**
   * Unique ID of the template
   */
  id: string;
};

export type ApplyDynamicTemplateError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type ApplyDynamicTemplateResponse = {
  /**
   * Unique ID of the job to listen to
   *
   * @format uuid
   */
  job_id?: string;
};

export type ApplyDynamicTemplateRequestBody = {
  /**
   * Test slug
   */
  slug?: string;
};

export type ApplyDynamicTemplateVariables = {
  body?: ApplyDynamicTemplateRequestBody;
  pathParams: ApplyDynamicTemplatePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create a new test from the given template
 */
export const fetchApplyDynamicTemplate = (
  variables: ApplyDynamicTemplateVariables,
) =>
  usabilityhubFetch<
    ApplyDynamicTemplateResponse,
    ApplyDynamicTemplateError,
    ApplyDynamicTemplateRequestBody,
    {},
    {},
    ApplyDynamicTemplatePathParams
  >({ url: "/api/dynamic_templates/{id}/apply", method: "post", ...variables });

/**
 * Create a new test from the given template
 */
export const useApplyDynamicTemplate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ApplyDynamicTemplateResponse,
      ApplyDynamicTemplateError,
      ApplyDynamicTemplateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    ApplyDynamicTemplateResponse,
    ApplyDynamicTemplateError,
    ApplyDynamicTemplateVariables
  >(
    (variables: ApplyDynamicTemplateVariables) =>
      fetchApplyDynamicTemplate({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetModeratedStudyQuotaError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.R403;
}>;

export type GetModeratedStudyQuotaResponse = {
  /**
   * @format date-time
   */
  period_start: string;
  /**
   * @format date-time
   */
  period_end: string;
  self_recruited_sessions: {
    used: number;
    quota: number;
  };
  transcription_hours: {
    used: number;
    quota: number;
  };
  video_storage_gb: {
    used: number;
    quota: number;
  };
};

export type GetModeratedStudyQuotaVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Returns information about limits for the currently logged-in account
 */
export const fetchGetModeratedStudyQuota = (
  variables: GetModeratedStudyQuotaVariables,
) =>
  usabilityhubFetch<
    GetModeratedStudyQuotaResponse,
    GetModeratedStudyQuotaError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/account/moderated_studies_quota",
    method: "get",
    ...variables,
  });

/**
 * Returns information about limits for the currently logged-in account
 */
export const useGetModeratedStudyQuota = <
  TData = GetModeratedStudyQuotaResponse,
>(
  variables: GetModeratedStudyQuotaVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetModeratedStudyQuotaResponse,
      GetModeratedStudyQuotaError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetModeratedStudyQuotaResponse,
    GetModeratedStudyQuotaError,
    TData
  >(
    queryKeyFn({
      path: "/api/account/moderated_studies_quota",
      operationId: "getModeratedStudyQuota",
      variables,
    }),
    () => fetchGetModeratedStudyQuota({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type RegisterNewUserError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type RegisterNewUserResponse = {
  redirect_to: string | null;
};

export type RegisterNewUserRequestBody = {
  intended_plan_unique_id: string;
  ["g-recaptcha-response"]: string;
  user: {
    name: string;
    email: string;
    password: string;
  };
};

export type RegisterNewUserVariables = {
  body: RegisterNewUserRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Register a new user
 */
export const fetchRegisterNewUser = (variables: RegisterNewUserVariables) =>
  usabilityhubFetch<
    RegisterNewUserResponse,
    RegisterNewUserError,
    RegisterNewUserRequestBody,
    {},
    {},
    {}
  >({ url: "/api/users/sign_up", method: "post", ...variables });

/**
 * Register a new user
 */
export const useRegisterNewUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      RegisterNewUserResponse,
      RegisterNewUserError,
      RegisterNewUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    RegisterNewUserResponse,
    RegisterNewUserError,
    RegisterNewUserVariables
  >(
    (variables: RegisterNewUserVariables) =>
      fetchRegisterNewUser({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetOnboardingError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: Responses.R401;
}>;

export type GetOnboardingVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Get onboarding data for the current user
 */
export const fetchGetOnboarding = (variables: GetOnboardingVariables) =>
  usabilityhubFetch<
    Record<string, any>,
    GetOnboardingError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/onboarding", method: "get", ...variables });

/**
 * Get onboarding data for the current user
 */
export const useGetOnboarding = <TData = Record<string, any>,>(
  variables: GetOnboardingVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Record<string, any>, GetOnboardingError, TData>,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<Record<string, any>, GetOnboardingError, TData>(
    queryKeyFn({
      path: "/api/onboarding",
      operationId: "getOnboarding",
      variables,
    }),
    () => fetchGetOnboarding({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdateOnboardingError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
>;

export type UpdateOnboardingVariables = {
  body?: Record<string, any>;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Set onboarding data for the current user
 */
export const fetchUpdateOnboarding = (variables: UpdateOnboardingVariables) =>
  usabilityhubFetch<
    Responses.R204,
    UpdateOnboardingError,
    Record<string, any>,
    {},
    {},
    {}
  >({ url: "/api/onboarding", method: "patch", ...variables });

/**
 * Set onboarding data for the current user
 */
export const useUpdateOnboarding = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdateOnboardingError,
      UpdateOnboardingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdateOnboardingError,
    UpdateOnboardingVariables
  >(
    (variables: UpdateOnboardingVariables) =>
      fetchUpdateOnboarding({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DeleteAccountError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type DeleteAccountResponse = {
  message: string;
};

export type DeleteAccountVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Deletes the account of the currently logged-in user
 */
export const fetchDeleteAccount = (variables: DeleteAccountVariables) =>
  usabilityhubFetch<
    DeleteAccountResponse,
    DeleteAccountError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/settings/delete_account", method: "delete", ...variables });

/**
 * Deletes the account of the currently logged-in user
 */
export const useDeleteAccount = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteAccountResponse,
      DeleteAccountError,
      DeleteAccountVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    DeleteAccountResponse,
    DeleteAccountError,
    DeleteAccountVariables
  >(
    (variables: DeleteAccountVariables) =>
      fetchDeleteAccount({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListDisabledFeaturesError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type ListDisabledFeaturesResponse = {
  disabled_features: Schemas.FeatureName[];
};

export type ListDisabledFeaturesVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * List the disabled feature of the current account
 */
export const fetchListDisabledFeatures = (
  variables: ListDisabledFeaturesVariables,
) =>
  usabilityhubFetch<
    ListDisabledFeaturesResponse,
    ListDisabledFeaturesError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/disabled_features", method: "get", ...variables });

/**
 * List the disabled feature of the current account
 */
export const useListDisabledFeatures = <TData = ListDisabledFeaturesResponse,>(
  variables: ListDisabledFeaturesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListDisabledFeaturesResponse,
      ListDisabledFeaturesError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListDisabledFeaturesResponse,
    ListDisabledFeaturesError,
    TData
  >(
    queryKeyFn({
      path: "/api/disabled_features",
      operationId: "listDisabledFeatures",
      variables,
    }),
    () => fetchListDisabledFeatures({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ToggleFeatureError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type ToggleFeatureRequestBody = {
  feature_name: Schemas.FeatureName;
  enabled: boolean;
};

export type ToggleFeatureVariables = {
  body: ToggleFeatureRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Disable or enable a feature for an account
 */
export const fetchToggleFeature = (variables: ToggleFeatureVariables) =>
  usabilityhubFetch<
    Responses.R204,
    ToggleFeatureError,
    ToggleFeatureRequestBody,
    {},
    {},
    {}
  >({ url: "/api/toggle_feature", method: "patch", ...variables });

/**
 * Disable or enable a feature for an account
 */
export const useToggleFeature = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      ToggleFeatureError,
      ToggleFeatureVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    ToggleFeatureError,
    ToggleFeatureVariables
  >(
    (variables: ToggleFeatureVariables) =>
      fetchToggleFeature({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListTestsWithRecordingEnabledError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type ListTestsWithRecordingEnabledResponse = {
  tests: {
    unique_id: string;
    name: string;
  }[];
};

export type ListTestsWithRecordingEnabledVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * List the tests with recording enabled for the current account
 */
export const fetchListTestsWithRecordingEnabled = (
  variables: ListTestsWithRecordingEnabledVariables,
) =>
  usabilityhubFetch<
    ListTestsWithRecordingEnabledResponse,
    ListTestsWithRecordingEnabledError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/tests_with_recording_enabled", method: "get", ...variables });

/**
 * List the tests with recording enabled for the current account
 */
export const useListTestsWithRecordingEnabled = <
  TData = ListTestsWithRecordingEnabledResponse,
>(
  variables: ListTestsWithRecordingEnabledVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListTestsWithRecordingEnabledResponse,
      ListTestsWithRecordingEnabledError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListTestsWithRecordingEnabledResponse,
    ListTestsWithRecordingEnabledError,
    TData
  >(
    queryKeyFn({
      path: "/api/tests_with_recording_enabled",
      operationId: "listTestsWithRecordingEnabled",
      variables,
    }),
    () =>
      fetchListTestsWithRecordingEnabled({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdatePasswordComplexityError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type UpdatePasswordComplexityRequestBody = {
  password_complexity_minimum_length: number;
  password_complexity_enforce_characters: boolean;
};

export type UpdatePasswordComplexityVariables = {
  body: UpdatePasswordComplexityRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update account's password complexity settings,
 */
export const fetchUpdatePasswordComplexity = (
  variables: UpdatePasswordComplexityVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdatePasswordComplexityError,
    UpdatePasswordComplexityRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/settings/password_complexity",
    method: "patch",
    ...variables,
  });

/**
 * Update account's password complexity settings,
 */
export const useUpdatePasswordComplexity = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdatePasswordComplexityError,
      UpdatePasswordComplexityVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdatePasswordComplexityError,
    UpdatePasswordComplexityVariables
  >(
    (variables: UpdatePasswordComplexityVariables) =>
      fetchUpdatePasswordComplexity({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UpdateBillingDetailsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type UpdateBillingDetailsRequestBody = {
  account: {
    contact_name: string;
    billing_email: string;
    billing_details: string;
  };
};

export type UpdateBillingDetailsVariables = {
  body: UpdateBillingDetailsRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update account billing details
 */
export const fetchUpdateBillingDetails = (
  variables: UpdateBillingDetailsVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdateBillingDetailsError,
    UpdateBillingDetailsRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/settings/billing/billing_details",
    method: "put",
    ...variables,
  });

/**
 * Update account billing details
 */
export const useUpdateBillingDetails = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdateBillingDetailsError,
      UpdateBillingDetailsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdateBillingDetailsError,
    UpdateBillingDetailsVariables
  >(
    (variables: UpdateBillingDetailsVariables) =>
      fetchUpdateBillingDetails({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type BillingHistoryQueryParams = {
  page?: string;
};

export type BillingHistoryError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type BillingHistoryResponse = {
  stripe_charges: {
    id: string;
    amount: number;
    amount_refunded: number;
    currency: string;
    invoice: string | null;
    created: number;
  }[];
  stripe_next_page: string | null;
};

export type BillingHistoryVariables = {
  queryParams?: BillingHistoryQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Return an account's Stripe billing history
 */
export const fetchBillingHistory = (variables: BillingHistoryVariables) =>
  usabilityhubFetch<
    BillingHistoryResponse,
    BillingHistoryError,
    undefined,
    {},
    BillingHistoryQueryParams,
    {}
  >({
    url: "/api/settings/billing/billing_history",
    method: "get",
    ...variables,
  });

/**
 * Return an account's Stripe billing history
 */
export const useBillingHistory = <TData = BillingHistoryResponse,>(
  variables: BillingHistoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      BillingHistoryResponse,
      BillingHistoryError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    BillingHistoryResponse,
    BillingHistoryError,
    TData
  >(
    queryKeyFn({
      path: "/api/settings/billing/billing_history",
      operationId: "billingHistory",
      variables,
    }),
    () => fetchBillingHistory({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpcomingInvoiceError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type UpcomingInvoiceResponse = {
  invoice: {
    amount_due: number;
    period_end: number;
    discount?: {
      coupon: {
        id: number;
        amount_off: number | null;
        percent_off: number;
      };
    };
  } | null;
};

export type UpcomingInvoiceVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Return an account's upcoming Stripe invoice
 */
export const fetchUpcomingInvoice = (variables: UpcomingInvoiceVariables) =>
  usabilityhubFetch<
    UpcomingInvoiceResponse,
    UpcomingInvoiceError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/settings/billing/upcoming_invoice",
    method: "get",
    ...variables,
  });

/**
 * Return an account's upcoming Stripe invoice
 */
export const useUpcomingInvoice = <TData = UpcomingInvoiceResponse,>(
  variables: UpcomingInvoiceVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UpcomingInvoiceResponse,
      UpcomingInvoiceError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    UpcomingInvoiceResponse,
    UpcomingInvoiceError,
    TData
  >(
    queryKeyFn({
      path: "/api/settings/billing/upcoming_invoice",
      operationId: "upcomingInvoice",
      variables,
    }),
    () => fetchUpcomingInvoice({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type HasInvoicesError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type HasInvoicesResponse = {
  has_invoices: boolean;
};

export type HasInvoicesVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Return whether the account has any invoices
 */
export const fetchHasInvoices = (variables: HasInvoicesVariables) =>
  usabilityhubFetch<
    HasInvoicesResponse,
    HasInvoicesError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/settings/billing/has_invoices", method: "get", ...variables });

/**
 * Return whether the account has any invoices
 */
export const useHasInvoices = <TData = HasInvoicesResponse,>(
  variables: HasInvoicesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<HasInvoicesResponse, HasInvoicesError, TData>,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<HasInvoicesResponse, HasInvoicesError, TData>(
    queryKeyFn({
      path: "/api/settings/billing/has_invoices",
      operationId: "hasInvoices",
      variables,
    }),
    () => fetchHasInvoices({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CreateVariationSetError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type CreateVariationSetResponse = {
  test_set: {
    id: number;
    unique_id: string;
  };
};

export type CreateVariationSetRequestBody = {
  name: string;
  usability_test_ids?: number[];
};

export type CreateVariationSetVariables = {
  body: CreateVariationSetRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create a variation set.
 */
export const fetchCreateVariationSet = (
  variables: CreateVariationSetVariables,
) =>
  usabilityhubFetch<
    CreateVariationSetResponse,
    CreateVariationSetError,
    CreateVariationSetRequestBody,
    {},
    {},
    {}
  >({ url: "/api/test_sets", method: "post", ...variables });

/**
 * Create a variation set.
 */
export const useCreateVariationSet = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CreateVariationSetResponse,
      CreateVariationSetError,
      CreateVariationSetVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CreateVariationSetResponse,
    CreateVariationSetError,
    CreateVariationSetVariables
  >(
    (variables: CreateVariationSetVariables) =>
      fetchCreateVariationSet({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListVariationSetsQueryParams = {
  /**
   * Determine which attribute to order results
   */
  sort_by: "created_at" | "updated_at" | "name";
  /**
   * Whether to sort the sets ascending or descending
   */
  sort_direction: "asc" | "desc";
  /**
   * Return only sets where the name includes this string (case insensitive)
   */
  search?: string;
  /**
   * Pass the value of the previous call's next_page to retrieve further pages
   */
  cursor?: string;
};

export type ListVariationSetsError = Fetcher.ErrorWrapper<undefined>;

export type ListVariationSetsResponse = {
  variation_sets: {
    id: number;
    unique_id: string;
    name: string;
    status: "Ready" | "Recruiting" | "Complete";
    status_tags: string[];
    usability_tests: Schemas.VariationSetUsabilityTest[];
  }[];
  next_page: string | null;
  /**
   * @minimum 0
   */
  total_records: number;
};

export type ListVariationSetsVariables = {
  queryParams: ListVariationSetsQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get variation sets of current account
 */
export const fetchListVariationSets = (variables: ListVariationSetsVariables) =>
  usabilityhubFetch<
    ListVariationSetsResponse,
    ListVariationSetsError,
    undefined,
    {},
    ListVariationSetsQueryParams,
    {}
  >({ url: "/api/test_sets/variation_sets", method: "get", ...variables });

/**
 * Get variation sets of current account
 */
export const useListVariationSets = <TData = ListVariationSetsResponse,>(
  variables: ListVariationSetsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListVariationSetsResponse,
      ListVariationSetsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListVariationSetsResponse,
    ListVariationSetsError,
    TData
  >(
    queryKeyFn({
      path: "/api/test_sets/variation_sets",
      operationId: "listVariationSets",
      variables,
    }),
    () => fetchListVariationSets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type DeleteVariationSetPathParams = {
  uniqueId: string;
};

export type DeleteVariationSetError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type DeleteVariationSetVariables = {
  pathParams: DeleteVariationSetPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Deletes a variation set
 */
export const fetchDeleteVariationSet = (
  variables: DeleteVariationSetVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    DeleteVariationSetError,
    undefined,
    {},
    {},
    DeleteVariationSetPathParams
  >({ url: "/api/test_sets/{uniqueId}", method: "delete", ...variables });

/**
 * Deletes a variation set
 */
export const useDeleteVariationSet = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeleteVariationSetError,
      DeleteVariationSetVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeleteVariationSetError,
    DeleteVariationSetVariables
  >(
    (variables: DeleteVariationSetVariables) =>
      fetchDeleteVariationSet({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AddTestToTestSetPathParams = {
  uniqueId: string;
};

export type AddTestToTestSetError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type AddTestToTestSetRequestBody = {
  usability_test_id: number;
};

export type AddTestToTestSetVariables = {
  body: AddTestToTestSetRequestBody;
  pathParams: AddTestToTestSetPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Adds the usability test to the provided test set.
 */
export const fetchAddTestToTestSet = (variables: AddTestToTestSetVariables) =>
  usabilityhubFetch<
    Responses.R204,
    AddTestToTestSetError,
    AddTestToTestSetRequestBody,
    {},
    {},
    AddTestToTestSetPathParams
  >({
    url: "/api/test_sets/{uniqueId}/add_test",
    method: "post",
    ...variables,
  });

/**
 * Adds the usability test to the provided test set.
 */
export const useAddTestToTestSet = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AddTestToTestSetError,
      AddTestToTestSetVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AddTestToTestSetError,
    AddTestToTestSetVariables
  >(
    (variables: AddTestToTestSetVariables) =>
      fetchAddTestToTestSet({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type PreviewTestSetPathParams = {
  uniqueId: string;
};

export type PreviewTestSetError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type PreviewTestSetVariables = {
  pathParams: PreviewTestSetPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Retrieve preview information for a random usability test from the provided set
 */
export const fetchPreviewTestSet = (variables: PreviewTestSetVariables) =>
  usabilityhubFetch<
    Schemas.UsabilityTestResponseFlow,
    PreviewTestSetError,
    undefined,
    {},
    {},
    PreviewTestSetPathParams
  >({ url: "/api/test_sets/{uniqueId}/preview", method: "get", ...variables });

/**
 * Retrieve preview information for a random usability test from the provided set
 */
export const usePreviewTestSet = <TData = Schemas.UsabilityTestResponseFlow,>(
  variables: PreviewTestSetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UsabilityTestResponseFlow,
      PreviewTestSetError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.UsabilityTestResponseFlow,
    PreviewTestSetError,
    TData
  >(
    queryKeyFn({
      path: "/api/test_sets/{unique_id}/preview",
      operationId: "previewTestSet",
      variables,
    }),
    () => fetchPreviewTestSet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type RemoveTestFromTestSetPathParams = {
  uniqueId: string;
};

export type RemoveTestFromTestSetError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type RemoveTestFromTestSetRequestBody = {
  usability_test_id: number;
};

export type RemoveTestFromTestSetVariables = {
  body: RemoveTestFromTestSetRequestBody;
  pathParams: RemoveTestFromTestSetPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Removes the usability test from the provided test set.
 */
export const fetchRemoveTestFromTestSet = (
  variables: RemoveTestFromTestSetVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    RemoveTestFromTestSetError,
    RemoveTestFromTestSetRequestBody,
    {},
    {},
    RemoveTestFromTestSetPathParams
  >({
    url: "/api/test_sets/{uniqueId}/remove_test",
    method: "delete",
    ...variables,
  });

/**
 * Removes the usability test from the provided test set.
 */
export const useRemoveTestFromTestSet = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      RemoveTestFromTestSetError,
      RemoveTestFromTestSetVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    RemoveTestFromTestSetError,
    RemoveTestFromTestSetVariables
  >(
    (variables: RemoveTestFromTestSetVariables) =>
      fetchRemoveTestFromTestSet({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type RenameVariationSetPathParams = {
  uniqueId: string;
};

export type RenameVariationSetError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type RenameVariationSetRequestBody = {
  name: string;
};

export type RenameVariationSetVariables = {
  body: RenameVariationSetRequestBody;
  pathParams: RenameVariationSetPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Renames a variation set
 */
export const fetchRenameVariationSet = (
  variables: RenameVariationSetVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    RenameVariationSetError,
    RenameVariationSetRequestBody,
    {},
    {},
    RenameVariationSetPathParams
  >({ url: "/api/test_sets/{uniqueId}/rename", method: "patch", ...variables });

/**
 * Renames a variation set
 */
export const useRenameVariationSet = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      RenameVariationSetError,
      RenameVariationSetVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    RenameVariationSetError,
    RenameVariationSetVariables
  >(
    (variables: RenameVariationSetVariables) =>
      fetchRenameVariationSet({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetVariationSetPathParams = {
  uniqueId: string;
};

export type GetVariationSetError = Fetcher.ErrorWrapper<undefined>;

export type GetVariationSetResponse = {
  variation_set: Schemas.VariationSet;
};

export type GetVariationSetVariables = {
  pathParams: GetVariationSetPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Gets variation set by unique_id
 */
export const fetchGetVariationSet = (variables: GetVariationSetVariables) =>
  usabilityhubFetch<
    GetVariationSetResponse,
    GetVariationSetError,
    undefined,
    {},
    {},
    GetVariationSetPathParams
  >({
    url: "/api/test_sets/{uniqueId}/variation_set",
    method: "get",
    ...variables,
  });

/**
 * Gets variation set by unique_id
 */
export const useGetVariationSet = <TData = GetVariationSetResponse,>(
  variables: GetVariationSetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetVariationSetResponse,
      GetVariationSetError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetVariationSetResponse,
    GetVariationSetError,
    TData
  >(
    queryKeyFn({
      path: "/api/test_sets/{unique_id}/variation_set",
      operationId: "getVariationSet",
      variables,
    }),
    () => fetchGetVariationSet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ScreenThirdPartyPanelistError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type ScreenThirdPartyPanelistRequestBody = {
  id: number;
  demographics: {
    country: string | null;
    age: number | null;
    demographic_attribute_option_ids: number[];
  };
};

export type ScreenThirdPartyPanelistVariables = {
  body: ScreenThirdPartyPanelistRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Screen third party panelists
 */
export const fetchScreenThirdPartyPanelist = (
  variables: ScreenThirdPartyPanelistVariables,
) =>
  usabilityhubFetch<
    | {
        redirect_url: string;
      }
    | Responses.R204,
    ScreenThirdPartyPanelistError,
    ScreenThirdPartyPanelistRequestBody,
    {},
    {},
    {}
  >({ url: "/api/third_party_orders/screen", method: "post", ...variables });

/**
 * Screen third party panelists
 */
export const useScreenThirdPartyPanelist = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      | {
          redirect_url: string;
        }
      | Responses.R204,
      ScreenThirdPartyPanelistError,
      ScreenThirdPartyPanelistVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    | {
        redirect_url: string;
      }
    | Responses.R204,
    ScreenThirdPartyPanelistError,
    ScreenThirdPartyPanelistVariables
  >(
    (variables: ScreenThirdPartyPanelistVariables) =>
      fetchScreenThirdPartyPanelist({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CreateThirdPartyOrderError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type CreateThirdPartyOrderResponse = {
  id: number;
  purchase?: {
    credit_count: number;
    price_in_cents: number;
  };
};

export type CreateThirdPartyOrderRequestBody = {
  usability_test_unique_id: string;
  requested_response_count: number;
  min_age: number | null;
  max_age: number | null;
  country_codes: string[];
  demographic_attribute_option_ids: number[];
};

export type CreateThirdPartyOrderVariables = {
  body: CreateThirdPartyOrderRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create a third party order
 */
export const fetchCreateThirdPartyOrder = (
  variables: CreateThirdPartyOrderVariables,
) =>
  usabilityhubFetch<
    CreateThirdPartyOrderResponse,
    CreateThirdPartyOrderError,
    CreateThirdPartyOrderRequestBody,
    {},
    {},
    {}
  >({ url: "/api/third_party_orders", method: "post", ...variables });

/**
 * Create a third party order
 */
export const useCreateThirdPartyOrder = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CreateThirdPartyOrderResponse,
      CreateThirdPartyOrderError,
      CreateThirdPartyOrderVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CreateThirdPartyOrderResponse,
    CreateThirdPartyOrderError,
    CreateThirdPartyOrderVariables
  >(
    (variables: CreateThirdPartyOrderVariables) =>
      fetchCreateThirdPartyOrder({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CalculateThirdPartyOrderPriceError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type CalculateThirdPartyOrderPriceRequestBody = {
  usability_test_unique_id: string;
  requested_response_count: number;
  min_age: number | null;
  max_age: number | null;
  country_codes: string[];
  demographic_attribute_option_ids: number[];
};

export type CalculateThirdPartyOrderPriceVariables = {
  body: CalculateThirdPartyOrderPriceRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Calculate the price for a third party order
 */
export const fetchCalculateThirdPartyOrderPrice = (
  variables: CalculateThirdPartyOrderPriceVariables,
) =>
  usabilityhubFetch<
    Schemas.ThirdPartyOrderQuote,
    CalculateThirdPartyOrderPriceError,
    CalculateThirdPartyOrderPriceRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/third_party_orders/calculate_price",
    method: "post",
    ...variables,
  });

/**
 * Calculate the price for a third party order
 */
export const useCalculateThirdPartyOrderPrice = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ThirdPartyOrderQuote,
      CalculateThirdPartyOrderPriceError,
      CalculateThirdPartyOrderPriceVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.ThirdPartyOrderQuote,
    CalculateThirdPartyOrderPriceError,
    CalculateThirdPartyOrderPriceVariables
  >(
    (variables: CalculateThirdPartyOrderPriceVariables) =>
      fetchCalculateThirdPartyOrderPrice({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListFilterOptionsQueryParams = {
  /**
   * Determine which attribute to order results
   */
  sort_by?: "created_at" | "updated_at" | "name";
  /**
   * Whether to sort the sets ascending or descending
   */
  sort_direction?: "asc" | "desc";
  /**
   * The filter to fetch
   */
  filter: "projects" | "variation_sets" | "usability_tests";
  /**
   * An optional space ID to filter by
   */
  space_id?: string;
  /**
   * A comma-separated list of scopes to apply to the filter, if any
   */
  scopes?: string;
  /**
   * The string to search (case insensitive)
   */
  search?: string;
  /**
   * Pass the value of the previous call's next_page to retrieve further pages
   */
  cursor?: string;
  /**
   * Whether to enable pagination
   */
  pagination?: boolean;
};

export type ListFilterOptionsError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type ListFilterOptionsResponse = {
  options: Schemas.FilterOptionWithName[];
  next_page: string | null;
  total_records: number;
};

export type ListFilterOptionsVariables = {
  queryParams: ListFilterOptionsQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get filter options of the required filter for current account
 */
export const fetchListFilterOptions = (variables: ListFilterOptionsVariables) =>
  usabilityhubFetch<
    ListFilterOptionsResponse,
    ListFilterOptionsError,
    undefined,
    {},
    ListFilterOptionsQueryParams,
    {}
  >({ url: "/api/filters/options", method: "get", ...variables });

/**
 * Get filter options of the required filter for current account
 */
export const useListFilterOptions = <TData = ListFilterOptionsResponse,>(
  variables: ListFilterOptionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListFilterOptionsResponse,
      ListFilterOptionsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListFilterOptionsResponse,
    ListFilterOptionsError,
    TData
  >(
    queryKeyFn({
      path: "/api/filters/options",
      operationId: "listFilterOptions",
      variables,
    }),
    () => fetchListFilterOptions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UsabilityTestNewQueryParams = {
  name?: string;
  template?: string;
  test_set_id?: number;
};

export type UsabilityTestNewError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type UsabilityTestNewVariables = {
  queryParams?: UsabilityTestNewQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Data for the new usability test page
 */
export const fetchUsabilityTestNew = (variables: UsabilityTestNewVariables) =>
  usabilityhubFetch<
    Record<string, any>,
    UsabilityTestNewError,
    undefined,
    {},
    UsabilityTestNewQueryParams,
    {}
  >({ url: "/api/usability_tests/new", method: "get", ...variables });

/**
 * Data for the new usability test page
 */
export const useUsabilityTestNew = <TData = Record<string, any>,>(
  variables: UsabilityTestNewVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Record<string, any>,
      UsabilityTestNewError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<Record<string, any>, UsabilityTestNewError, TData>(
    queryKeyFn({
      path: "/api/usability_tests/new",
      operationId: "usabilityTestNew",
      variables,
    }),
    () => fetchUsabilityTestNew({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CreateUsabilityTestError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type CreateUsabilityTestVariables = {
  body: Schemas.UsabilityTestCreateUpdateRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create a usability test
 */
export const fetchCreateUsabilityTest = (
  variables: CreateUsabilityTestVariables,
) =>
  usabilityhubFetch<
    Schemas.UsabilityTestCreateUpdateResponseBody,
    CreateUsabilityTestError,
    Schemas.UsabilityTestCreateUpdateRequestBody,
    {},
    {},
    {}
  >({ url: "/api/usability_tests/create", method: "post", ...variables });

/**
 * Create a usability test
 */
export const useCreateUsabilityTest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UsabilityTestCreateUpdateResponseBody,
      CreateUsabilityTestError,
      CreateUsabilityTestVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.UsabilityTestCreateUpdateResponseBody,
    CreateUsabilityTestError,
    CreateUsabilityTestVariables
  >(
    (variables: CreateUsabilityTestVariables) =>
      fetchCreateUsabilityTest({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UpdateUsabilityTestPathParams = {
  usabilityTestId: string;
};

export type UpdateUsabilityTestError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UpdateUsabilityTestVariables = {
  body: Schemas.UsabilityTestCreateUpdateRequestBody;
  pathParams: UpdateUsabilityTestPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update a usability test
 */
export const fetchUpdateUsabilityTest = (
  variables: UpdateUsabilityTestVariables,
) =>
  usabilityhubFetch<
    Schemas.UsabilityTestCreateUpdateResponseBody,
    UpdateUsabilityTestError,
    Schemas.UsabilityTestCreateUpdateRequestBody,
    {},
    {},
    UpdateUsabilityTestPathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}",
    method: "patch",
    ...variables,
  });

/**
 * Update a usability test
 */
export const useUpdateUsabilityTest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UsabilityTestCreateUpdateResponseBody,
      UpdateUsabilityTestError,
      UpdateUsabilityTestVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.UsabilityTestCreateUpdateResponseBody,
    UpdateUsabilityTestError,
    UpdateUsabilityTestVariables
  >(
    (variables: UpdateUsabilityTestVariables) =>
      fetchUpdateUsabilityTest({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DeleteUsabilityTestPathParams = {
  usabilityTestId: string;
};

export type DeleteUsabilityTestError = Fetcher.ErrorWrapper<undefined>;

export type DeleteUsabilityTestResponse = {
  refund_point_count: number;
};

export type DeleteUsabilityTestVariables = {
  pathParams: DeleteUsabilityTestPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Delete a usability test
 */
export const fetchDeleteUsabilityTest = (
  variables: DeleteUsabilityTestVariables,
) =>
  usabilityhubFetch<
    DeleteUsabilityTestResponse,
    DeleteUsabilityTestError,
    undefined,
    {},
    {},
    DeleteUsabilityTestPathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}",
    method: "delete",
    ...variables,
  });

/**
 * Delete a usability test
 */
export const useDeleteUsabilityTest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteUsabilityTestResponse,
      DeleteUsabilityTestError,
      DeleteUsabilityTestVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    DeleteUsabilityTestResponse,
    DeleteUsabilityTestError,
    DeleteUsabilityTestVariables
  >(
    (variables: DeleteUsabilityTestVariables) =>
      fetchDeleteUsabilityTest({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UsabilityTestEditPathParams = {
  usabilityTestId: string;
};

export type UsabilityTestEditError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UsabilityTestEditVariables = {
  pathParams: UsabilityTestEditPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Data for editing a usability test
 */
export const fetchUsabilityTestEdit = (variables: UsabilityTestEditVariables) =>
  usabilityhubFetch<
    Record<string, any>,
    UsabilityTestEditError,
    undefined,
    {},
    {},
    UsabilityTestEditPathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/edit",
    method: "get",
    ...variables,
  });

/**
 * Data for editing a usability test
 */
export const useUsabilityTestEdit = <TData = Record<string, any>,>(
  variables: UsabilityTestEditVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Record<string, any>,
      UsabilityTestEditError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Record<string, any>,
    UsabilityTestEditError,
    TData
  >(
    queryKeyFn({
      path: "/api/usability_tests/{usability_test_id}/edit",
      operationId: "usabilityTestEdit",
      variables,
    }),
    () => fetchUsabilityTestEdit({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UsabilityTestEnableShareLinkPathParams = {
  usabilityTestId: number;
};

export type UsabilityTestEnableShareLinkError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.R403;
}>;

export type UsabilityTestEnableShareLinkVariables = {
  pathParams: UsabilityTestEnableShareLinkPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Enable the share link of a Usability Test
 */
export const fetchUsabilityTestEnableShareLink = (
  variables: UsabilityTestEnableShareLinkVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UsabilityTestEnableShareLinkError,
    undefined,
    {},
    {},
    UsabilityTestEnableShareLinkPathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/enable_share_link",
    method: "post",
    ...variables,
  });

/**
 * Enable the share link of a Usability Test
 */
export const useUsabilityTestEnableShareLink = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UsabilityTestEnableShareLinkError,
      UsabilityTestEnableShareLinkVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UsabilityTestEnableShareLinkError,
    UsabilityTestEnableShareLinkVariables
  >(
    (variables: UsabilityTestEnableShareLinkVariables) =>
      fetchUsabilityTestEnableShareLink({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UsabilityTestDisableShareLinkPathParams = {
  usabilityTestId: number;
};

export type UsabilityTestDisableShareLinkError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.R403;
}>;

export type UsabilityTestDisableShareLinkVariables = {
  pathParams: UsabilityTestDisableShareLinkPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Disable the share link of a Usability Test
 */
export const fetchUsabilityTestDisableShareLink = (
  variables: UsabilityTestDisableShareLinkVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UsabilityTestDisableShareLinkError,
    undefined,
    {},
    {},
    UsabilityTestDisableShareLinkPathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/disable_share_link",
    method: "post",
    ...variables,
  });

/**
 * Disable the share link of a Usability Test
 */
export const useUsabilityTestDisableShareLink = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UsabilityTestDisableShareLinkError,
      UsabilityTestDisableShareLinkVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UsabilityTestDisableShareLinkError,
    UsabilityTestDisableShareLinkVariables
  >(
    (variables: UsabilityTestDisableShareLinkVariables) =>
      fetchUsabilityTestDisableShareLink({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type PreviewUsabilityTestPathParams = {
  usabilityTestUniqueId: string;
};

export type PreviewUsabilityTestError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type PreviewUsabilityTestVariables = {
  pathParams: PreviewUsabilityTestPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Retrieve flow information to preview a usability test
 */
export const fetchPreviewUsabilityTest = (
  variables: PreviewUsabilityTestVariables,
) =>
  usabilityhubFetch<
    Schemas.UsabilityTestResponseFlow,
    PreviewUsabilityTestError,
    undefined,
    {},
    {},
    PreviewUsabilityTestPathParams
  >({
    url: "/api/usability_tests/{usabilityTestUniqueId}/preview",
    method: "get",
    ...variables,
  });

/**
 * Retrieve flow information to preview a usability test
 */
export const usePreviewUsabilityTest = <
  TData = Schemas.UsabilityTestResponseFlow,
>(
  variables: PreviewUsabilityTestVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UsabilityTestResponseFlow,
      PreviewUsabilityTestError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.UsabilityTestResponseFlow,
    PreviewUsabilityTestError,
    TData
  >(
    queryKeyFn({
      path: "/api/usability_tests/{usability_test_unique_id}/preview",
      operationId: "previewUsabilityTest",
      variables,
    }),
    () => fetchPreviewUsabilityTest({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type PreviewSubmitScreenerPathParams = {
  usabilityTestUniqueId: string;
};

export type PreviewSubmitScreenerError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type PreviewSubmitScreenerResponse = {
  screened_in: boolean;
  new_flow: Schemas.UsabilityTestResponseFlow;
};

export type PreviewSubmitScreenerVariables = {
  body: Schemas.SubmitScreenerRequestBody;
  pathParams: PreviewSubmitScreenerPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Submit a screener when previewing a usability test
 */
export const fetchPreviewSubmitScreener = (
  variables: PreviewSubmitScreenerVariables,
) =>
  usabilityhubFetch<
    PreviewSubmitScreenerResponse,
    PreviewSubmitScreenerError,
    Schemas.SubmitScreenerRequestBody,
    {},
    {},
    PreviewSubmitScreenerPathParams
  >({
    url: "/api/usability_tests/{usabilityTestUniqueId}/preview/submit_screener",
    method: "post",
    ...variables,
  });

/**
 * Submit a screener when previewing a usability test
 */
export const usePreviewSubmitScreener = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PreviewSubmitScreenerResponse,
      PreviewSubmitScreenerError,
      PreviewSubmitScreenerVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    PreviewSubmitScreenerResponse,
    PreviewSubmitScreenerError,
    PreviewSubmitScreenerVariables
  >(
    (variables: PreviewSubmitScreenerVariables) =>
      fetchPreviewSubmitScreener({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type RatePanelResponsesPathParams = {
  /**
   * The unique_id of the usability test to add a rating to
   */
  usabilityTestUniqueId: string;
};

export type RatePanelResponsesError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type RatePanelResponsesRequestBody = {
  /**
   * @format uuid
   */
  id: string;
  /**
   * @minimum 1
   * @maximum 5
   */
  rating: number;
};

export type RatePanelResponsesVariables = {
  body: RatePanelResponsesRequestBody;
  pathParams: RatePanelResponsesPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Add a CSAT rating for the usability test panel responses
 */
export const fetchRatePanelResponses = (
  variables: RatePanelResponsesVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    RatePanelResponsesError,
    RatePanelResponsesRequestBody,
    {},
    {},
    RatePanelResponsesPathParams
  >({
    url: "/api/usability_tests/{usabilityTestUniqueId}/rate",
    method: "post",
    ...variables,
  });

/**
 * Add a CSAT rating for the usability test panel responses
 */
export const useRatePanelResponses = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      RatePanelResponsesError,
      RatePanelResponsesVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    RatePanelResponsesError,
    RatePanelResponsesVariables
  >(
    (variables: RatePanelResponsesVariables) =>
      fetchRatePanelResponses({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AddPanelResponsesCommentPathParams = {
  /**
   * The unique_id of the usability test to add a rating comment to
   */
  usabilityTestUniqueId: string;
};

export type AddPanelResponsesCommentError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AddPanelResponsesCommentRequestBody = {
  /**
   * @format uuid
   */
  id: string;
  comment: string;
};

export type AddPanelResponsesCommentVariables = {
  body: AddPanelResponsesCommentRequestBody;
  pathParams: AddPanelResponsesCommentPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Add a CSAT rating comment for the usability test panel responses
 */
export const fetchAddPanelResponsesComment = (
  variables: AddPanelResponsesCommentVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    AddPanelResponsesCommentError,
    AddPanelResponsesCommentRequestBody,
    {},
    {},
    AddPanelResponsesCommentPathParams
  >({
    url: "/api/usability_tests/{usabilityTestUniqueId}/add_comment",
    method: "post",
    ...variables,
  });

/**
 * Add a CSAT rating comment for the usability test panel responses
 */
export const useAddPanelResponsesComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AddPanelResponsesCommentError,
      AddPanelResponsesCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AddPanelResponsesCommentError,
    AddPanelResponsesCommentVariables
  >(
    (variables: AddPanelResponsesCommentVariables) =>
      fetchAddPanelResponsesComment({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UsabilityTestOrdersPathParams = {
  usabilityTestId: string;
};

export type UsabilityTestOrdersError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type UsabilityTestOrdersResponse = {
  orders: Schemas.Order[];
  third_party_orders: Schemas.ThirdPartyOrder[];
};

export type UsabilityTestOrdersVariables = {
  pathParams: UsabilityTestOrdersPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get orders for a usability test
 */
export const fetchUsabilityTestOrders = (
  variables: UsabilityTestOrdersVariables,
) =>
  usabilityhubFetch<
    UsabilityTestOrdersResponse,
    UsabilityTestOrdersError,
    undefined,
    {},
    {},
    UsabilityTestOrdersPathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/orders",
    method: "get",
    ...variables,
  });

/**
 * Get orders for a usability test
 */
export const useUsabilityTestOrders = <TData = UsabilityTestOrdersResponse,>(
  variables: UsabilityTestOrdersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsabilityTestOrdersResponse,
      UsabilityTestOrdersError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    UsabilityTestOrdersResponse,
    UsabilityTestOrdersError,
    TData
  >(
    queryKeyFn({
      path: "/api/usability_tests/{usability_test_id}/orders",
      operationId: "usabilityTestOrders",
      variables,
    }),
    () => fetchUsabilityTestOrders({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UsabilityTestRecruitPagePathParams = {
  usabilityTestId: string;
};

export type UsabilityTestRecruitPageError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UsabilityTestRecruitPageResponse = {
  usability_test: {
    id: number;
    unique_id: string;
    upgraded: boolean;
    name: string;
    archived: boolean;
    admin_disabled: boolean;
    customize_thankyou: boolean;
    customize_welcome: boolean;
    has_test_logic: boolean;
    permitted_device_type: "any" | "desktop_only" | "mobile_only";
    last_estimated_duration_upper_minutes: number;
    recruited_response_count: number;
    actual_incidence_rate: number;
    screener_enabled: boolean;
    language_code: string;
    test_recording_types: Schemas.RecordingType[];
    has_live_website_test: boolean;
    has_ai_follow_up: boolean;
    has_agreements: boolean;
  };
};

export type UsabilityTestRecruitPageVariables = {
  pathParams: UsabilityTestRecruitPagePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get data for the Usability Test recruit page
 */
export const fetchUsabilityTestRecruitPage = (
  variables: UsabilityTestRecruitPageVariables,
) =>
  usabilityhubFetch<
    UsabilityTestRecruitPageResponse,
    UsabilityTestRecruitPageError,
    undefined,
    {},
    {},
    UsabilityTestRecruitPagePathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/recruit",
    method: "get",
    ...variables,
  });

/**
 * Get data for the Usability Test recruit page
 */
export const useUsabilityTestRecruitPage = <
  TData = UsabilityTestRecruitPageResponse,
>(
  variables: UsabilityTestRecruitPageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsabilityTestRecruitPageResponse,
      UsabilityTestRecruitPageError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    UsabilityTestRecruitPageResponse,
    UsabilityTestRecruitPageError,
    TData
  >(
    queryKeyFn({
      path: "/api/usability_tests/{usability_test_id}/recruit",
      operationId: "usabilityTestRecruitPage",
      variables,
    }),
    () => fetchUsabilityTestRecruitPage({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UsabilityTestPagePathParams = {
  usabilityTestId: string;
};

export type UsabilityTestPageError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UsabilityTestPageResponse = {
  usability_test: {
    id: number;
    study_id: string;
    unique_id: string;
    upgraded: boolean;
    name: string;
    archived: boolean;
    response_count: number;
    admin_disabled: boolean;
    flagged_for_incorrect_language: boolean;
    /**
     * @format date-time
     */
    created_at: string;
    has_active_third_party_orders: boolean;
    creator?: {
      id: number;
      name: string;
      email?: string;
      avatar_url: string | null;
    } | null;
    project: {
      /**
       * @format uuid
       */
      id: string;
      name: string;
    } | null;
    space: {
      /**
       * @format uuid
       */
      id: string;
      name: string;
    };
    variation_set: {
      id: number;
      unique_id: string;
      name: string;
      tests_count: number;
    } | null;
    is_external_study: boolean;
    is_valid_external_study: boolean;
  };
};

export type UsabilityTestPageVariables = {
  pathParams: UsabilityTestPagePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get data for the Usability Test pages
 */
export const fetchUsabilityTestPage = (variables: UsabilityTestPageVariables) =>
  usabilityhubFetch<
    UsabilityTestPageResponse,
    UsabilityTestPageError,
    undefined,
    {},
    {},
    UsabilityTestPagePathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/page",
    method: "get",
    ...variables,
  });

/**
 * Get data for the Usability Test pages
 */
export const useUsabilityTestPage = <TData = UsabilityTestPageResponse,>(
  variables: UsabilityTestPageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsabilityTestPageResponse,
      UsabilityTestPageError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    UsabilityTestPageResponse,
    UsabilityTestPageError,
    TData
  >(
    queryKeyFn({
      path: "/api/usability_tests/{usability_test_id}/page",
      operationId: "usabilityTestPage",
      variables,
    }),
    () => fetchUsabilityTestPage({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdateFigmaSectionPathParams = {
  usabilityTestId: number;
};

export type UpdateFigmaSectionError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UpdateFigmaSectionRequestBody = {
  section_id: number;
  common_path_names: Record<string, any>;
};

export type UpdateFigmaSectionVariables = {
  body: UpdateFigmaSectionRequestBody;
  pathParams: UpdateFigmaSectionPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update a figma section
 */
export const fetchUpdateFigmaSection = (
  variables: UpdateFigmaSectionVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdateFigmaSectionError,
    UpdateFigmaSectionRequestBody,
    {},
    {},
    UpdateFigmaSectionPathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/figma_section",
    method: "put",
    ...variables,
  });

/**
 * Update a figma section
 */
export const useUpdateFigmaSection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdateFigmaSectionError,
      UpdateFigmaSectionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdateFigmaSectionError,
    UpdateFigmaSectionVariables
  >(
    (variables: UpdateFigmaSectionVariables) =>
      fetchUpdateFigmaSection({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UsabilityTestResultsPathParams = {
  usabilityTestId: string;
};

export type UsabilityTestResultsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type UsabilityTestResultsVariables = {
  pathParams: UsabilityTestResultsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Usability test results
 */
export const fetchUsabilityTestResults = (
  variables: UsabilityTestResultsVariables,
) =>
  usabilityhubFetch<
    Schemas.UsabilityTestResultsData,
    UsabilityTestResultsError,
    undefined,
    {},
    {},
    UsabilityTestResultsPathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/results",
    method: "get",
    ...variables,
  });

/**
 * Usability test results
 */
export const useUsabilityTestResults = <
  TData = Schemas.UsabilityTestResultsData,
>(
  variables: UsabilityTestResultsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UsabilityTestResultsData,
      UsabilityTestResultsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.UsabilityTestResultsData,
    UsabilityTestResultsError,
    TData
  >(
    queryKeyFn({
      path: "/api/usability_tests/{usability_test_id}/results",
      operationId: "usabilityTestResults",
      variables,
    }),
    () => fetchUsabilityTestResults({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type SharedUsabilityTestResultsPathParams = {
  usabilityTestId: string;
  privateId: string;
};

export type SharedUsabilityTestResultsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type SharedUsabilityTestResultsVariables = {
  pathParams: SharedUsabilityTestResultsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Shared usability test results
 */
export const fetchSharedUsabilityTestResults = (
  variables: SharedUsabilityTestResultsVariables,
) =>
  usabilityhubFetch<
    Schemas.UsabilityTestResultsData,
    SharedUsabilityTestResultsError,
    undefined,
    {},
    {},
    SharedUsabilityTestResultsPathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/results/{privateId}",
    method: "get",
    ...variables,
  });

/**
 * Shared usability test results
 */
export const useSharedUsabilityTestResults = <
  TData = Schemas.UsabilityTestResultsData,
>(
  variables: SharedUsabilityTestResultsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UsabilityTestResultsData,
      SharedUsabilityTestResultsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.UsabilityTestResultsData,
    SharedUsabilityTestResultsError,
    TData
  >(
    queryKeyFn({
      path: "/api/usability_tests/{usability_test_id}/results/{private_id}",
      operationId: "sharedUsabilityTestResults",
      variables,
    }),
    () => fetchSharedUsabilityTestResults({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UsabilityTestResultsForSectionPathParams = {
  usabilityTestId: string;
  sectionIndex: number;
};

export type UsabilityTestResultsForSectionError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type UsabilityTestResultsForSectionVariables = {
  pathParams: UsabilityTestResultsForSectionPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Usability test results for a specific section
 */
export const fetchUsabilityTestResultsForSection = (
  variables: UsabilityTestResultsForSectionVariables,
) =>
  usabilityhubFetch<
    Schemas.UsabilityTestResultsData,
    UsabilityTestResultsForSectionError,
    undefined,
    {},
    {},
    UsabilityTestResultsForSectionPathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/results/section/{sectionIndex}",
    method: "get",
    ...variables,
  });

/**
 * Usability test results for a specific section
 */
export const useUsabilityTestResultsForSection = <
  TData = Schemas.UsabilityTestResultsData,
>(
  variables: UsabilityTestResultsForSectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UsabilityTestResultsData,
      UsabilityTestResultsForSectionError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.UsabilityTestResultsData,
    UsabilityTestResultsForSectionError,
    TData
  >(
    queryKeyFn({
      path: "/api/usability_tests/{usability_test_id}/results/section/{section_index}",
      operationId: "usabilityTestResultsForSection",
      variables,
    }),
    () =>
      fetchUsabilityTestResultsForSection({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ArchiveUsabilityTestPathParams = {
  usabilityTestId: string;
};

export type ArchiveUsabilityTestError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type ArchiveUsabilityTestResponse = {
  refund_point_count: number;
};

export type ArchiveUsabilityTestVariables = {
  pathParams: ArchiveUsabilityTestPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * In order to archive the test, this will cancel any active orders and disable the recruitment link. Returns refunded credits.
 */
export const fetchArchiveUsabilityTest = (
  variables: ArchiveUsabilityTestVariables,
) =>
  usabilityhubFetch<
    ArchiveUsabilityTestResponse,
    ArchiveUsabilityTestError,
    undefined,
    {},
    {},
    ArchiveUsabilityTestPathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/archive",
    method: "post",
    ...variables,
  });

/**
 * In order to archive the test, this will cancel any active orders and disable the recruitment link. Returns refunded credits.
 */
export const useArchiveUsabilityTest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ArchiveUsabilityTestResponse,
      ArchiveUsabilityTestError,
      ArchiveUsabilityTestVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    ArchiveUsabilityTestResponse,
    ArchiveUsabilityTestError,
    ArchiveUsabilityTestVariables
  >(
    (variables: ArchiveUsabilityTestVariables) =>
      fetchArchiveUsabilityTest({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DuplicateUsabilityTestPathParams = {
  usabilityTestId: string;
};

export type DuplicateUsabilityTestError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type DuplicateUsabilityTestResponse = {
  unique_id: string;
  tests_by_creator_count: number;
  test_template_name: string | null;
  has_test_logic: boolean;
};

export type DuplicateUsabilityTestRequestBody = {
  name: string;
  /**
   * @format uuid
   */
  project_id: string;
  test_set_id?: number;
};

export type DuplicateUsabilityTestVariables = {
  body: DuplicateUsabilityTestRequestBody;
  pathParams: DuplicateUsabilityTestPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Duplicate a usability test
 */
export const fetchDuplicateUsabilityTest = (
  variables: DuplicateUsabilityTestVariables,
) =>
  usabilityhubFetch<
    DuplicateUsabilityTestResponse,
    DuplicateUsabilityTestError,
    DuplicateUsabilityTestRequestBody,
    {},
    {},
    DuplicateUsabilityTestPathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/duplicate",
    method: "post",
    ...variables,
  });

/**
 * Duplicate a usability test
 */
export const useDuplicateUsabilityTest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DuplicateUsabilityTestResponse,
      DuplicateUsabilityTestError,
      DuplicateUsabilityTestVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    DuplicateUsabilityTestResponse,
    DuplicateUsabilityTestError,
    DuplicateUsabilityTestVariables
  >(
    (variables: DuplicateUsabilityTestVariables) =>
      fetchDuplicateUsabilityTest({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type RenameUsabilityTestPathParams = {
  /**
   * ID of the usability test to rename
   */
  usabilityTestId: number;
};

export type RenameUsabilityTestError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type RenameUsabilityTestRequestBody = {
  name: string;
};

export type RenameUsabilityTestVariables = {
  body: RenameUsabilityTestRequestBody;
  pathParams: RenameUsabilityTestPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Rename a usability test
 */
export const fetchRenameUsabilityTest = (
  variables: RenameUsabilityTestVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    RenameUsabilityTestError,
    RenameUsabilityTestRequestBody,
    {},
    {},
    RenameUsabilityTestPathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/rename",
    method: "patch",
    ...variables,
  });

/**
 * Rename a usability test
 */
export const useRenameUsabilityTest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      RenameUsabilityTestError,
      RenameUsabilityTestVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    RenameUsabilityTestError,
    RenameUsabilityTestVariables
  >(
    (variables: RenameUsabilityTestVariables) =>
      fetchRenameUsabilityTest({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UnarchiveUsabilityTestPathParams = {
  usabilityTestId: number;
};

export type UnarchiveUsabilityTestError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type UnarchiveUsabilityTestVariables = {
  pathParams: UnarchiveUsabilityTestPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Unarchive a test
 */
export const fetchUnarchiveUsabilityTest = (
  variables: UnarchiveUsabilityTestVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UnarchiveUsabilityTestError,
    undefined,
    {},
    {},
    UnarchiveUsabilityTestPathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/unarchive",
    method: "post",
    ...variables,
  });

/**
 * Unarchive a test
 */
export const useUnarchiveUsabilityTest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UnarchiveUsabilityTestError,
      UnarchiveUsabilityTestVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UnarchiveUsabilityTestError,
    UnarchiveUsabilityTestVariables
  >(
    (variables: UnarchiveUsabilityTestVariables) =>
      fetchUnarchiveUsabilityTest({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListUsabilityTestsQueryParams = {
  /**
   * Pass the value of the previous call's next_page to retrieve further pages
   */
  cursor?: string;
  /**
   * Sort results by this field
   */
  sort_by: "updated_at" | "name" | "created_at";
  /**
   * Sort order ascending or descending
   */
  sort_direction: "asc" | "desc";
  /**
   * Return only tests where the name includes this string (case insensitive)
   */
  search?: string;
};

export type ListUsabilityTestsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type ListUsabilityTestsResponse = {
  usability_tests: Schemas.DashboardUsabilityTest[];
  next_page: string | null;
  total_records: number;
};

export type ListUsabilityTestsRequestBody = {
  filters?: Schemas.UsabilityTestFilter[];
};

export type ListUsabilityTestsVariables = {
  body?: ListUsabilityTestsRequestBody;
  queryParams: ListUsabilityTestsQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns a paginated list of all visible usability tests (ie in the current account), filterable and sortable in various ways.
 */
export const fetchListUsabilityTests = (
  variables: ListUsabilityTestsVariables,
) =>
  usabilityhubFetch<
    ListUsabilityTestsResponse,
    ListUsabilityTestsError,
    ListUsabilityTestsRequestBody,
    {},
    ListUsabilityTestsQueryParams,
    {}
  >({ url: "/api/usability_tests", method: "post", ...variables });

/**
 * Returns a paginated list of all visible usability tests (ie in the current account), filterable and sortable in various ways.
 */
export const useListUsabilityTests = <TData = ListUsabilityTestsResponse,>(
  variables: ListUsabilityTestsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListUsabilityTestsResponse,
      ListUsabilityTestsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListUsabilityTestsResponse,
    ListUsabilityTestsError,
    TData
  >(
    queryKeyFn({
      path: "/api/usability_tests",
      operationId: "listUsabilityTests",
      variables,
    }),
    () => fetchListUsabilityTests({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ExportUsabilityTestResultsPathParams = {
  usabilityTestId: string;
  privateId: string;
};

export type ExportUsabilityTestResultsError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type ExportUsabilityTestResultsRequestBody = {
  response_ids: number[] | null;
};

export type ExportUsabilityTestResultsVariables = {
  body: ExportUsabilityTestResultsRequestBody;
  pathParams: ExportUsabilityTestResultsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Export results for a Usability Test
 */
export const fetchExportUsabilityTestResults = (
  variables: ExportUsabilityTestResultsVariables,
) =>
  usabilityhubFetch<
    undefined,
    ExportUsabilityTestResultsError,
    ExportUsabilityTestResultsRequestBody,
    {},
    {},
    ExportUsabilityTestResultsPathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/{privateId}/export_results",
    method: "post",
    ...variables,
  });

/**
 * Export results for a Usability Test
 */
export const useExportUsabilityTestResults = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ExportUsabilityTestResultsError,
      ExportUsabilityTestResultsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    undefined,
    ExportUsabilityTestResultsError,
    ExportUsabilityTestResultsVariables
  >(
    (variables: ExportUsabilityTestResultsVariables) =>
      fetchExportUsabilityTestResults({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetAggregatedTreeTestResultsPathParams = {
  usabilityTestId: string;
  privateId: string;
  sectionId: number;
};

export type GetAggregatedTreeTestResultsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type GetAggregatedTreeTestResultsResponse = {
  nodes: Schemas.TreeTestNode[];
  links: Schemas.TreeTestLink[];
};

export type GetAggregatedTreeTestResultsRequestBody = {
  filtered_response_ids?: number[];
};

export type GetAggregatedTreeTestResultsVariables = {
  body?: GetAggregatedTreeTestResultsRequestBody;
  pathParams: GetAggregatedTreeTestResultsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get aggregated results for the selected tree test
 */
export const fetchGetAggregatedTreeTestResults = (
  variables: GetAggregatedTreeTestResultsVariables,
) =>
  usabilityhubFetch<
    GetAggregatedTreeTestResultsResponse,
    GetAggregatedTreeTestResultsError,
    GetAggregatedTreeTestResultsRequestBody,
    {},
    {},
    GetAggregatedTreeTestResultsPathParams
  >({
    url: "/api/tests/{usabilityTestId}/results/{privateId}/sections/{sectionId}/tree_testing/aggregated",
    method: "post",
    ...variables,
  });

/**
 * Get aggregated results for the selected tree test
 */
export const useGetAggregatedTreeTestResults = <
  TData = GetAggregatedTreeTestResultsResponse,
>(
  variables: GetAggregatedTreeTestResultsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetAggregatedTreeTestResultsResponse,
      GetAggregatedTreeTestResultsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetAggregatedTreeTestResultsResponse,
    GetAggregatedTreeTestResultsError,
    TData
  >(
    queryKeyFn({
      path: "/api/tests/{usability_test_id}/results/{private_id}/sections/{section_id}/tree_testing/aggregated",
      operationId: "getAggregatedTreeTestResults",
      variables,
    }),
    () =>
      fetchGetAggregatedTreeTestResults({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CreateOrUpdateResultsSummaryPathParams = {
  id: string;
};

export type CreateOrUpdateResultsSummaryError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type CreateOrUpdateResultsSummaryVariables = {
  body: Schemas.ResultsSummary;
  pathParams: CreateOrUpdateResultsSummaryPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create or update a results summary
 */
export const fetchCreateOrUpdateResultsSummary = (
  variables: CreateOrUpdateResultsSummaryVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    CreateOrUpdateResultsSummaryError,
    Schemas.ResultsSummary,
    {},
    {},
    CreateOrUpdateResultsSummaryPathParams
  >({ url: "/api/results_summaries/{id}", method: "post", ...variables });

/**
 * Create or update a results summary
 */
export const useCreateOrUpdateResultsSummary = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      CreateOrUpdateResultsSummaryError,
      CreateOrUpdateResultsSummaryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    CreateOrUpdateResultsSummaryError,
    CreateOrUpdateResultsSummaryVariables
  >(
    (variables: CreateOrUpdateResultsSummaryVariables) =>
      fetchCreateOrUpdateResultsSummary({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DeleteResultsSummaryPathParams = {
  id: string;
};

export type DeleteResultsSummaryError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type DeleteResultsSummaryVariables = {
  pathParams: DeleteResultsSummaryPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Delete a results summary
 */
export const fetchDeleteResultsSummary = (
  variables: DeleteResultsSummaryVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    DeleteResultsSummaryError,
    undefined,
    {},
    {},
    DeleteResultsSummaryPathParams
  >({ url: "/api/results_summaries/{id}", method: "delete", ...variables });

/**
 * Delete a results summary
 */
export const useDeleteResultsSummary = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeleteResultsSummaryError,
      DeleteResultsSummaryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeleteResultsSummaryError,
    DeleteResultsSummaryVariables
  >(
    (variables: DeleteResultsSummaryVariables) =>
      fetchDeleteResultsSummary({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AddAiInteractionFeedbackPathParams = {
  id: string;
};

export type AddAiInteractionFeedbackError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AddAiInteractionFeedbackRequestBody = {
  liked: boolean;
  reason: string | null;
};

export type AddAiInteractionFeedbackVariables = {
  body: AddAiInteractionFeedbackRequestBody;
  pathParams: AddAiInteractionFeedbackPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Add feedback for an AI interaction
 */
export const fetchAddAiInteractionFeedback = (
  variables: AddAiInteractionFeedbackVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    AddAiInteractionFeedbackError,
    AddAiInteractionFeedbackRequestBody,
    {},
    {},
    AddAiInteractionFeedbackPathParams
  >({
    url: "/api/results_summaries/{id}/add_feedback",
    method: "post",
    ...variables,
  });

/**
 * Add feedback for an AI interaction
 */
export const useAddAiInteractionFeedback = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      AddAiInteractionFeedbackError,
      AddAiInteractionFeedbackVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    AddAiInteractionFeedbackError,
    AddAiInteractionFeedbackVariables
  >(
    (variables: AddAiInteractionFeedbackVariables) =>
      fetchAddAiInteractionFeedback({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GenerateResultsSummaryError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        code:
          | "token_quota_exceeded"
          | "free_plan_summary_limit_reached"
          | "not_enough_data"
          | "invalid_content";
      };
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type GenerateResultsSummaryResponse = {
  ai_interaction_id: string;
};

export type GenerateResultsSummaryRequestBody = {
  question_id: number;
  regenerating: boolean;
  conversation_id: string;
};

export type GenerateResultsSummaryVariables = {
  body: GenerateResultsSummaryRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Generate a results summary
 */
export const fetchGenerateResultsSummary = (
  variables: GenerateResultsSummaryVariables,
) =>
  usabilityhubFetch<
    GenerateResultsSummaryResponse,
    GenerateResultsSummaryError,
    GenerateResultsSummaryRequestBody,
    {},
    {},
    {}
  >({ url: "/api/results_summaries/generate", method: "post", ...variables });

/**
 * Generate a results summary
 */
export const useGenerateResultsSummary = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      GenerateResultsSummaryResponse,
      GenerateResultsSummaryError,
      GenerateResultsSummaryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    GenerateResultsSummaryResponse,
    GenerateResultsSummaryError,
    GenerateResultsSummaryVariables
  >(
    (variables: GenerateResultsSummaryVariables) =>
      fetchGenerateResultsSummary({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminListAiFlowsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AdminListAiFlowsResponse = Schemas.AiFlowListItem[];

export type AdminListAiFlowsVariables = UsabilityhubContext["fetcherOptions"];

/**
 * List saved AI flows
 */
export const fetchAdminListAiFlows = (variables: AdminListAiFlowsVariables) =>
  usabilityhubFetch<
    AdminListAiFlowsResponse,
    AdminListAiFlowsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/admin/ai_flows", method: "get", ...variables });

/**
 * List saved AI flows
 */
export const useAdminListAiFlows = <TData = AdminListAiFlowsResponse,>(
  variables: AdminListAiFlowsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AdminListAiFlowsResponse,
      AdminListAiFlowsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    AdminListAiFlowsResponse,
    AdminListAiFlowsError,
    TData
  >(
    queryKeyFn({
      path: "/api/admin/ai_flows",
      operationId: "adminListAiFlows",
      variables,
    }),
    () => fetchAdminListAiFlows({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type AdminCreateAiFlowError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type AdminCreateAiFlowVariables = {
  body: Schemas.CreateAiFlowRequest;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create a new AI flow
 */
export const fetchAdminCreateAiFlow = (variables: AdminCreateAiFlowVariables) =>
  usabilityhubFetch<
    Responses.CreateAiFlowResponse,
    AdminCreateAiFlowError,
    Schemas.CreateAiFlowRequest,
    {},
    {},
    {}
  >({ url: "/api/admin/ai_flows", method: "post", ...variables });

/**
 * Create a new AI flow
 */
export const useAdminCreateAiFlow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.CreateAiFlowResponse,
      AdminCreateAiFlowError,
      AdminCreateAiFlowVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.CreateAiFlowResponse,
    AdminCreateAiFlowError,
    AdminCreateAiFlowVariables
  >(
    (variables: AdminCreateAiFlowVariables) =>
      fetchAdminCreateAiFlow({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminShowAiFlowPathParams = {
  id: string;
};

export type AdminShowAiFlowError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AdminShowAiFlowVariables = {
  pathParams: AdminShowAiFlowPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Show details of an AI flow
 */
export const fetchAdminShowAiFlow = (variables: AdminShowAiFlowVariables) =>
  usabilityhubFetch<
    Schemas.AiFlow,
    AdminShowAiFlowError,
    undefined,
    {},
    {},
    AdminShowAiFlowPathParams
  >({ url: "/api/admin/ai_flows/{id}", method: "get", ...variables });

/**
 * Show details of an AI flow
 */
export const useAdminShowAiFlow = <TData = Schemas.AiFlow,>(
  variables: AdminShowAiFlowVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.AiFlow, AdminShowAiFlowError, TData>,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<Schemas.AiFlow, AdminShowAiFlowError, TData>(
    queryKeyFn({
      path: "/api/admin/ai_flows/{id}",
      operationId: "adminShowAiFlow",
      variables,
    }),
    () => fetchAdminShowAiFlow({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type AdminRunAiFlowError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type AdminRunAiFlowVariables = {
  body: Schemas.AiFlowRunRequest;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Run an AI flow
 */
export const fetchAdminRunAiFlow = (variables: AdminRunAiFlowVariables) =>
  usabilityhubFetch<
    Responses.AiFlowRunResponse,
    AdminRunAiFlowError,
    Schemas.AiFlowRunRequest,
    {},
    {},
    {}
  >({ url: "/api/admin/ai_flows/run", method: "post", ...variables });

/**
 * Run an AI flow
 */
export const useAdminRunAiFlow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.AiFlowRunResponse,
      AdminRunAiFlowError,
      AdminRunAiFlowVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.AiFlowRunResponse,
    AdminRunAiFlowError,
    AdminRunAiFlowVariables
  >(
    (variables: AdminRunAiFlowVariables) =>
      fetchAdminRunAiFlow({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminListAiFlowBatchRunsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AdminListAiFlowBatchRunsVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * List AI flow batch runs
 */
export const fetchAdminListAiFlowBatchRuns = (
  variables: AdminListAiFlowBatchRunsVariables,
) =>
  usabilityhubFetch<
    Responses.AiFlowBatchRunListResponse,
    AdminListAiFlowBatchRunsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/admin/ai_flows/batch_runs", method: "get", ...variables });

/**
 * List AI flow batch runs
 */
export const useAdminListAiFlowBatchRuns = <
  TData = Responses.AiFlowBatchRunListResponse,
>(
  variables: AdminListAiFlowBatchRunsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Responses.AiFlowBatchRunListResponse,
      AdminListAiFlowBatchRunsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Responses.AiFlowBatchRunListResponse,
    AdminListAiFlowBatchRunsError,
    TData
  >(
    queryKeyFn({
      path: "/api/admin/ai_flows/batch_runs",
      operationId: "adminListAiFlowBatchRuns",
      variables,
    }),
    () => fetchAdminListAiFlowBatchRuns({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type AdminBatchRunAiFlowPathParams = {
  aiFlowId: string;
};

export type AdminBatchRunAiFlowError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AdminBatchRunAiFlowRequestBody = {
  inputs?: {
    flow_id?: string;
    temperature?: number;
  };
};

export type AdminBatchRunAiFlowVariables = {
  body?: AdminBatchRunAiFlowRequestBody;
  pathParams: AdminBatchRunAiFlowPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Batch run an AI flow
 */
export const fetchAdminBatchRunAiFlow = (
  variables: AdminBatchRunAiFlowVariables,
) =>
  usabilityhubFetch<
    Responses.ShowBatchRunResponse,
    AdminBatchRunAiFlowError,
    AdminBatchRunAiFlowRequestBody,
    {},
    {},
    AdminBatchRunAiFlowPathParams
  >({
    url: "/api/admin/ai_flows/{aiFlowId}/batch_runs",
    method: "post",
    ...variables,
  });

/**
 * Batch run an AI flow
 */
export const useAdminBatchRunAiFlow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.ShowBatchRunResponse,
      AdminBatchRunAiFlowError,
      AdminBatchRunAiFlowVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.ShowBatchRunResponse,
    AdminBatchRunAiFlowError,
    AdminBatchRunAiFlowVariables
  >(
    (variables: AdminBatchRunAiFlowVariables) =>
      fetchAdminBatchRunAiFlow({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminShowAiFlowBatchRunPathParams = {
  /**
   * ID of the AI flow to show the batch run for
   */
  aiFlowId: string;
  /**
   * ID of the batch run to show
   */
  runId: string;
};

export type AdminShowAiFlowBatchRunError = Fetcher.ErrorWrapper<undefined>;

export type AdminShowAiFlowBatchRunVariables = {
  pathParams: AdminShowAiFlowBatchRunPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Show details of an AI flow batch run
 */
export const fetchAdminShowAiFlowBatchRun = (
  variables: AdminShowAiFlowBatchRunVariables,
) =>
  usabilityhubFetch<
    Responses.ShowBatchRunResponse,
    AdminShowAiFlowBatchRunError,
    undefined,
    {},
    {},
    AdminShowAiFlowBatchRunPathParams
  >({
    url: "/api/admin/ai_flows/{aiFlowId}/batch_runs/{runId}",
    method: "get",
    ...variables,
  });

/**
 * Show details of an AI flow batch run
 */
export const useAdminShowAiFlowBatchRun = <
  TData = Responses.ShowBatchRunResponse,
>(
  variables: AdminShowAiFlowBatchRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Responses.ShowBatchRunResponse,
      AdminShowAiFlowBatchRunError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Responses.ShowBatchRunResponse,
    AdminShowAiFlowBatchRunError,
    TData
  >(
    queryKeyFn({
      path: "/api/admin/ai_flows/{ai_flow_id}/batch_runs/{run_id}",
      operationId: "adminShowAiFlowBatchRun",
      variables,
    }),
    () => fetchAdminShowAiFlowBatchRun({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type AdminShowAiFlowBatchRunItemPathParams = {
  /**
   * ID of the AI flow to show the batch run for
   */
  aiFlowId: string;
  /**
   * ID of the batch run to show
   */
  runId: string;
  /**
   * ID of the batch run item to show
   */
  itemId: string;
};

export type AdminShowAiFlowBatchRunItemError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type AdminShowAiFlowBatchRunItemVariables = {
  pathParams: AdminShowAiFlowBatchRunItemPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Show details of an AI flow batch run item
 */
export const fetchAdminShowAiFlowBatchRunItem = (
  variables: AdminShowAiFlowBatchRunItemVariables,
) =>
  usabilityhubFetch<
    Responses.ShowBatchRunItemResponse,
    AdminShowAiFlowBatchRunItemError,
    undefined,
    {},
    {},
    AdminShowAiFlowBatchRunItemPathParams
  >({
    url: "/api/admin/ai_flows/{aiFlowId}/batch_runs/{runId}/{itemId}",
    method: "get",
    ...variables,
  });

/**
 * Show details of an AI flow batch run item
 */
export const useAdminShowAiFlowBatchRunItem = <
  TData = Responses.ShowBatchRunItemResponse,
>(
  variables: AdminShowAiFlowBatchRunItemVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Responses.ShowBatchRunItemResponse,
      AdminShowAiFlowBatchRunItemError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Responses.ShowBatchRunItemResponse,
    AdminShowAiFlowBatchRunItemError,
    TData
  >(
    queryKeyFn({
      path: "/api/admin/ai_flows/{ai_flow_id}/batch_runs/{run_id}/{item_id}",
      operationId: "adminShowAiFlowBatchRunItem",
      variables,
    }),
    () => fetchAdminShowAiFlowBatchRunItem({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type AdminRejectPayoutPathParams = {
  id: number;
};

export type AdminRejectPayoutError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type AdminRejectPayoutResponse = {
  was_banned: boolean;
};

export type AdminRejectPayoutRequestBody = {
  send_email: boolean;
};

export type AdminRejectPayoutVariables = {
  body: AdminRejectPayoutRequestBody;
  pathParams: AdminRejectPayoutPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Reject a payout
 */
export const fetchAdminRejectPayout = (variables: AdminRejectPayoutVariables) =>
  usabilityhubFetch<
    AdminRejectPayoutResponse,
    AdminRejectPayoutError,
    AdminRejectPayoutRequestBody,
    {},
    {},
    AdminRejectPayoutPathParams
  >({ url: "/api/admin/payouts/{id}/reject", method: "put", ...variables });

/**
 * Reject a payout
 */
export const useAdminRejectPayout = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      AdminRejectPayoutResponse,
      AdminRejectPayoutError,
      AdminRejectPayoutVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    AdminRejectPayoutResponse,
    AdminRejectPayoutError,
    AdminRejectPayoutVariables
  >(
    (variables: AdminRejectPayoutVariables) =>
      fetchAdminRejectPayout({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminPayoutsOrderPathParams = {
  orderId: number;
};

export type AdminPayoutsOrderError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type AdminPayoutsOrderVariables = {
  pathParams: AdminPayoutsOrderPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Admin usability test results for an order
 */
export const fetchAdminPayoutsOrder = (variables: AdminPayoutsOrderVariables) =>
  usabilityhubFetch<
    Schemas.UsabilityTestResultsData,
    AdminPayoutsOrderError,
    undefined,
    {},
    {},
    AdminPayoutsOrderPathParams
  >({
    url: "/api/admin/payouts/orders/{orderId}",
    method: "get",
    ...variables,
  });

/**
 * Admin usability test results for an order
 */
export const useAdminPayoutsOrder = <TData = Schemas.UsabilityTestResultsData,>(
  variables: AdminPayoutsOrderVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UsabilityTestResultsData,
      AdminPayoutsOrderError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.UsabilityTestResultsData,
    AdminPayoutsOrderError,
    TData
  >(
    queryKeyFn({
      path: "/api/admin/payouts/orders/{order_id}",
      operationId: "adminPayoutsOrder",
      variables,
    }),
    () => fetchAdminPayoutsOrder({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type AdminPayoutsOrderCancelReviewPathParams = {
  orderId: number;
};

export type AdminPayoutsOrderCancelReviewError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type AdminPayoutsOrderCancelReviewRequestBody = {
  reassign: boolean | null;
};

export type AdminPayoutsOrderCancelReviewVariables = {
  body: AdminPayoutsOrderCancelReviewRequestBody;
  pathParams: AdminPayoutsOrderCancelReviewPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Cancel the review of an order
 */
export const fetchAdminPayoutsOrderCancelReview = (
  variables: AdminPayoutsOrderCancelReviewVariables,
) =>
  usabilityhubFetch<
    undefined,
    AdminPayoutsOrderCancelReviewError,
    AdminPayoutsOrderCancelReviewRequestBody,
    {},
    {},
    AdminPayoutsOrderCancelReviewPathParams
  >({
    url: "/api/admin/payouts/orders/{orderId}/cancel_review",
    method: "post",
    ...variables,
  });

/**
 * Cancel the review of an order
 */
export const useAdminPayoutsOrderCancelReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AdminPayoutsOrderCancelReviewError,
      AdminPayoutsOrderCancelReviewVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    undefined,
    AdminPayoutsOrderCancelReviewError,
    AdminPayoutsOrderCancelReviewVariables
  >(
    (variables: AdminPayoutsOrderCancelReviewVariables) =>
      fetchAdminPayoutsOrderCancelReview({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AdminPayoutsOrderReviewResponsesPathParams = {
  orderId: number;
};

export type AdminPayoutsOrderReviewResponsesError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type AdminPayoutsOrderReviewResponsesResponse = {
  next_order_id: number | null;
};

export type AdminPayoutsOrderReviewResponsesRequestBody = {
  data: {
    id: number;
    review_status: number;
  }[];
};

export type AdminPayoutsOrderReviewResponsesVariables = {
  body: AdminPayoutsOrderReviewResponsesRequestBody;
  pathParams: AdminPayoutsOrderReviewResponsesPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Review responses for an order
 */
export const fetchAdminPayoutsOrderReviewResponses = (
  variables: AdminPayoutsOrderReviewResponsesVariables,
) =>
  usabilityhubFetch<
    AdminPayoutsOrderReviewResponsesResponse,
    AdminPayoutsOrderReviewResponsesError,
    AdminPayoutsOrderReviewResponsesRequestBody,
    {},
    {},
    AdminPayoutsOrderReviewResponsesPathParams
  >({
    url: "/api/admin/payouts/orders/{orderId}/review_responses",
    method: "post",
    ...variables,
  });

/**
 * Review responses for an order
 */
export const useAdminPayoutsOrderReviewResponses = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      AdminPayoutsOrderReviewResponsesResponse,
      AdminPayoutsOrderReviewResponsesError,
      AdminPayoutsOrderReviewResponsesVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    AdminPayoutsOrderReviewResponsesResponse,
    AdminPayoutsOrderReviewResponsesError,
    AdminPayoutsOrderReviewResponsesVariables
  >(
    (variables: AdminPayoutsOrderReviewResponsesVariables) =>
      fetchAdminPayoutsOrderReviewResponses({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type AdminPayoutsThirdPartyOrderPathParams = {
  thirdPartyOrderId: number;
};

export type AdminPayoutsThirdPartyOrderError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type AdminPayoutsThirdPartyOrderVariables = {
  pathParams: AdminPayoutsThirdPartyOrderPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Admin usability test results for a third party order
 */
export const fetchAdminPayoutsThirdPartyOrder = (
  variables: AdminPayoutsThirdPartyOrderVariables,
) =>
  usabilityhubFetch<
    Schemas.UsabilityTestResultsData,
    AdminPayoutsThirdPartyOrderError,
    undefined,
    {},
    {},
    AdminPayoutsThirdPartyOrderPathParams
  >({
    url: "/api/admin/payouts/third_party_orders/{thirdPartyOrderId}",
    method: "get",
    ...variables,
  });

/**
 * Admin usability test results for a third party order
 */
export const useAdminPayoutsThirdPartyOrder = <
  TData = Schemas.UsabilityTestResultsData,
>(
  variables: AdminPayoutsThirdPartyOrderVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UsabilityTestResultsData,
      AdminPayoutsThirdPartyOrderError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.UsabilityTestResultsData,
    AdminPayoutsThirdPartyOrderError,
    TData
  >(
    queryKeyFn({
      path: "/api/admin/payouts/third_party_orders/{third_party_order_id}",
      operationId: "adminPayoutsThirdPartyOrder",
      variables,
    }),
    () => fetchAdminPayoutsThirdPartyOrder({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CreateUserError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
>;

export type CreateUserRequestBody = {
  name: string | null;
  email: string;
  role: "admin" | "member" | "guest" | "archived";
};

export type CreateUserVariables = {
  body: CreateUserRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create a new user
 */
export const fetchCreateUser = (variables: CreateUserVariables) =>
  usabilityhubFetch<
    Responses.R204,
    CreateUserError,
    CreateUserRequestBody,
    {},
    {},
    {}
  >({ url: "/api/users", method: "post", ...variables });

/**
 * Create a new user
 */
export const useCreateUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      CreateUserError,
      CreateUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    CreateUserError,
    CreateUserVariables
  >(
    (variables: CreateUserVariables) =>
      fetchCreateUser({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UpdateUserPathParams = {
  userId: number;
};

export type UpdateUserError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R401;
    }
>;

export type UpdateUserResponse = {
  message: string;
  stripe_subscriptions: Schemas.Subscription[];
};

export type UpdateUserRequestBody = {
  avatar?: string;
  email?: string;
  name?: string;
  make_owner?: "true" | "false";
  role?: "admin" | "member" | "guest" | "archived";
};

export type UpdateUserVariables = {
  body?: UpdateUserRequestBody;
  pathParams: UpdateUserPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update a user
 */
export const fetchUpdateUser = (variables: UpdateUserVariables) =>
  usabilityhubFetch<
    UpdateUserResponse,
    UpdateUserError,
    UpdateUserRequestBody,
    {},
    {},
    UpdateUserPathParams
  >({ url: "/api/users/{userId}", method: "put", ...variables });

/**
 * Update a user
 */
export const useUpdateUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      UpdateUserResponse,
      UpdateUserError,
      UpdateUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    UpdateUserResponse,
    UpdateUserError,
    UpdateUserVariables
  >(
    (variables: UpdateUserVariables) =>
      fetchUpdateUser({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DeleteUserPathParams = {
  userId: number;
};

export type DeleteUserError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
>;

export type DeleteUserVariables = {
  pathParams: DeleteUserPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Delete a user
 */
export const fetchDeleteUser = (variables: DeleteUserVariables) =>
  usabilityhubFetch<
    Responses.R204,
    DeleteUserError,
    undefined,
    {},
    {},
    DeleteUserPathParams
  >({ url: "/api/users/{userId}", method: "delete", ...variables });

/**
 * Delete a user
 */
export const useDeleteUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeleteUserError,
      DeleteUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeleteUserError,
    DeleteUserVariables
  >(
    (variables: DeleteUserVariables) =>
      fetchDeleteUser({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type MakeUserOwnerPathParams = {
  userId: number;
};

export type MakeUserOwnerError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
>;

export type MakeUserOwnerResponse = {
  message: string;
};

export type MakeUserOwnerVariables = {
  pathParams: MakeUserOwnerPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Grants ownership of the account to another user
 */
export const fetchMakeUserOwner = (variables: MakeUserOwnerVariables) =>
  usabilityhubFetch<
    MakeUserOwnerResponse,
    MakeUserOwnerError,
    undefined,
    {},
    {},
    MakeUserOwnerPathParams
  >({ url: "/api/users/{userId}/make_owner", method: "put", ...variables });

/**
 * Grants ownership of the account to another user
 */
export const useMakeUserOwner = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      MakeUserOwnerResponse,
      MakeUserOwnerError,
      MakeUserOwnerVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    MakeUserOwnerResponse,
    MakeUserOwnerError,
    MakeUserOwnerVariables
  >(
    (variables: MakeUserOwnerVariables) =>
      fetchMakeUserOwner({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type TaxStatusError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type TaxStatusResponse = {
  id_required: boolean;
};

export type TaxStatusVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Get information about the users Tax status
 */
export const fetchTaxStatus = (variables: TaxStatusVariables) =>
  usabilityhubFetch<TaxStatusResponse, TaxStatusError, undefined, {}, {}, {}>({
    url: "/api/users/tax_status",
    method: "get",
    ...variables,
  });

/**
 * Get information about the users Tax status
 */
export const useTaxStatus = <TData = TaxStatusResponse,>(
  variables: TaxStatusVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<TaxStatusResponse, TaxStatusError, TData>,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<TaxStatusResponse, TaxStatusError, TData>(
    queryKeyFn({
      path: "/api/users/tax_status",
      operationId: "taxStatus",
      variables,
    }),
    () => fetchTaxStatus({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetUsabilityTestResponseFlowPathParams = {
  responseId: number;
};

export type GetUsabilityTestResponseFlowError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type GetUsabilityTestResponseFlowVariables = {
  pathParams: GetUsabilityTestResponseFlowPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Retrieve information about the current response flow for a usability test
 */
export const fetchGetUsabilityTestResponseFlow = (
  variables: GetUsabilityTestResponseFlowVariables,
) =>
  usabilityhubFetch<
    Schemas.UsabilityTestResponseFlow,
    GetUsabilityTestResponseFlowError,
    undefined,
    {},
    {},
    GetUsabilityTestResponseFlowPathParams
  >({ url: "/api/responses/{responseId}", method: "get", ...variables });

/**
 * Retrieve information about the current response flow for a usability test
 */
export const useGetUsabilityTestResponseFlow = <
  TData = Schemas.UsabilityTestResponseFlow,
>(
  variables: GetUsabilityTestResponseFlowVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UsabilityTestResponseFlow,
      GetUsabilityTestResponseFlowError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.UsabilityTestResponseFlow,
    GetUsabilityTestResponseFlowError,
    TData
  >(
    queryKeyFn({
      path: "/api/responses/{response_id}",
      operationId: "getUsabilityTestResponseFlow",
      variables,
    }),
    () =>
      fetchGetUsabilityTestResponseFlow({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type DeleteResponsePathParams = {
  responseId: number;
};

export type DeleteResponseError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        code: "invalid";
      };
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type DeleteResponseResponse = {
  will_replace_response: boolean;
};

export type DeleteResponseRequestBody = {
  deletion_reason: Schemas.OwnerDeletionReason;
};

export type DeleteResponseVariables = {
  body: DeleteResponseRequestBody;
  pathParams: DeleteResponsePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Delete a response
 */
export const fetchDeleteResponse = (variables: DeleteResponseVariables) =>
  usabilityhubFetch<
    DeleteResponseResponse,
    DeleteResponseError,
    DeleteResponseRequestBody,
    {},
    {},
    DeleteResponsePathParams
  >({ url: "/api/responses/{responseId}", method: "delete", ...variables });

/**
 * Delete a response
 */
export const useDeleteResponse = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteResponseResponse,
      DeleteResponseError,
      DeleteResponseVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    DeleteResponseResponse,
    DeleteResponseError,
    DeleteResponseVariables
  >(
    (variables: DeleteResponseVariables) =>
      fetchDeleteResponse({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ResponsesStartScreenerPathParams = {
  responseId: number;
};

export type ResponsesStartScreenerError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type ResponsesStartScreenerResponse = {
  /**
   * @format uuid
   */
  screener_response_id: string;
};

export type ResponsesStartScreenerVariables = {
  pathParams: ResponsesStartScreenerPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Start a screener for a usability test response
 */
export const fetchResponsesStartScreener = (
  variables: ResponsesStartScreenerVariables,
) =>
  usabilityhubFetch<
    ResponsesStartScreenerResponse,
    ResponsesStartScreenerError,
    undefined,
    {},
    {},
    ResponsesStartScreenerPathParams
  >({
    url: "/api/responses/{responseId}/start_screener",
    method: "post",
    ...variables,
  });

/**
 * Start a screener for a usability test response
 */
export const useResponsesStartScreener = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ResponsesStartScreenerResponse,
      ResponsesStartScreenerError,
      ResponsesStartScreenerVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    ResponsesStartScreenerResponse,
    ResponsesStartScreenerError,
    ResponsesStartScreenerVariables
  >(
    (variables: ResponsesStartScreenerVariables) =>
      fetchResponsesStartScreener({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ResponsesSubmitScreenerPathParams = {
  responseId: number;
};

export type ResponsesSubmitScreenerError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type ResponsesSubmitScreenerResponse = {
  screened_in: boolean;
  screened_out_credits: number | null;
};

export type ResponsesSubmitScreenerVariables = {
  body: Schemas.SubmitScreenerRequestBody;
  pathParams: ResponsesSubmitScreenerPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Submit a screener for a usability test response
 */
export const fetchResponsesSubmitScreener = (
  variables: ResponsesSubmitScreenerVariables,
) =>
  usabilityhubFetch<
    ResponsesSubmitScreenerResponse,
    ResponsesSubmitScreenerError,
    Schemas.SubmitScreenerRequestBody,
    {},
    {},
    ResponsesSubmitScreenerPathParams
  >({
    url: "/api/responses/{responseId}/submit_screener",
    method: "post",
    ...variables,
  });

/**
 * Submit a screener for a usability test response
 */
export const useResponsesSubmitScreener = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ResponsesSubmitScreenerResponse,
      ResponsesSubmitScreenerError,
      ResponsesSubmitScreenerVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    ResponsesSubmitScreenerResponse,
    ResponsesSubmitScreenerError,
    ResponsesSubmitScreenerVariables
  >(
    (variables: ResponsesSubmitScreenerVariables) =>
      fetchResponsesSubmitScreener({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ResponsesSubmitAgreementPathParams = {
  responseId: number;
};

export type ResponsesSubmitAgreementError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type ResponsesSubmitAgreementVariables = {
  pathParams: ResponsesSubmitAgreementPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Confirm an agreement for a usability test response
 */
export const fetchResponsesSubmitAgreement = (
  variables: ResponsesSubmitAgreementVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    ResponsesSubmitAgreementError,
    undefined,
    {},
    {},
    ResponsesSubmitAgreementPathParams
  >({
    url: "/api/responses/{responseId}/submit_agreement",
    method: "post",
    ...variables,
  });

/**
 * Confirm an agreement for a usability test response
 */
export const useResponsesSubmitAgreement = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      ResponsesSubmitAgreementError,
      ResponsesSubmitAgreementVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    ResponsesSubmitAgreementError,
    ResponsesSubmitAgreementVariables
  >(
    (variables: ResponsesSubmitAgreementVariables) =>
      fetchResponsesSubmitAgreement({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CancelResponsePathParams = {
  responseId: number;
};

export type CancelResponseError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type CancelResponseResponse = {
  response: {
    deleted_at: string;
    deletion_reason: Schemas.ResponseDeletionReason;
    submitted_at: string;
  };
};

export type CancelResponseRequestBody = {
  deletion_reason: Schemas.ResponseDeletionReason;
};

export type CancelResponseVariables = {
  body: CancelResponseRequestBody;
  pathParams: CancelResponsePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Cancel a test response
 */
export const fetchCancelResponse = (variables: CancelResponseVariables) =>
  usabilityhubFetch<
    CancelResponseResponse,
    CancelResponseError,
    CancelResponseRequestBody,
    {},
    {},
    CancelResponsePathParams
  >({ url: "/api/responses/{responseId}/cancel", method: "put", ...variables });

/**
 * Cancel a test response
 */
export const useCancelResponse = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CancelResponseResponse,
      CancelResponseError,
      CancelResponseVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CancelResponseResponse,
    CancelResponseError,
    CancelResponseVariables
  >(
    (variables: CancelResponseVariables) =>
      fetchCancelResponse({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CompleteResponsePathParams = {
  responseId: number;
};

export type CompleteResponseError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        code:
          | "already_submitted"
          | "user_not_permitted_to_take_tests"
          | "response_timed_out"
          | "response_deleted"
          | "test_deleted"
          | "missing_recordings";
      };
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type CompleteResponseResponse = {
  response: {
    id: number;
    /**
     * @format date-time
     */
    deleted_at: string | null;
    deletion_reason: Schemas.ResponseDeletionReason;
    duration_ms: number;
    estimated_duration_ms: number;
    order_id: number | null;
    review_status: string | null;
    /**
     * @format date-time
     */
    submitted_at: string;
    third_party_order_id: number | null;
    usability_test_id: number;
    user_id: number | null;
    idle_timeout_ms: number | null;
    keepalive_interval_ms: number | null;
    answers: {
      id: number;
      usability_test_section_question_id: number;
      response_id: number;
      duration_ms: number;
      answer: string;
      answers: string[];
    }[];
    screenshot_clicks: {
      id: number;
      usability_test_section_screenshot_id: number;
      response_id: number;
      x: number;
      y: number;
      hit: boolean | null;
      duration_ms: number;
    }[];
    sections: {
      id: number;
      response_id: number;
      usability_test_section_id: number;
      instructions_duration_ms: number;
      task_duration_ms: number;
      total_duration_ms: number;
      selected_usability_test_section_screenshot_id: number | null;
    }[];
  };
  assignments: Schemas.PanelOrderAssignment[];
  credits_earned: number;
  profile_completeness: number;
};

export type CompleteResponseRequestBody = {
  response: {
    duration_ms: number | null;
    response_demographic_profile?: {
      age: number | null;
      country: string | null;
      demographic_attribute_option_ids: number[];
    };
    answers: {
      usability_test_section_question_id: number;
      duration_ms: number | null;
      answer: string | null;
      answers: string[];
      answer_tags: Schemas.AnswerTag[];
      paste_detected: boolean;
      response_answer_follow_ups:
        | {
            content?: string;
            role?: "user" | "assistant";
          }[]
        | null;
    }[];
    sections: {
      usability_test_section_id: number | null;
      instructions_duration_ms: number | null;
      task_duration_ms: number | null;
      total_duration_ms: number | null;
      selected_usability_test_section_screenshot_id: number | null;
      recording_ids: string[] | null;
      figma_file_version_answer: {
        figma_file_version_id: number | null;
        task_result: string | null;
        data: Record<string, any>[];
      } | null;
      card_sort_categories_cards_attributes:
        | {
            card_sort_card_id: number;
            card_sort_category_id: number | null;
            position_within_category: number;
            sort_time_ms: number;
          }[]
        | null;
      card_sort_open_categories_attributes:
        | {
            label: string;
            card_sort_categories_cards_attributes:
              | {
                  card_sort_card_id: number;
                  card_sort_category_id: number | null;
                  position_within_category: number;
                  sort_time_ms: number;
                }[]
              | null;
          }[]
        | null;
      tree_test_clicks:
        | {
            node_id: string | null;
            milliseconds: number;
          }[]
        | null;
      response_section_live_website_test_tasks:
        | {
            live_website_test_task_id?: string;
            duration_ms?: number;
            recording_ids?: string[] | null;
          }[]
        | null;
    }[];
    screenshot_clicks: {
      usability_test_section_screenshot_id: number;
      x: number;
      y: number;
      hit: boolean | null;
      duration_ms: number;
    }[];
  };
  device: {
    width: number;
    height: number;
  };
};

export type CompleteResponseVariables = {
  body: CompleteResponseRequestBody;
  pathParams: CompleteResponsePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Completes a response for a participant.
 */
export const fetchCompleteResponse = (variables: CompleteResponseVariables) =>
  usabilityhubFetch<
    CompleteResponseResponse,
    CompleteResponseError,
    CompleteResponseRequestBody,
    {},
    {},
    CompleteResponsePathParams
  >({
    url: "/api/participants/responses/{responseId}/complete",
    method: "put",
    ...variables,
  });

/**
 * Completes a response for a participant.
 */
export const useCompleteResponse = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CompleteResponseResponse,
      CompleteResponseError,
      CompleteResponseVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CompleteResponseResponse,
    CompleteResponseError,
    CompleteResponseVariables
  >(
    (variables: CompleteResponseVariables) =>
      fetchCompleteResponse({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ImportTreeTestTreeError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type ImportTreeTestTreeResponse = {
  tree_id?: number;
  line_count?: number;
};

export type ImportTreeTestTreeRequestBody = {
  tree_id?: string | null;
};

export type ImportTreeTestTreeVariables = {
  body?: ImportTreeTestTreeRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Import tree test tree
 */
export const fetchImportTreeTestTree = (
  variables: ImportTreeTestTreeVariables,
) =>
  usabilityhubFetch<
    ImportTreeTestTreeResponse,
    ImportTreeTestTreeError,
    ImportTreeTestTreeRequestBody,
    {},
    {},
    {}
  >({ url: "/api/tree_testing/trees", method: "post", ...variables });

/**
 * Import tree test tree
 */
export const useImportTreeTestTree = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ImportTreeTestTreeResponse,
      ImportTreeTestTreeError,
      ImportTreeTestTreeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    ImportTreeTestTreeResponse,
    ImportTreeTestTreeError,
    ImportTreeTestTreeVariables
  >(
    (variables: ImportTreeTestTreeVariables) =>
      fetchImportTreeTestTree({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetTreeTestTreePathParams = {
  id: string;
};

export type GetTreeTestTreeError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type GetTreeTestTreeResponse = {
  id: string;
  name: string;
  description?: string;
  nodes: {
    id: string;
    label: string;
    parent_id: string | null;
    left: number;
    right: number;
    depth: number;
  }[];
};

export type GetTreeTestTreeVariables = {
  pathParams: GetTreeTestTreePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get tree test tree
 */
export const fetchGetTreeTestTree = (variables: GetTreeTestTreeVariables) =>
  usabilityhubFetch<
    GetTreeTestTreeResponse,
    GetTreeTestTreeError,
    undefined,
    {},
    {},
    GetTreeTestTreePathParams
  >({ url: "/api/tree_testing/trees/{id}", method: "get", ...variables });

/**
 * Get tree test tree
 */
export const useGetTreeTestTree = <TData = GetTreeTestTreeResponse,>(
  variables: GetTreeTestTreeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetTreeTestTreeResponse,
      GetTreeTestTreeError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetTreeTestTreeResponse,
    GetTreeTestTreeError,
    TData
  >(
    queryKeyFn({
      path: "/api/tree_testing/trees/{id}",
      operationId: "getTreeTestTree",
      variables,
    }),
    () => fetchGetTreeTestTree({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetExperimentsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type GetExperimentsResponse = {
  [key: string]: any;
};

export type GetExperimentsVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Gets all Ordeal experiments for the current user
 */
export const fetchGetExperiments = (variables: GetExperimentsVariables) =>
  usabilityhubFetch<
    GetExperimentsResponse,
    GetExperimentsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/ordeal", method: "get", ...variables });

/**
 * Gets all Ordeal experiments for the current user
 */
export const useGetExperiments = <TData = GetExperimentsResponse,>(
  variables: GetExperimentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetExperimentsResponse,
      GetExperimentsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetExperimentsResponse,
    GetExperimentsError,
    TData
  >(
    queryKeyFn({
      path: "/api/ordeal",
      operationId: "getExperiments",
      variables,
    }),
    () => fetchGetExperiments({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetOrdealExperimentsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type GetOrdealExperimentsResponse = Schemas.OrdealExperiment[];

export type GetOrdealExperimentsVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Gets all Ordeal experiments
 */
export const fetchGetOrdealExperiments = (
  variables: GetOrdealExperimentsVariables,
) =>
  usabilityhubFetch<
    GetOrdealExperimentsResponse,
    GetOrdealExperimentsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/admin/ordeal/api/experiments", method: "get", ...variables });

/**
 * Gets all Ordeal experiments
 */
export const useGetOrdealExperiments = <TData = GetOrdealExperimentsResponse,>(
  variables: GetOrdealExperimentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetOrdealExperimentsResponse,
      GetOrdealExperimentsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetOrdealExperimentsResponse,
    GetOrdealExperimentsError,
    TData
  >(
    queryKeyFn({
      path: "/admin/ordeal/api/experiments",
      operationId: "getOrdealExperiments",
      variables,
    }),
    () => fetchGetOrdealExperiments({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type StartOrdealExperimentPathParams = {
  experimentId: string;
};

export type StartOrdealExperimentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type StartOrdealExperimentVariables = {
  pathParams: StartOrdealExperimentPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Starts an Ordeal experiment
 */
export const fetchStartOrdealExperiment = (
  variables: StartOrdealExperimentVariables,
) =>
  usabilityhubFetch<
    Schemas.OrdealExperiment,
    StartOrdealExperimentError,
    undefined,
    {},
    {},
    StartOrdealExperimentPathParams
  >({
    url: "/admin/ordeal/api/experiments/{experimentId}/start",
    method: "post",
    ...variables,
  });

/**
 * Starts an Ordeal experiment
 */
export const useStartOrdealExperiment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrdealExperiment,
      StartOrdealExperimentError,
      StartOrdealExperimentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.OrdealExperiment,
    StartOrdealExperimentError,
    StartOrdealExperimentVariables
  >(
    (variables: StartOrdealExperimentVariables) =>
      fetchStartOrdealExperiment({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type FinishOrdealExperimentPathParams = {
  experimentId: string;
};

export type FinishOrdealExperimentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type FinishOrdealExperimentVariables = {
  pathParams: FinishOrdealExperimentPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Stops an Ordeal experiment
 */
export const fetchFinishOrdealExperiment = (
  variables: FinishOrdealExperimentVariables,
) =>
  usabilityhubFetch<
    Schemas.OrdealExperiment,
    FinishOrdealExperimentError,
    undefined,
    {},
    {},
    FinishOrdealExperimentPathParams
  >({
    url: "/admin/ordeal/api/experiments/{experimentId}/finish",
    method: "post",
    ...variables,
  });

/**
 * Stops an Ordeal experiment
 */
export const useFinishOrdealExperiment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrdealExperiment,
      FinishOrdealExperimentError,
      FinishOrdealExperimentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.OrdealExperiment,
    FinishOrdealExperimentError,
    FinishOrdealExperimentVariables
  >(
    (variables: FinishOrdealExperimentVariables) =>
      fetchFinishOrdealExperiment({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type PinOrdealExperimentVariantPathParams = {
  experimentId: string;
};

export type PinOrdealExperimentVariantError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type PinOrdealExperimentVariantRequestBody = {
  variant: string | null;
};

export type PinOrdealExperimentVariantVariables = {
  body: PinOrdealExperimentVariantRequestBody;
  pathParams: PinOrdealExperimentVariantPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Pins an Ordeal experiment variant
 */
export const fetchPinOrdealExperimentVariant = (
  variables: PinOrdealExperimentVariantVariables,
) =>
  usabilityhubFetch<
    Schemas.OrdealExperiment,
    PinOrdealExperimentVariantError,
    PinOrdealExperimentVariantRequestBody,
    {},
    {},
    PinOrdealExperimentVariantPathParams
  >({
    url: "/admin/ordeal/api/experiments/{experimentId}/pin",
    method: "post",
    ...variables,
  });

/**
 * Pins an Ordeal experiment variant
 */
export const usePinOrdealExperimentVariant = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrdealExperiment,
      PinOrdealExperimentVariantError,
      PinOrdealExperimentVariantVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.OrdealExperiment,
    PinOrdealExperimentVariantError,
    PinOrdealExperimentVariantVariables
  >(
    (variables: PinOrdealExperimentVariantVariables) =>
      fetchPinOrdealExperimentVariant({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListDemographicPresetsError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type ListDemographicPresetsResponse = Schemas.DemographicPreset[];

export type ListDemographicPresetsVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Return all demographic presets for the current account
 */
export const fetchListDemographicPresets = (
  variables: ListDemographicPresetsVariables,
) =>
  usabilityhubFetch<
    ListDemographicPresetsResponse,
    ListDemographicPresetsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/demographic_presets", method: "get", ...variables });

/**
 * Return all demographic presets for the current account
 */
export const useListDemographicPresets = <
  TData = ListDemographicPresetsResponse,
>(
  variables: ListDemographicPresetsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListDemographicPresetsResponse,
      ListDemographicPresetsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListDemographicPresetsResponse,
    ListDemographicPresetsError,
    TData
  >(
    queryKeyFn({
      path: "/api/demographic_presets",
      operationId: "listDemographicPresets",
      variables,
    }),
    () => fetchListDemographicPresets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CreateDemographicPresetError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type CreateDemographicPresetVariables = {
  body: Schemas.DemographicPresetRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Creates a demographic preset in the current account
 */
export const fetchCreateDemographicPreset = (
  variables: CreateDemographicPresetVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    CreateDemographicPresetError,
    Schemas.DemographicPresetRequestBody,
    {},
    {},
    {}
  >({ url: "/api/demographic_presets", method: "post", ...variables });

/**
 * Creates a demographic preset in the current account
 */
export const useCreateDemographicPreset = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      CreateDemographicPresetError,
      CreateDemographicPresetVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    CreateDemographicPresetError,
    CreateDemographicPresetVariables
  >(
    (variables: CreateDemographicPresetVariables) =>
      fetchCreateDemographicPreset({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UpdateDemographicPresetPathParams = {
  id: string;
};

export type UpdateDemographicPresetError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UpdateDemographicPresetVariables = {
  body: Schemas.DemographicPresetRequestBody;
  pathParams: UpdateDemographicPresetPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Updates a demographic preset
 */
export const fetchUpdateDemographicPreset = (
  variables: UpdateDemographicPresetVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdateDemographicPresetError,
    Schemas.DemographicPresetRequestBody,
    {},
    {},
    UpdateDemographicPresetPathParams
  >({ url: "/api/demographic_presets/{id}", method: "patch", ...variables });

/**
 * Updates a demographic preset
 */
export const useUpdateDemographicPreset = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdateDemographicPresetError,
      UpdateDemographicPresetVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdateDemographicPresetError,
    UpdateDemographicPresetVariables
  >(
    (variables: UpdateDemographicPresetVariables) =>
      fetchUpdateDemographicPreset({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DestroyDemographicPresetPathParams = {
  id: string;
};

export type DestroyDemographicPresetError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type DestroyDemographicPresetVariables = {
  pathParams: DestroyDemographicPresetPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Destroys a demographic preset
 */
export const fetchDestroyDemographicPreset = (
  variables: DestroyDemographicPresetVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    DestroyDemographicPresetError,
    undefined,
    {},
    {},
    DestroyDemographicPresetPathParams
  >({ url: "/api/demographic_presets/{id}", method: "delete", ...variables });

/**
 * Destroys a demographic preset
 */
export const useDestroyDemographicPreset = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DestroyDemographicPresetError,
      DestroyDemographicPresetVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DestroyDemographicPresetError,
    DestroyDemographicPresetVariables
  >(
    (variables: DestroyDemographicPresetVariables) =>
      fetchDestroyDemographicPreset({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetDashboardNewError = Fetcher.ErrorWrapper<undefined>;

export type GetDashboardNewResponse = {
  projects: Schemas.NewProject[];
  usabilityTests: Schemas.DashboardUsabilityTest[];
};

export type GetDashboardNewVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Returns projects and usability tests for the dashboard
 */
export const fetchGetDashboardNew = (variables: GetDashboardNewVariables) =>
  usabilityhubFetch<
    GetDashboardNewResponse,
    GetDashboardNewError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/dashboard_new", method: "get", ...variables });

/**
 * Returns projects and usability tests for the dashboard
 */
export const useGetDashboardNew = <TData = GetDashboardNewResponse,>(
  variables: GetDashboardNewVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetDashboardNewResponse,
      GetDashboardNewError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetDashboardNewResponse,
    GetDashboardNewError,
    TData
  >(
    queryKeyFn({
      path: "/api/dashboard_new",
      operationId: "getDashboardNew",
      variables,
    }),
    () => fetchGetDashboardNew({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetTestBuilderPathParams = {
  /**
   * ID of the usability test to edit, if any
   */
  usabilityTestUniqueId: string;
};

export type GetTestBuilderError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type GetTestBuilderResponse = {
  projects: string[];
  comments: Schemas.Comment[];
};

export type GetTestBuilderVariables = {
  pathParams: GetTestBuilderPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * The aim is for this endpoint to eventually become a BFF endpoint serving the test builder for both new and existing tests.  We'll gradually add necessary data to it until it can replace the current ReduxHelper situation.
 */
export const fetchGetTestBuilder = (variables: GetTestBuilderVariables) =>
  usabilityhubFetch<
    GetTestBuilderResponse,
    GetTestBuilderError,
    undefined,
    {},
    {},
    GetTestBuilderPathParams
  >({
    url: "/api/test_builder/{usabilityTestUniqueId}",
    method: "get",
    ...variables,
  });

/**
 * The aim is for this endpoint to eventually become a BFF endpoint serving the test builder for both new and existing tests.  We'll gradually add necessary data to it until it can replace the current ReduxHelper situation.
 */
export const useGetTestBuilder = <TData = GetTestBuilderResponse,>(
  variables: GetTestBuilderVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetTestBuilderResponse,
      GetTestBuilderError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetTestBuilderResponse,
    GetTestBuilderError,
    TData
  >(
    queryKeyFn({
      path: "/api/test_builder/{usability_test_unique_id}",
      operationId: "getTestBuilder",
      variables,
    }),
    () => fetchGetTestBuilder({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ListCommentsQueryParams = {
  /**
   * Which model to get comments for (e.g. `usability_test`, `interview`)
   */
  model?: Schemas.CommentModel;
  /**
   * The ID of the specific model to look up
   */
  model_id?: string;
  /**
   * The context to filter by
   */
  context?: string;
};

export type ListCommentsError = Fetcher.ErrorWrapper<undefined>;

export type ListCommentsResponse = {
  comments: Schemas.Comment[];
};

export type ListCommentsVariables = {
  queryParams?: ListCommentsQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Lists all comments, optionally filtered by a model / model_id / context combination.
 */
export const fetchListComments = (variables: ListCommentsVariables) =>
  usabilityhubFetch<
    ListCommentsResponse,
    ListCommentsError,
    undefined,
    {},
    ListCommentsQueryParams,
    {}
  >({ url: "/api/comments", method: "get", ...variables });

/**
 * Lists all comments, optionally filtered by a model / model_id / context combination.
 */
export const useListComments = <TData = ListCommentsResponse,>(
  variables: ListCommentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<ListCommentsResponse, ListCommentsError, TData>,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<ListCommentsResponse, ListCommentsError, TData>(
    queryKeyFn({
      path: "/api/comments",
      operationId: "listComments",
      variables,
    }),
    () => fetchListComments({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type PostAddCommentError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type PostAddCommentRequestBody = {
  /**
   * @format uuid
   */
  id: string;
  model: "usability_test";
  model_id: string;
  context: "test_builder" | "test_results";
  entity_type: string;
  entity_id: string | null;
  content: string;
};

export type PostAddCommentVariables = {
  body: PostAddCommentRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Creates a new comment on the given test + context + entity combination. Note that the IDs for these are UUIDs, and can be generated on the client and passed through.
 */
export const fetchPostAddComment = (variables: PostAddCommentVariables) =>
  usabilityhubFetch<
    Record<string, any>,
    PostAddCommentError,
    PostAddCommentRequestBody,
    {},
    {},
    {}
  >({ url: "/api/comments", method: "post", ...variables });

/**
 * Creates a new comment on the given test + context + entity combination. Note that the IDs for these are UUIDs, and can be generated on the client and passed through.
 */
export const usePostAddComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Record<string, any>,
      PostAddCommentError,
      PostAddCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Record<string, any>,
    PostAddCommentError,
    PostAddCommentVariables
  >(
    (variables: PostAddCommentVariables) =>
      fetchPostAddComment({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type PostCommentsMarkAsReadError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type PostCommentsMarkAsReadResponse = {
  comment_ids: string[];
};

export type PostCommentsMarkAsReadRequestBody = {
  /**
   * @format uuid
   */
  comment_ids: string[];
};

export type PostCommentsMarkAsReadVariables = {
  body: PostCommentsMarkAsReadRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Takes an array of comment IDs and marks them all as read for the current user
 */
export const fetchPostCommentsMarkAsRead = (
  variables: PostCommentsMarkAsReadVariables,
) =>
  usabilityhubFetch<
    PostCommentsMarkAsReadResponse,
    PostCommentsMarkAsReadError,
    PostCommentsMarkAsReadRequestBody,
    {},
    {},
    {}
  >({ url: "/api/comments/mark_as_read", method: "post", ...variables });

/**
 * Takes an array of comment IDs and marks them all as read for the current user
 */
export const usePostCommentsMarkAsRead = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostCommentsMarkAsReadResponse,
      PostCommentsMarkAsReadError,
      PostCommentsMarkAsReadVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    PostCommentsMarkAsReadResponse,
    PostCommentsMarkAsReadError,
    PostCommentsMarkAsReadVariables
  >(
    (variables: PostCommentsMarkAsReadVariables) =>
      fetchPostCommentsMarkAsRead({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DeleteCommentsPathParams = {
  /**
   * @format uuid
   */
  commentId: string;
};

export type DeleteCommentsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type DeleteCommentsResponse = {
  /**
   * @format date-time
   */
  deleted_at: string;
};

export type DeleteCommentsVariables = {
  pathParams: DeleteCommentsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Deletes a comment given its UUID.
 */
export const fetchDeleteComments = (variables: DeleteCommentsVariables) =>
  usabilityhubFetch<
    DeleteCommentsResponse,
    DeleteCommentsError,
    undefined,
    {},
    {},
    DeleteCommentsPathParams
  >({ url: "/api/comments/{commentId}", method: "delete", ...variables });

/**
 * Deletes a comment given its UUID.
 */
export const useDeleteComments = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteCommentsResponse,
      DeleteCommentsError,
      DeleteCommentsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    DeleteCommentsResponse,
    DeleteCommentsError,
    DeleteCommentsVariables
  >(
    (variables: DeleteCommentsVariables) =>
      fetchDeleteComments({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type PutCommentsPathParams = {
  /**
   * @format uuid
   */
  commentId: string;
};

export type PutCommentsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type PutCommentsResponse = {
  /**
   * @format date-time
   */
  last_edited_at: string;
};

export type PutCommentsRequestBody = {
  content: string;
};

export type PutCommentsVariables = {
  body: PutCommentsRequestBody;
  pathParams: PutCommentsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Updates a comment given its UUID.
 */
export const fetchPutComments = (variables: PutCommentsVariables) =>
  usabilityhubFetch<
    PutCommentsResponse,
    PutCommentsError,
    PutCommentsRequestBody,
    {},
    {},
    PutCommentsPathParams
  >({ url: "/api/comments/{commentId}", method: "put", ...variables });

/**
 * Updates a comment given its UUID.
 */
export const usePutComments = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutCommentsResponse,
      PutCommentsError,
      PutCommentsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    PutCommentsResponse,
    PutCommentsError,
    PutCommentsVariables
  >(
    (variables: PutCommentsVariables) =>
      fetchPutComments({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListTargetableLocationsPathParams = {
  scope: "usability_tests" | "interviews";
};

export type ListTargetableLocationsError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type ListTargetableLocationsResponse = {
  locations: {
    code: string;
    name: string;
    states: {
      id: number;
      short_name: string;
      long_name: string;
      cities: {
        id: number;
        short_name: string;
        long_name: string;
      }[];
    }[];
  }[];
};

export type ListTargetableLocationsVariables = {
  pathParams: ListTargetableLocationsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns a nested structure with all locations that can be targeted for a panel order
 */
export const fetchListTargetableLocations = (
  variables: ListTargetableLocationsVariables,
) =>
  usabilityhubFetch<
    ListTargetableLocationsResponse,
    ListTargetableLocationsError,
    undefined,
    {},
    {},
    ListTargetableLocationsPathParams
  >({ url: "/api/targetable_locations/{scope}", method: "get", ...variables });

/**
 * Returns a nested structure with all locations that can be targeted for a panel order
 */
export const useListTargetableLocations = <
  TData = ListTargetableLocationsResponse,
>(
  variables: ListTargetableLocationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListTargetableLocationsResponse,
      ListTargetableLocationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListTargetableLocationsResponse,
    ListTargetableLocationsError,
    TData
  >(
    queryKeyFn({
      path: "/api/targetable_locations/{scope}",
      operationId: "listTargetableLocations",
      variables,
    }),
    () => fetchListTargetableLocations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetIntegrationsError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type GetIntegrationsResponse = {
  figma?: {
    /**
     * @format date-time
     */
    created_at: string;
  } | null;
  google: {
    /**
     * @format date-time
     */
    created_at: string;
    error: boolean;
  } | null;
  zoom: {
    /**
     * @format date-time
     */
    created_at: string;
    settings: {
      waiting_room: boolean;
      join_before_host: boolean;
    };
  } | null;
  microsoft: {
    teams_enabled: boolean;
    /**
     * @format date-time
     */
    created_at: string;
  } | null;
  conflict_calendars: Schemas.ModeratedStudyCalendar[];
};

export type GetIntegrationsVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Get the current users integrations
 */
export const fetchGetIntegrations = (variables: GetIntegrationsVariables) =>
  usabilityhubFetch<
    GetIntegrationsResponse,
    GetIntegrationsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/integrations", method: "get", ...variables });

/**
 * Get the current users integrations
 */
export const useGetIntegrations = <TData = GetIntegrationsResponse,>(
  variables: GetIntegrationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetIntegrationsResponse,
      GetIntegrationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetIntegrationsResponse,
    GetIntegrationsError,
    TData
  >(
    queryKeyFn({
      path: "/api/integrations",
      operationId: "getIntegrations",
      variables,
    }),
    () => fetchGetIntegrations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type DeleteIntegrationError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type DeleteIntegrationRequestBody = {
  integration?: "google" | "zoom" | "microsoft" | "figma";
};

export type DeleteIntegrationVariables = {
  body?: DeleteIntegrationRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Deletes the integration for the current user
 */
export const fetchDeleteIntegration = (variables: DeleteIntegrationVariables) =>
  usabilityhubFetch<
    Responses.R204,
    DeleteIntegrationError,
    DeleteIntegrationRequestBody,
    {},
    {},
    {}
  >({ url: "/api/integrations", method: "delete", ...variables });

/**
 * Deletes the integration for the current user
 */
export const useDeleteIntegration = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeleteIntegrationError,
      DeleteIntegrationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeleteIntegrationError,
    DeleteIntegrationVariables
  >(
    (variables: DeleteIntegrationVariables) =>
      fetchDeleteIntegration({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ConfirmUserEmailError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type ConfirmUserEmailRequestBody = {
  token: string;
};

export type ConfirmUserEmailVariables = {
  body: ConfirmUserEmailRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Confirm a users email
 */
export const fetchConfirmUserEmail = (variables: ConfirmUserEmailVariables) =>
  usabilityhubFetch<
    Responses.R204,
    ConfirmUserEmailError,
    ConfirmUserEmailRequestBody,
    {},
    {},
    {}
  >({ url: "/api/users/confirm_email", method: "post", ...variables });

/**
 * Confirm a users email
 */
export const useConfirmUserEmail = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      ConfirmUserEmailError,
      ConfirmUserEmailVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    ConfirmUserEmailError,
    ConfirmUserEmailVariables
  >(
    (variables: ConfirmUserEmailVariables) =>
      fetchConfirmUserEmail({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ResendUserEmailConfirmationError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type ResendUserEmailConfirmationRequestBody = {
  user_email_confirmation_id: number;
};

export type ResendUserEmailConfirmationVariables = {
  body: ResendUserEmailConfirmationRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Resend user email confirmation
 */
export const fetchResendUserEmailConfirmation = (
  variables: ResendUserEmailConfirmationVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    ResendUserEmailConfirmationError,
    ResendUserEmailConfirmationRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/users/resend_email_confirmation",
    method: "post",
    ...variables,
  });

/**
 * Resend user email confirmation
 */
export const useResendUserEmailConfirmation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      ResendUserEmailConfirmationError,
      ResendUserEmailConfirmationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    ResendUserEmailConfirmationError,
    ResendUserEmailConfirmationVariables
  >(
    (variables: ResendUserEmailConfirmationVariables) =>
      fetchResendUserEmailConfirmation({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ResendOwnInvitationPathParams = {
  id: string;
};

export type ResendOwnInvitationError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type ResendOwnInvitationVariables = {
  pathParams: ResendOwnInvitationPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Resend a user's own invitation
 */
export const fetchResendOwnInvitation = (
  variables: ResendOwnInvitationVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    ResendOwnInvitationError,
    undefined,
    {},
    {},
    ResendOwnInvitationPathParams
  >({ url: "/api/users/{id}/resend_invitation", method: "post", ...variables });

/**
 * Resend a user's own invitation
 */
export const useResendOwnInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      ResendOwnInvitationError,
      ResendOwnInvitationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    ResendOwnInvitationError,
    ResendOwnInvitationVariables
  >(
    (variables: ResendOwnInvitationVariables) =>
      fetchResendOwnInvitation({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ActivateUserPathParams = {
  id: string;
};

export type ActivateUserError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type ActivateUserResponse = {
  redirect_url: string;
};

export type ActivateUserRequestBody = {
  name: string;
  password: string | null;
};

export type ActivateUserVariables = {
  body: ActivateUserRequestBody;
  pathParams: ActivateUserPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Activate a user's account and set the password required
 */
export const fetchActivateUser = (variables: ActivateUserVariables) =>
  usabilityhubFetch<
    ActivateUserResponse,
    ActivateUserError,
    ActivateUserRequestBody,
    {},
    {},
    ActivateUserPathParams
  >({ url: "/api/users/{id}/activate_user", method: "put", ...variables });

/**
 * Activate a user's account and set the password required
 */
export const useActivateUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ActivateUserResponse,
      ActivateUserError,
      ActivateUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    ActivateUserResponse,
    ActivateUserError,
    ActivateUserVariables
  >(
    (variables: ActivateUserVariables) =>
      fetchActivateUser({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CreateExternalStudyError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type CreateExternalStudyResponse = {
  /**
   * @format uuid
   */
  unique_id: string;
};

export type CreateExternalStudyRequestBody = {
  name: string;
  /**
   * @format uuid
   */
  space_id: string | null;
  /**
   * @format uuid
   */
  project_id: string | null;
};

export type CreateExternalStudyVariables = {
  body: CreateExternalStudyRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Creates a new blank external study
 */
export const fetchCreateExternalStudy = (
  variables: CreateExternalStudyVariables,
) =>
  usabilityhubFetch<
    CreateExternalStudyResponse,
    CreateExternalStudyError,
    CreateExternalStudyRequestBody,
    {},
    {},
    {}
  >({ url: "/api/external_studies", method: "post", ...variables });

/**
 * Creates a new blank external study
 */
export const useCreateExternalStudy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CreateExternalStudyResponse,
      CreateExternalStudyError,
      CreateExternalStudyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CreateExternalStudyResponse,
    CreateExternalStudyError,
    CreateExternalStudyVariables
  >(
    (variables: CreateExternalStudyVariables) =>
      fetchCreateExternalStudy({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CheckExternalStudyCompletionCodeError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type CheckExternalStudyCompletionCodeRequestBody = {
  usability_test_id: number;
  completion_code: string;
};

export type CheckExternalStudyCompletionCodeVariables = {
  body: CheckExternalStudyCompletionCodeRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Check the completion code for an external study
 */
export const fetchCheckExternalStudyCompletionCode = (
  variables: CheckExternalStudyCompletionCodeVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    CheckExternalStudyCompletionCodeError,
    CheckExternalStudyCompletionCodeRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/external_studies/check_completion_code",
    method: "post",
    ...variables,
  });

/**
 * Check the completion code for an external study
 */
export const useCheckExternalStudyCompletionCode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      CheckExternalStudyCompletionCodeError,
      CheckExternalStudyCompletionCodeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    CheckExternalStudyCompletionCodeError,
    CheckExternalStudyCompletionCodeVariables
  >(
    (variables: CheckExternalStudyCompletionCodeVariables) =>
      fetchCheckExternalStudyCompletionCode({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type AssignUsabilityTestPathParams = {
  usabilityTestId: string;
};

export type AssignUsabilityTestError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        code: "manual_assignment_disabled";
      };
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AssignUsabilityTestResponse = {
  /**
   * @format url
   */
  url: string;
};

export type AssignUsabilityTestRequestBody = {
  /**
   * @format email
   */
  email: string;
};

export type AssignUsabilityTestVariables = {
  body: AssignUsabilityTestRequestBody;
  pathParams: AssignUsabilityTestPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Assign a usability test to a panelist
 */
export const fetchAssignUsabilityTest = (
  variables: AssignUsabilityTestVariables,
) =>
  usabilityhubFetch<
    AssignUsabilityTestResponse,
    AssignUsabilityTestError,
    AssignUsabilityTestRequestBody,
    {},
    {},
    AssignUsabilityTestPathParams
  >({
    url: "/api/usability_tests/{usabilityTestId}/assignments",
    method: "post",
    ...variables,
  });

/**
 * Assign a usability test to a panelist
 */
export const useAssignUsabilityTest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      AssignUsabilityTestResponse,
      AssignUsabilityTestError,
      AssignUsabilityTestVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    AssignUsabilityTestResponse,
    AssignUsabilityTestError,
    AssignUsabilityTestVariables
  >(
    (variables: AssignUsabilityTestVariables) =>
      fetchAssignUsabilityTest({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AssignModeratedStudyPathParams = {
  moderatedStudyId: string;
};

export type AssignModeratedStudyError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        code: "manual_assignment_disabled";
      };
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type AssignModeratedStudyResponse = {
  /**
   * @format url
   */
  url: string;
};

export type AssignModeratedStudyRequestBody = {
  /**
   * @format email
   */
  email: string;
};

export type AssignModeratedStudyVariables = {
  body: AssignModeratedStudyRequestBody;
  pathParams: AssignModeratedStudyPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Assign a panelist to a specific moderated study (for testing purposes)
 */
export const fetchAssignModeratedStudy = (
  variables: AssignModeratedStudyVariables,
) =>
  usabilityhubFetch<
    AssignModeratedStudyResponse,
    AssignModeratedStudyError,
    AssignModeratedStudyRequestBody,
    {},
    {},
    AssignModeratedStudyPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/assignments",
    method: "post",
    ...variables,
  });

/**
 * Assign a panelist to a specific moderated study (for testing purposes)
 */
export const useAssignModeratedStudy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      AssignModeratedStudyResponse,
      AssignModeratedStudyError,
      AssignModeratedStudyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    AssignModeratedStudyResponse,
    AssignModeratedStudyError,
    AssignModeratedStudyVariables
  >(
    (variables: AssignModeratedStudyVariables) =>
      fetchAssignModeratedStudy({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CreateSubscriptionError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type CreateSubscriptionResponse = {
  guid: string;
  state: string;
  error: string | null;
};

export type CreateSubscriptionRequestBody = {
  plan_unique_id: string;
  trialing: boolean;
};

export type CreateSubscriptionVariables = {
  body: CreateSubscriptionRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create a new subscription to a paid plan
 */
export const fetchCreateSubscription = (
  variables: CreateSubscriptionVariables,
) =>
  usabilityhubFetch<
    CreateSubscriptionResponse,
    CreateSubscriptionError,
    CreateSubscriptionRequestBody,
    {},
    {},
    {}
  >({ url: "/api/subscriptions", method: "post", ...variables });

/**
 * Create a new subscription to a paid plan
 */
export const useCreateSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CreateSubscriptionResponse,
      CreateSubscriptionError,
      CreateSubscriptionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CreateSubscriptionResponse,
    CreateSubscriptionError,
    CreateSubscriptionVariables
  >(
    (variables: CreateSubscriptionVariables) =>
      fetchCreateSubscription({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetSubscriptionPathParams = {
  guid: string;
};

export type GetSubscriptionError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R400;
    }
>;

export type GetSubscriptionResponse = {
  stripe_subscription: Schemas.StripeSubscription;
};

export type GetSubscriptionVariables = {
  pathParams: GetSubscriptionPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Fetch a subscription's status
 */
export const fetchGetSubscription = (variables: GetSubscriptionVariables) =>
  usabilityhubFetch<
    GetSubscriptionResponse,
    GetSubscriptionError,
    undefined,
    {},
    {},
    GetSubscriptionPathParams
  >({ url: "/api/subscriptions/{guid}", method: "get", ...variables });

/**
 * Fetch a subscription's status
 */
export const useGetSubscription = <TData = GetSubscriptionResponse,>(
  variables: GetSubscriptionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetSubscriptionResponse,
      GetSubscriptionError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetSubscriptionResponse,
    GetSubscriptionError,
    TData
  >(
    queryKeyFn({
      path: "/api/subscriptions/{guid}",
      operationId: "getSubscription",
      variables,
    }),
    () => fetchGetSubscription({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdateSubscriptionPathParams = {
  guid: string;
};

export type UpdateSubscriptionError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type UpdateSubscriptionResponse = {
  message: string;
  stripe_subscriptions: Schemas.StripeSubscription[];
};

export type UpdateSubscriptionRequestBody = {
  plan_unique_id: string;
  resume_subscription: boolean;
};

export type UpdateSubscriptionVariables = {
  body: UpdateSubscriptionRequestBody;
  pathParams: UpdateSubscriptionPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update an account's subscription to change to another paid plan, or
 * resume a subscription that had been set to cancel at the end of the
 * current billing period if resume_subscription is sent
 */
export const fetchUpdateSubscription = (
  variables: UpdateSubscriptionVariables,
) =>
  usabilityhubFetch<
    UpdateSubscriptionResponse,
    UpdateSubscriptionError,
    UpdateSubscriptionRequestBody,
    {},
    {},
    UpdateSubscriptionPathParams
  >({ url: "/api/subscriptions/{guid}", method: "put", ...variables });

/**
 * Update an account's subscription to change to another paid plan, or
 * resume a subscription that had been set to cancel at the end of the
 * current billing period if resume_subscription is sent
 */
export const useUpdateSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      UpdateSubscriptionResponse,
      UpdateSubscriptionError,
      UpdateSubscriptionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    UpdateSubscriptionResponse,
    UpdateSubscriptionError,
    UpdateSubscriptionVariables
  >(
    (variables: UpdateSubscriptionVariables) =>
      fetchUpdateSubscription({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DeleteSubscriptionPathParams = {
  guid: string;
};

export type DeleteSubscriptionError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type DeleteSubscriptionRequestBody = {
  reason: string;
  additional_information: string | null;
};

export type DeleteSubscriptionVariables = {
  body: DeleteSubscriptionRequestBody;
  pathParams: DeleteSubscriptionPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Cancel the account's subscription at the end of the current billing period
 */
export const fetchDeleteSubscription = (
  variables: DeleteSubscriptionVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    DeleteSubscriptionError,
    DeleteSubscriptionRequestBody,
    {},
    {},
    DeleteSubscriptionPathParams
  >({ url: "/api/subscriptions/{guid}", method: "delete", ...variables });

/**
 * Cancel the account's subscription at the end of the current billing period
 */
export const useDeleteSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeleteSubscriptionError,
      DeleteSubscriptionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeleteSubscriptionError,
    DeleteSubscriptionVariables
  >(
    (variables: DeleteSubscriptionVariables) =>
      fetchDeleteSubscription({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type SyncFigmaFileVersionError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type SyncFigmaFileVersionRequestBody = {
  figma_file_key: string;
  start_node_ids: string[];
};

export type SyncFigmaFileVersionVariables = {
  body: SyncFigmaFileVersionRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Syncs a Figma file version from Figma
 */
export const fetchSyncFigmaFileVersion = (
  variables: SyncFigmaFileVersionVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    SyncFigmaFileVersionError,
    SyncFigmaFileVersionRequestBody,
    {},
    {},
    {}
  >({ url: "/api/figma_file_versions", method: "post", ...variables });

/**
 * Syncs a Figma file version from Figma
 */
export const useSyncFigmaFileVersion = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      SyncFigmaFileVersionError,
      SyncFigmaFileVersionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    SyncFigmaFileVersionError,
    SyncFigmaFileVersionVariables
  >(
    (variables: SyncFigmaFileVersionVariables) =>
      fetchSyncFigmaFileVersion({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type FigmaFileVersionViewablePathParams = {
  figmaFileVersionId: number;
};

export type FigmaFileVersionViewableError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type FigmaFileVersionViewableResponse = {
  viewable: boolean;
};

export type FigmaFileVersionViewableVariables = {
  pathParams: FigmaFileVersionViewablePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Check if a Figma File Version is viewable
 */
export const fetchFigmaFileVersionViewable = (
  variables: FigmaFileVersionViewableVariables,
) =>
  usabilityhubFetch<
    FigmaFileVersionViewableResponse,
    FigmaFileVersionViewableError,
    undefined,
    {},
    {},
    FigmaFileVersionViewablePathParams
  >({
    url: "/api/figma_file_versions/{figmaFileVersionId}/viewable",
    method: "get",
    ...variables,
  });

/**
 * Check if a Figma File Version is viewable
 */
export const useFigmaFileVersionViewable = <
  TData = FigmaFileVersionViewableResponse,
>(
  variables: FigmaFileVersionViewableVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      FigmaFileVersionViewableResponse,
      FigmaFileVersionViewableError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    FigmaFileVersionViewableResponse,
    FigmaFileVersionViewableError,
    TData
  >(
    queryKeyFn({
      path: "/api/figma_file_versions/{figma_file_version_id}/viewable",
      operationId: "figmaFileVersionViewable",
      variables,
    }),
    () => fetchFigmaFileVersionViewable({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type FigmaFileVersionImagePathParams = {
  figmaFileVersionId: number;
  nodeId: string;
};

export type FigmaFileVersionImageError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
  | {
      status: 500;
      payload: Responses.R500;
    }
>;

export type FigmaFileVersionImageVariables = {
  pathParams: FigmaFileVersionImagePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Redirect to the image for a given Figma node ID
 */
export const fetchFigmaFileVersionImage = (
  variables: FigmaFileVersionImageVariables,
) =>
  usabilityhubFetch<
    undefined,
    FigmaFileVersionImageError,
    undefined,
    {},
    {},
    FigmaFileVersionImagePathParams
  >({
    url: "/api/figma_file_versions/{figmaFileVersionId}/image/{nodeId}",
    method: "get",
    ...variables,
  });

/**
 * Redirect to the image for a given Figma node ID
 */
export const useFigmaFileVersionImage = <TData = undefined,>(
  variables: FigmaFileVersionImageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, FigmaFileVersionImageError, TData>,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<undefined, FigmaFileVersionImageError, TData>(
    queryKeyFn({
      path: "/api/figma_file_versions/{figma_file_version_id}/image/{node_id}",
      operationId: "figmaFileVersionImage",
      variables,
    }),
    () => fetchFigmaFileVersionImage({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GoogleSignInError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type GoogleSignInResponse = {
  redirect_to?: string | null;
};

export type GoogleSignInVariables = {
  body: Schemas.GoogleRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Sign in with Google
 */
export const fetchGoogleSignIn = (variables: GoogleSignInVariables) =>
  usabilityhubFetch<
    GoogleSignInResponse,
    GoogleSignInError,
    Schemas.GoogleRequestBody,
    {},
    {},
    {}
  >({ url: "/api/google_sign_in", method: "post", ...variables });

/**
 * Sign in with Google
 */
export const useGoogleSignIn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      GoogleSignInResponse,
      GoogleSignInError,
      GoogleSignInVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    GoogleSignInResponse,
    GoogleSignInError,
    GoogleSignInVariables
  >(
    (variables: GoogleSignInVariables) =>
      fetchGoogleSignIn({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GoogleSignUpError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type GoogleSignUpResponse = {
  redirect_to?: string | null;
};

export type GoogleSignUpVariables = {
  body: Schemas.GoogleRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Sign up with Google
 */
export const fetchGoogleSignUp = (variables: GoogleSignUpVariables) =>
  usabilityhubFetch<
    GoogleSignUpResponse,
    GoogleSignUpError,
    Schemas.GoogleRequestBody,
    {},
    {},
    {}
  >({ url: "/api/google_sign_up", method: "post", ...variables });

/**
 * Sign up with Google
 */
export const useGoogleSignUp = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      GoogleSignUpResponse,
      GoogleSignUpError,
      GoogleSignUpVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    GoogleSignUpResponse,
    GoogleSignUpError,
    GoogleSignUpVariables
  >(
    (variables: GoogleSignUpVariables) =>
      fetchGoogleSignUp({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GoogleAcceptInvitationError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type GoogleAcceptInvitationVariables = {
  body: Schemas.GoogleRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Accept an inviation to an Account via Google
 */
export const fetchGoogleAcceptInvitation = (
  variables: GoogleAcceptInvitationVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    GoogleAcceptInvitationError,
    Schemas.GoogleRequestBody,
    {},
    {},
    {}
  >({ url: "/api/google_accept_invitation", method: "post", ...variables });

/**
 * Accept an inviation to an Account via Google
 */
export const useGoogleAcceptInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      GoogleAcceptInvitationError,
      GoogleAcceptInvitationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    GoogleAcceptInvitationError,
    GoogleAcceptInvitationVariables
  >(
    (variables: GoogleAcceptInvitationVariables) =>
      fetchGoogleAcceptInvitation({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type FetchSiteInformationQueryParams = {
  url?: string;
};

export type FetchSiteInformationError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type FetchSiteInformationResponse = {
  site_information: {
    url: string;
    title: string | null;
    description: string | null;
    image: string | null;
    favicon: string | null;
  };
};

export type FetchSiteInformationVariables = {
  queryParams?: FetchSiteInformationQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Fetch OGP information for a given URL
 */
export const fetchFetchSiteInformation = (
  variables: FetchSiteInformationVariables,
) =>
  usabilityhubFetch<
    FetchSiteInformationResponse,
    FetchSiteInformationError,
    undefined,
    {},
    FetchSiteInformationQueryParams,
    {}
  >({ url: "/api/site_information/fetch", method: "get", ...variables });

/**
 * Fetch OGP information for a given URL
 */
export const useFetchSiteInformation = <TData = FetchSiteInformationResponse,>(
  variables: FetchSiteInformationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      FetchSiteInformationResponse,
      FetchSiteInformationError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    FetchSiteInformationResponse,
    FetchSiteInformationError,
    TData
  >(
    queryKeyFn({
      path: "/api/site_information/fetch",
      operationId: "fetchSiteInformation",
      variables,
    }),
    () => fetchFetchSiteInformation({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type PostApiSubprocessorListNotificationSubscriptionsError =
  Fetcher.ErrorWrapper<{
    status: 400;
    payload: Responses.R400;
  }>;

export type PostApiSubprocessorListNotificationSubscriptionsResponse = {
  message: string;
};

export type PostApiSubprocessorListNotificationSubscriptionsRequestBody = {
  email: string;
};

export type PostApiSubprocessorListNotificationSubscriptionsVariables = {
  body: PostApiSubprocessorListNotificationSubscriptionsRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * List subprocessor notification subscriptions
 */
export const fetchPostApiSubprocessorListNotificationSubscriptions = (
  variables: PostApiSubprocessorListNotificationSubscriptionsVariables,
) =>
  usabilityhubFetch<
    PostApiSubprocessorListNotificationSubscriptionsResponse,
    PostApiSubprocessorListNotificationSubscriptionsError,
    PostApiSubprocessorListNotificationSubscriptionsRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/subprocessor_list_notification_subscriptions",
    method: "post",
    ...variables,
  });

/**
 * List subprocessor notification subscriptions
 */
export const usePostApiSubprocessorListNotificationSubscriptions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostApiSubprocessorListNotificationSubscriptionsResponse,
      PostApiSubprocessorListNotificationSubscriptionsError,
      PostApiSubprocessorListNotificationSubscriptionsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    PostApiSubprocessorListNotificationSubscriptionsResponse,
    PostApiSubprocessorListNotificationSubscriptionsError,
    PostApiSubprocessorListNotificationSubscriptionsVariables
  >(
    (variables: PostApiSubprocessorListNotificationSubscriptionsVariables) =>
      fetchPostApiSubprocessorListNotificationSubscriptions({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type DeleteApiSubprocessorListNotificationSubscriptionsPathParams = {
  /**
   * UUID of the subprocessor list notification subscription
   */
  id: string;
};

export type DeleteApiSubprocessorListNotificationSubscriptionsError =
  Fetcher.ErrorWrapper<{
    status: 400;
    payload: Responses.R400;
  }>;

export type DeleteApiSubprocessorListNotificationSubscriptionsResponse = {
  message: string;
};

export type DeleteApiSubprocessorListNotificationSubscriptionsVariables = {
  pathParams: DeleteApiSubprocessorListNotificationSubscriptionsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Unsubscribe a subprocessor list notification subscription from future notifications
 */
export const fetchDeleteApiSubprocessorListNotificationSubscriptions = (
  variables: DeleteApiSubprocessorListNotificationSubscriptionsVariables,
) =>
  usabilityhubFetch<
    DeleteApiSubprocessorListNotificationSubscriptionsResponse,
    DeleteApiSubprocessorListNotificationSubscriptionsError,
    undefined,
    {},
    {},
    DeleteApiSubprocessorListNotificationSubscriptionsPathParams
  >({
    url: "/api/subprocessor_list_notification_subscriptions/{id}",
    method: "delete",
    ...variables,
  });

/**
 * Unsubscribe a subprocessor list notification subscription from future notifications
 */
export const useDeleteApiSubprocessorListNotificationSubscriptions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteApiSubprocessorListNotificationSubscriptionsResponse,
      DeleteApiSubprocessorListNotificationSubscriptionsError,
      DeleteApiSubprocessorListNotificationSubscriptionsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    DeleteApiSubprocessorListNotificationSubscriptionsResponse,
    DeleteApiSubprocessorListNotificationSubscriptionsError,
    DeleteApiSubprocessorListNotificationSubscriptionsVariables
  >(
    (variables: DeleteApiSubprocessorListNotificationSubscriptionsVariables) =>
      fetchDeleteApiSubprocessorListNotificationSubscriptions({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type CreateProjectError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type CreateProjectRequestBody = {
  name: string;
  /**
   * @format uuid
   */
  space_id: string | null;
};

export type CreateProjectVariables = {
  body: CreateProjectRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Creates a new (empty) project.
 */
export const fetchCreateProject = (variables: CreateProjectVariables) =>
  usabilityhubFetch<
    Schemas.NewProject,
    CreateProjectError,
    CreateProjectRequestBody,
    {},
    {},
    {}
  >({ url: "/api/projects", method: "post", ...variables });

/**
 * Creates a new (empty) project.
 */
export const useCreateProject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.NewProject,
      CreateProjectError,
      CreateProjectVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.NewProject,
    CreateProjectError,
    CreateProjectVariables
  >(
    (variables: CreateProjectVariables) =>
      fetchCreateProject({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListProjectsQueryParams = {
  /**
   * Pass the value of the previous call's next_page to retrieve further pages
   */
  cursor?: string;
  /**
   * Return only projects where the name includes this string (case insensitive)
   */
  search?: string;
  /**
   * Sort results by this field
   */
  sort_by: "name" | "created_at" | "updated_at";
  /**
   * Sort order ascending or descending
   */
  sort_direction: "asc" | "desc";
  /**
   * Include archived projects
   */
  show_archived?: boolean;
  /**
   * How many projects to return in one request
   *
   * @minimum 1
   * @maximum 1000
   */
  page_size?: number;
  /**
   * Filter projects by space ID
   */
  space_id?: string;
};

export type ListProjectsError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type ListProjectsResponse = {
  projects: Schemas.NewProject[];
  next_page: string | null;
  /**
   * @minimum 0
   */
  total_count: number;
  /**
   * @minimum 0
   */
  total_active_count: number;
  /**
   * @minimum 0
   */
  total_archived_count: number;
};

export type ListProjectsVariables = {
  queryParams: ListProjectsQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns a paginated list of all projects for the current user's account.
 */
export const fetchListProjects = (variables: ListProjectsVariables) =>
  usabilityhubFetch<
    ListProjectsResponse,
    ListProjectsError,
    undefined,
    {},
    ListProjectsQueryParams,
    {}
  >({ url: "/api/projects", method: "get", ...variables });

/**
 * Returns a paginated list of all projects for the current user's account.
 */
export const useListProjects = <TData = ListProjectsResponse,>(
  variables: ListProjectsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<ListProjectsResponse, ListProjectsError, TData>,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<ListProjectsResponse, ListProjectsError, TData>(
    queryKeyFn({
      path: "/api/projects",
      operationId: "listProjects",
      variables,
    }),
    () => fetchListProjects({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdateProjectPathParams = {
  /**
   * Project ID
   */
  id: string;
};

export type UpdateProjectError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UpdateProjectRequestBody = {
  name?: string;
};

export type UpdateProjectVariables = {
  body?: UpdateProjectRequestBody;
  pathParams: UpdateProjectPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Updates project metadata.
 */
export const fetchUpdateProject = (variables: UpdateProjectVariables) =>
  usabilityhubFetch<
    Schemas.NewProject,
    UpdateProjectError,
    UpdateProjectRequestBody,
    {},
    {},
    UpdateProjectPathParams
  >({ url: "/api/projects/{id}", method: "patch", ...variables });

/**
 * Updates project metadata.
 */
export const useUpdateProject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.NewProject,
      UpdateProjectError,
      UpdateProjectVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.NewProject,
    UpdateProjectError,
    UpdateProjectVariables
  >(
    (variables: UpdateProjectVariables) =>
      fetchUpdateProject({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DeleteProjectPathParams = {
  /**
   * Project ID
   */
  id: string;
};

export type DeleteProjectError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type DeleteProjectResponse = {
  refund_point_count: number;
};

export type DeleteProjectVariables = {
  pathParams: DeleteProjectPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Deletes a project based on the given ID.
 */
export const fetchDeleteProject = (variables: DeleteProjectVariables) =>
  usabilityhubFetch<
    DeleteProjectResponse,
    DeleteProjectError,
    undefined,
    {},
    {},
    DeleteProjectPathParams
  >({ url: "/api/projects/{id}", method: "delete", ...variables });

/**
 * Deletes a project based on the given ID.
 */
export const useDeleteProject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteProjectResponse,
      DeleteProjectError,
      DeleteProjectVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    DeleteProjectResponse,
    DeleteProjectError,
    DeleteProjectVariables
  >(
    (variables: DeleteProjectVariables) =>
      fetchDeleteProject({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetProjectPathParams = {
  /**
   * Project ID
   */
  id: string;
};

export type GetProjectError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type GetProjectResponse = {
  project: Schemas.NewProject;
};

export type GetProjectVariables = {
  pathParams: GetProjectPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get a Project
 */
export const fetchGetProject = (variables: GetProjectVariables) =>
  usabilityhubFetch<
    GetProjectResponse,
    GetProjectError,
    undefined,
    {},
    {},
    GetProjectPathParams
  >({ url: "/api/projects/{id}", method: "get", ...variables });

/**
 * Get a Project
 */
export const useGetProject = <TData = GetProjectResponse,>(
  variables: GetProjectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetProjectResponse, GetProjectError, TData>,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<GetProjectResponse, GetProjectError, TData>(
    queryKeyFn({
      path: "/api/projects/{id}",
      operationId: "getProject",
      variables,
    }),
    () => fetchGetProject({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CanArchiveProjectPathParams = {
  /**
   * ID of the project to archive
   */
  id: string;
};

export type CanArchiveProjectError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type CanArchiveProjectResponse = {
  can_archive: boolean;
  reasons: (
    | "has_active_third_party_orders"
    | "upcoming_sessions"
    | "incomplete_past_sessions"
    | "active_panel_order"
  )[];
};

export type CanArchiveProjectVariables = {
  pathParams: CanArchiveProjectPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Tells you whether a project can be archived, and if not, what is preventing it
 */
export const fetchCanArchiveProject = (variables: CanArchiveProjectVariables) =>
  usabilityhubFetch<
    CanArchiveProjectResponse,
    CanArchiveProjectError,
    undefined,
    {},
    {},
    CanArchiveProjectPathParams
  >({ url: "/api/projects/{id}/archive", method: "get", ...variables });

/**
 * Tells you whether a project can be archived, and if not, what is preventing it
 */
export const useCanArchiveProject = <TData = CanArchiveProjectResponse,>(
  variables: CanArchiveProjectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CanArchiveProjectResponse,
      CanArchiveProjectError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    CanArchiveProjectResponse,
    CanArchiveProjectError,
    TData
  >(
    queryKeyFn({
      path: "/api/projects/{id}/archive",
      operationId: "canArchiveProject",
      variables,
    }),
    () => fetchCanArchiveProject({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ArchiveProjectPathParams = {
  /**
   * ID of the project to archive
   */
  id: string;
};

export type ArchiveProjectError = Fetcher.ErrorWrapper<undefined>;

export type ArchiveProjectResponse = {
  refund_point_count: number;
};

export type ArchiveProjectVariables = {
  pathParams: ArchiveProjectPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Archive a project
 */
export const fetchArchiveProject = (variables: ArchiveProjectVariables) =>
  usabilityhubFetch<
    ArchiveProjectResponse,
    ArchiveProjectError,
    undefined,
    {},
    {},
    ArchiveProjectPathParams
  >({ url: "/api/projects/{id}/archive", method: "post", ...variables });

/**
 * Archive a project
 */
export const useArchiveProject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ArchiveProjectResponse,
      ArchiveProjectError,
      ArchiveProjectVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    ArchiveProjectResponse,
    ArchiveProjectError,
    ArchiveProjectVariables
  >(
    (variables: ArchiveProjectVariables) =>
      fetchArchiveProject({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UnarchiveProjectPathParams = {
  /**
   * ID of the project to unarchive
   */
  id: string;
};

export type UnarchiveProjectError = Fetcher.ErrorWrapper<undefined>;

export type UnarchiveProjectVariables = {
  pathParams: UnarchiveProjectPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Unarchive a project
 */
export const fetchUnarchiveProject = (variables: UnarchiveProjectVariables) =>
  usabilityhubFetch<
    Schemas.NewProject,
    UnarchiveProjectError,
    undefined,
    {},
    {},
    UnarchiveProjectPathParams
  >({ url: "/api/projects/{id}/unarchive", method: "post", ...variables });

/**
 * Unarchive a project
 */
export const useUnarchiveProject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.NewProject,
      UnarchiveProjectError,
      UnarchiveProjectVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.NewProject,
    UnarchiveProjectError,
    UnarchiveProjectVariables
  >(
    (variables: UnarchiveProjectVariables) =>
      fetchUnarchiveProject({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type MoveProjectPathParams = {
  id: string;
};

export type MoveProjectError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.R401;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type MoveProjectRequestBody = {
  /**
   * @format uuid
   */
  space_id: string;
};

export type MoveProjectVariables = {
  body: MoveProjectRequestBody;
  pathParams: MoveProjectPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Move a project to a different space
 */
export const fetchMoveProject = (variables: MoveProjectVariables) =>
  usabilityhubFetch<
    undefined,
    MoveProjectError,
    MoveProjectRequestBody,
    {},
    {},
    MoveProjectPathParams
  >({ url: "/api/projects/{id}/move", method: "post", ...variables });

/**
 * Move a project to a different space
 */
export const useMoveProject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MoveProjectError,
      MoveProjectVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    undefined,
    MoveProjectError,
    MoveProjectVariables
  >(
    (variables: MoveProjectVariables) =>
      fetchMoveProject({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type PutModeratedStudyMembersPathParams = {
  /**
   * Moderated Study ID
   */
  moderatedStudyId: string;
};

export type PutModeratedStudyMembersError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type PutModeratedStudyMembersRequestBody = {
  host_id: number;
  cohost_ids: number[];
};

export type PutModeratedStudyMembersVariables = {
  body: PutModeratedStudyMembersRequestBody;
  pathParams: PutModeratedStudyMembersPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update the members for a moderated study
 */
export const fetchPutModeratedStudyMembers = (
  variables: PutModeratedStudyMembersVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    PutModeratedStudyMembersError,
    PutModeratedStudyMembersRequestBody,
    {},
    {},
    PutModeratedStudyMembersPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/members",
    method: "put",
    ...variables,
  });

/**
 * Update the members for a moderated study
 */
export const usePutModeratedStudyMembers = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      PutModeratedStudyMembersError,
      PutModeratedStudyMembersVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    PutModeratedStudyMembersError,
    PutModeratedStudyMembersVariables
  >(
    (variables: PutModeratedStudyMembersVariables) =>
      fetchPutModeratedStudyMembers({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type PutModeratedStudyMeetingUrlPathParams = {
  /**
   * Moderated Study ID
   */
  moderatedStudyId: string;
};

export type PutModeratedStudyMeetingUrlError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type PutModeratedStudyMeetingUrlRequestBody = {
  location_type: "none" | "zoom" | "teams" | "custom";
  meeting_url: string | null;
  auto_upload_recordings: boolean;
};

export type PutModeratedStudyMeetingUrlVariables = {
  body: PutModeratedStudyMeetingUrlRequestBody;
  pathParams: PutModeratedStudyMeetingUrlPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update the meeting URL for a moderated study
 */
export const fetchPutModeratedStudyMeetingUrl = (
  variables: PutModeratedStudyMeetingUrlVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    PutModeratedStudyMeetingUrlError,
    PutModeratedStudyMeetingUrlRequestBody,
    {},
    {},
    PutModeratedStudyMeetingUrlPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/meeting_url",
    method: "put",
    ...variables,
  });

/**
 * Update the meeting URL for a moderated study
 */
export const usePutModeratedStudyMeetingUrl = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      PutModeratedStudyMeetingUrlError,
      PutModeratedStudyMeetingUrlVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    PutModeratedStudyMeetingUrlError,
    PutModeratedStudyMeetingUrlVariables
  >(
    (variables: PutModeratedStudyMeetingUrlVariables) =>
      fetchPutModeratedStudyMeetingUrl({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type FindOrCreateModeratedStudyApplicationError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type FindOrCreateModeratedStudyApplicationResponse = {
  moderated_study_application_id: string;
};

export type FindOrCreateModeratedStudyApplicationRequestBody = {
  token: string;
};

export type FindOrCreateModeratedStudyApplicationVariables = {
  body: FindOrCreateModeratedStudyApplicationRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Find or create an Application to a Moderated Study
 */
export const fetchFindOrCreateModeratedStudyApplication = (
  variables: FindOrCreateModeratedStudyApplicationVariables,
) =>
  usabilityhubFetch<
    FindOrCreateModeratedStudyApplicationResponse,
    FindOrCreateModeratedStudyApplicationError,
    FindOrCreateModeratedStudyApplicationRequestBody,
    {},
    {},
    {}
  >({ url: "/api/moderated_study_applications", method: "post", ...variables });

/**
 * Find or create an Application to a Moderated Study
 */
export const useFindOrCreateModeratedStudyApplication = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      FindOrCreateModeratedStudyApplicationResponse,
      FindOrCreateModeratedStudyApplicationError,
      FindOrCreateModeratedStudyApplicationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    FindOrCreateModeratedStudyApplicationResponse,
    FindOrCreateModeratedStudyApplicationError,
    FindOrCreateModeratedStudyApplicationVariables
  >(
    (variables: FindOrCreateModeratedStudyApplicationVariables) =>
      fetchFindOrCreateModeratedStudyApplication({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type DeleteScreenerQuestionPathParams = {
  screenerQuestionId: string;
};

export type DeleteScreenerQuestionError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type DeleteScreenerQuestionRequestBody = {
  moderated_study_id?: string;
};

export type DeleteScreenerQuestionVariables = {
  body?: DeleteScreenerQuestionRequestBody;
  pathParams: DeleteScreenerQuestionPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Delete a screener question
 */
export const fetchDeleteScreenerQuestion = (
  variables: DeleteScreenerQuestionVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    DeleteScreenerQuestionError,
    DeleteScreenerQuestionRequestBody,
    {},
    {},
    DeleteScreenerQuestionPathParams
  >({
    url: "/api/moderated_study_screener_questions/{screenerQuestionId}",
    method: "delete",
    ...variables,
  });

/**
 * Delete a screener question
 */
export const useDeleteScreenerQuestion = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeleteScreenerQuestionError,
      DeleteScreenerQuestionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeleteScreenerQuestionError,
    DeleteScreenerQuestionVariables
  >(
    (variables: DeleteScreenerQuestionVariables) =>
      fetchDeleteScreenerQuestion({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type FindOrCreateModeratedStudyScreenerQuestionPathParams = {
  moderatedStudyId: string;
};

export type FindOrCreateModeratedStudyScreenerQuestionError =
  Fetcher.ErrorWrapper<undefined>;

export type FindOrCreateModeratedStudyScreenerQuestionResponse = {
  /**
   * @format uuid
   */
  screener_question_id: string;
};

export type FindOrCreateModeratedStudyScreenerQuestionRequestBody = {
  /**
   * @format uuid
   */
  id: string;
  type: string;
  position: number;
  text: string;
  shuffle_options: boolean;
  screener_question_options?: Schemas.ScreenerQuestionOption[];
};

export type FindOrCreateModeratedStudyScreenerQuestionVariables = {
  body: FindOrCreateModeratedStudyScreenerQuestionRequestBody;
  pathParams: FindOrCreateModeratedStudyScreenerQuestionPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Find or create a Moderated Study Screener Question
 */
export const fetchFindOrCreateModeratedStudyScreenerQuestion = (
  variables: FindOrCreateModeratedStudyScreenerQuestionVariables,
) =>
  usabilityhubFetch<
    FindOrCreateModeratedStudyScreenerQuestionResponse,
    FindOrCreateModeratedStudyScreenerQuestionError,
    FindOrCreateModeratedStudyScreenerQuestionRequestBody,
    {},
    {},
    FindOrCreateModeratedStudyScreenerQuestionPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/find_or_create_screener_question",
    method: "post",
    ...variables,
  });

/**
 * Find or create a Moderated Study Screener Question
 */
export const useFindOrCreateModeratedStudyScreenerQuestion = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      FindOrCreateModeratedStudyScreenerQuestionResponse,
      FindOrCreateModeratedStudyScreenerQuestionError,
      FindOrCreateModeratedStudyScreenerQuestionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    FindOrCreateModeratedStudyScreenerQuestionResponse,
    FindOrCreateModeratedStudyScreenerQuestionError,
    FindOrCreateModeratedStudyScreenerQuestionVariables
  >(
    (variables: FindOrCreateModeratedStudyScreenerQuestionVariables) =>
      fetchFindOrCreateModeratedStudyScreenerQuestion({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type UpdateConflictCalendarsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type UpdateConflictCalendarsRequestBody = {
  user_id: number;
  conflict_calendars: Schemas.ModeratedStudyCalendar[];
};

export type UpdateConflictCalendarsVariables = {
  body: UpdateConflictCalendarsRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update the conflict calendars for a user
 */
export const fetchUpdateConflictCalendars = (
  variables: UpdateConflictCalendarsVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdateConflictCalendarsError,
    UpdateConflictCalendarsRequestBody,
    {},
    {},
    {}
  >({
    url: "/api/moderated_studies/conflict_calendars",
    method: "post",
    ...variables,
  });

/**
 * Update the conflict calendars for a user
 */
export const useUpdateConflictCalendars = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdateConflictCalendarsError,
      UpdateConflictCalendarsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdateConflictCalendarsError,
    UpdateConflictCalendarsVariables
  >(
    (variables: UpdateConflictCalendarsVariables) =>
      fetchUpdateConflictCalendars({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type SetBookingCalendarPathParams = {
  moderatedStudyId: string;
};

export type SetBookingCalendarError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type SetBookingCalendarRequestBody = {
  user_id: number;
  id: string | null;
  provider?: string | null;
  summary: string | null;
};

export type SetBookingCalendarVariables = {
  body: SetBookingCalendarRequestBody;
  pathParams: SetBookingCalendarPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Set a moderated study's booking calendar for a user
 */
export const fetchSetBookingCalendar = (
  variables: SetBookingCalendarVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    SetBookingCalendarError,
    SetBookingCalendarRequestBody,
    {},
    {},
    SetBookingCalendarPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/booking_calendars",
    method: "post",
    ...variables,
  });

/**
 * Set a moderated study's booking calendar for a user
 */
export const useSetBookingCalendar = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      SetBookingCalendarError,
      SetBookingCalendarVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    SetBookingCalendarError,
    SetBookingCalendarVariables
  >(
    (variables: SetBookingCalendarVariables) =>
      fetchSetBookingCalendar({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DuplicateModeratedStudyPathParams = {
  moderatedStudyId: string;
};

export type DuplicateModeratedStudyError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type DuplicateModeratedStudyResponse = {
  moderated_study_id: string;
};

export type DuplicateModeratedStudyRequestBody = {
  internal_name: string;
  /**
   * @format uuid
   */
  project_id: string;
};

export type DuplicateModeratedStudyVariables = {
  body: DuplicateModeratedStudyRequestBody;
  pathParams: DuplicateModeratedStudyPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Creates a copy of a moderated study and returns the UUID.
 */
export const fetchDuplicateModeratedStudy = (
  variables: DuplicateModeratedStudyVariables,
) =>
  usabilityhubFetch<
    DuplicateModeratedStudyResponse,
    DuplicateModeratedStudyError,
    DuplicateModeratedStudyRequestBody,
    {},
    {},
    DuplicateModeratedStudyPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/duplicate",
    method: "post",
    ...variables,
  });

/**
 * Creates a copy of a moderated study and returns the UUID.
 */
export const useDuplicateModeratedStudy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DuplicateModeratedStudyResponse,
      DuplicateModeratedStudyError,
      DuplicateModeratedStudyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    DuplicateModeratedStudyResponse,
    DuplicateModeratedStudyError,
    DuplicateModeratedStudyVariables
  >(
    (variables: DuplicateModeratedStudyVariables) =>
      fetchDuplicateModeratedStudy({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CanArchiveModeratedStudyPathParams = {
  moderatedStudyId: string;
};

export type CanArchiveModeratedStudyError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type CanArchiveModeratedStudyResponse = {
  can_archive: boolean;
  reasons: (
    | "upcoming_sessions"
    | "incomplete_past_sessions"
    | "active_panel_order"
  )[];
};

export type CanArchiveModeratedStudyVariables = {
  pathParams: CanArchiveModeratedStudyPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Tells you whether a study can be archived, and if not, what is preventing it
 */
export const fetchCanArchiveModeratedStudy = (
  variables: CanArchiveModeratedStudyVariables,
) =>
  usabilityhubFetch<
    CanArchiveModeratedStudyResponse,
    CanArchiveModeratedStudyError,
    undefined,
    {},
    {},
    CanArchiveModeratedStudyPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/archive",
    method: "get",
    ...variables,
  });

/**
 * Tells you whether a study can be archived, and if not, what is preventing it
 */
export const useCanArchiveModeratedStudy = <
  TData = CanArchiveModeratedStudyResponse,
>(
  variables: CanArchiveModeratedStudyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CanArchiveModeratedStudyResponse,
      CanArchiveModeratedStudyError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    CanArchiveModeratedStudyResponse,
    CanArchiveModeratedStudyError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_studies/{moderated_study_id}/archive",
      operationId: "canArchiveModeratedStudy",
      variables,
    }),
    () => fetchCanArchiveModeratedStudy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ArchiveModeratedStudyPathParams = {
  moderatedStudyId: string;
};

export type ArchiveModeratedStudyError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type ArchiveModeratedStudyVariables = {
  pathParams: ArchiveModeratedStudyPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Archives a moderated study, essentially soft-deleting it
 */
export const fetchArchiveModeratedStudy = (
  variables: ArchiveModeratedStudyVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    ArchiveModeratedStudyError,
    undefined,
    {},
    {},
    ArchiveModeratedStudyPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/archive",
    method: "post",
    ...variables,
  });

/**
 * Archives a moderated study, essentially soft-deleting it
 */
export const useArchiveModeratedStudy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      ArchiveModeratedStudyError,
      ArchiveModeratedStudyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    ArchiveModeratedStudyError,
    ArchiveModeratedStudyVariables
  >(
    (variables: ArchiveModeratedStudyVariables) =>
      fetchArchiveModeratedStudy({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UnarchiveModeratedStudyPathParams = {
  moderatedStudyId: string;
};

export type UnarchiveModeratedStudyError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UnarchiveModeratedStudyVariables = {
  pathParams: UnarchiveModeratedStudyPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Restores a moderated study that was previously archived
 */
export const fetchUnarchiveModeratedStudy = (
  variables: UnarchiveModeratedStudyVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UnarchiveModeratedStudyError,
    undefined,
    {},
    {},
    UnarchiveModeratedStudyPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/unarchive",
    method: "post",
    ...variables,
  });

/**
 * Restores a moderated study that was previously archived
 */
export const useUnarchiveModeratedStudy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UnarchiveModeratedStudyError,
      UnarchiveModeratedStudyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UnarchiveModeratedStudyError,
    UnarchiveModeratedStudyVariables
  >(
    (variables: UnarchiveModeratedStudyVariables) =>
      fetchUnarchiveModeratedStudy({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetApiModeratedStudiesModeratedStudyIdRecruitmentLinksPathParams = {
  moderatedStudyId: string;
};

export type GetApiModeratedStudiesModeratedStudyIdRecruitmentLinksError =
  Fetcher.ErrorWrapper<undefined>;

export type GetApiModeratedStudiesModeratedStudyIdRecruitmentLinksResponse = {
  moderated_study_recruitment_links: Schemas.ModeratedStudyRecruitmentLink[];
  moderated_study_orders: Schemas.ModeratedStudyOrder[];
};

export type GetApiModeratedStudiesModeratedStudyIdRecruitmentLinksVariables = {
  pathParams: GetApiModeratedStudiesModeratedStudyIdRecruitmentLinksPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns all recruitment links and orders for the current account
 */
export const fetchGetApiModeratedStudiesModeratedStudyIdRecruitmentLinks = (
  variables: GetApiModeratedStudiesModeratedStudyIdRecruitmentLinksVariables,
) =>
  usabilityhubFetch<
    GetApiModeratedStudiesModeratedStudyIdRecruitmentLinksResponse,
    GetApiModeratedStudiesModeratedStudyIdRecruitmentLinksError,
    undefined,
    {},
    {},
    GetApiModeratedStudiesModeratedStudyIdRecruitmentLinksPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/recruitment_links",
    method: "get",
    ...variables,
  });

/**
 * Returns all recruitment links and orders for the current account
 */
export const useGetApiModeratedStudiesModeratedStudyIdRecruitmentLinks = <
  TData = GetApiModeratedStudiesModeratedStudyIdRecruitmentLinksResponse,
>(
  variables: GetApiModeratedStudiesModeratedStudyIdRecruitmentLinksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetApiModeratedStudiesModeratedStudyIdRecruitmentLinksResponse,
      GetApiModeratedStudiesModeratedStudyIdRecruitmentLinksError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetApiModeratedStudiesModeratedStudyIdRecruitmentLinksResponse,
    GetApiModeratedStudiesModeratedStudyIdRecruitmentLinksError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_studies/{moderated_study_id}/recruitment_links",
      operationId: "getApiModeratedStudiesModeratedStudyIdRecruitmentLinks",
      variables,
    }),
    () =>
      fetchGetApiModeratedStudiesModeratedStudyIdRecruitmentLinks({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CreateModeratedStudiesRecruitmentLinkPathParams = {
  moderatedStudyId: string;
};

export type CreateModeratedStudiesRecruitmentLinkError =
  Fetcher.ErrorWrapper<undefined>;

export type CreateModeratedStudiesRecruitmentLinkResponse = {
  /**
   * @format uuid
   */
  moderated_study_recruitment_link_id: string;
};

export type CreateModeratedStudiesRecruitmentLinkVariables = {
  pathParams: CreateModeratedStudiesRecruitmentLinkPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create a Moderated Study Recruitment Link
 */
export const fetchCreateModeratedStudiesRecruitmentLink = (
  variables: CreateModeratedStudiesRecruitmentLinkVariables,
) =>
  usabilityhubFetch<
    CreateModeratedStudiesRecruitmentLinkResponse,
    CreateModeratedStudiesRecruitmentLinkError,
    undefined,
    {},
    {},
    CreateModeratedStudiesRecruitmentLinkPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/recruitment_links",
    method: "post",
    ...variables,
  });

/**
 * Create a Moderated Study Recruitment Link
 */
export const useCreateModeratedStudiesRecruitmentLink = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CreateModeratedStudiesRecruitmentLinkResponse,
      CreateModeratedStudiesRecruitmentLinkError,
      CreateModeratedStudiesRecruitmentLinkVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CreateModeratedStudiesRecruitmentLinkResponse,
    CreateModeratedStudiesRecruitmentLinkError,
    CreateModeratedStudiesRecruitmentLinkVariables
  >(
    (variables: CreateModeratedStudiesRecruitmentLinkVariables) =>
      fetchCreateModeratedStudiesRecruitmentLink({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type UpdateModeratedStudiesRecruitmentLinkPathParams = {
  moderatedStudyId: string;
  moderatedStudyRecruitmentLinkId: string;
};

export type UpdateModeratedStudiesRecruitmentLinkError =
  Fetcher.ErrorWrapper<undefined>;

export type UpdateModeratedStudiesRecruitmentLinkRequestBody = {
  name?: string;
  selection_method?: "handpick" | "automatic";
  number_of_bookings?: number;
  incentive_type?: "none" | "custom";
  incentive_text?: string | null;
  active?: boolean;
};

export type UpdateModeratedStudiesRecruitmentLinkVariables = {
  body?: UpdateModeratedStudiesRecruitmentLinkRequestBody;
  pathParams: UpdateModeratedStudiesRecruitmentLinkPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Updates details about an individual recruitment link
 */
export const fetchUpdateModeratedStudiesRecruitmentLink = (
  variables: UpdateModeratedStudiesRecruitmentLinkVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdateModeratedStudiesRecruitmentLinkError,
    UpdateModeratedStudiesRecruitmentLinkRequestBody,
    {},
    {},
    UpdateModeratedStudiesRecruitmentLinkPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/recruitment_links/{moderatedStudyRecruitmentLinkId}",
    method: "patch",
    ...variables,
  });

/**
 * Updates details about an individual recruitment link
 */
export const useUpdateModeratedStudiesRecruitmentLink = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdateModeratedStudiesRecruitmentLinkError,
      UpdateModeratedStudiesRecruitmentLinkVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdateModeratedStudiesRecruitmentLinkError,
    UpdateModeratedStudiesRecruitmentLinkVariables
  >(
    (variables: UpdateModeratedStudiesRecruitmentLinkVariables) =>
      fetchUpdateModeratedStudiesRecruitmentLink({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type GetModeratedStudyRecruitmentLinkPathParams = {
  moderatedStudyId: string;
  moderatedStudyRecruitmentLinkId: string;
};

export type GetModeratedStudyRecruitmentLinkError =
  Fetcher.ErrorWrapper<undefined>;

export type GetModeratedStudyRecruitmentLinkVariables = {
  pathParams: GetModeratedStudyRecruitmentLinkPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get a Moderated Study Recruitment Link
 */
export const fetchGetModeratedStudyRecruitmentLink = (
  variables: GetModeratedStudyRecruitmentLinkVariables,
) =>
  usabilityhubFetch<
    Schemas.ModeratedStudyRecruitmentLink,
    GetModeratedStudyRecruitmentLinkError,
    undefined,
    {},
    {},
    GetModeratedStudyRecruitmentLinkPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/recruitment_links/{moderatedStudyRecruitmentLinkId}",
    method: "get",
    ...variables,
  });

/**
 * Get a Moderated Study Recruitment Link
 */
export const useGetModeratedStudyRecruitmentLink = <
  TData = Schemas.ModeratedStudyRecruitmentLink,
>(
  variables: GetModeratedStudyRecruitmentLinkVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ModeratedStudyRecruitmentLink,
      GetModeratedStudyRecruitmentLinkError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.ModeratedStudyRecruitmentLink,
    GetModeratedStudyRecruitmentLinkError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_studies/{moderated_study_id}/recruitment_links/{moderated_study_recruitment_link_id}",
      operationId: "getModeratedStudyRecruitmentLink",
      variables,
    }),
    () =>
      fetchGetModeratedStudyRecruitmentLink({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetModeratedStudyApplicationsPathParams = {
  moderatedStudyId: string;
};

export type GetModeratedStudyApplicationsError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type GetModeratedStudyApplicationsResponse = {
  applications: {
    /**
     * @format uuid
     */
    id: string;
    /**
     * @format uuid
     */
    moderated_study_applicant_id: string | null;
    status:
      | "applied"
      | "invited"
      | "invitation_revoked"
      | "booked"
      | "canceled"
      | "complete"
      | "auto_complete"
      | "no_show"
      | "reschedule_requested"
      | "reported"
      | "declined_by_applicant"
      | "declined_by_researcher"
      | "declined_by_automatic";
    has_had_invitation_revoked: boolean;
    has_valid_invitation: boolean;
    email: string | null;
    full_name: string | null;
    preferred_name: string;
    /**
     * @format date-time
     */
    agreed_to_terms_at: string;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * @format date-time
     */
    deleted_at: string | null;
    source: {
      /**
       * @format uuid
       */
      id: string;
      name: string;
      type: "recruitment_link" | "order";
    };
    recruitment_method: string | null;
    is_panelist: boolean;
    location: {
      type: "country" | "state" | "city";
      id: string;
    } | null;
    age: number | null;
    demographic_attribute_option_ids: number[];
    agreement?: {
      url: string;
      filename: string;
      /**
       * @format date-time
       */
      created_at: string;
    } | null;
    response: {
      answers: (
        | {
            question_id: string;
            answer: string;
            type: "short_text" | "long_text";
          }
        | {
            question_id: string;
            selected_options: {
              screener_question_option_id: string;
              rule: "qualify" | "disqualify" | "not_relevant";
            }[];
            type: "single_select" | "multi_select";
          }
        | {
            type: "video";
            question_id: string;
            recording: {
              id: string;
              url: string;
              duration: number;
            };
          }
      )[];
      outcome: "qualified" | "disqualified";
    } | null;
  }[];
  next_page: string | null;
  total_records: number;
  total_records_without_filters: number;
  screener_questions: {
    id: string;
    type: Schemas.ScreenerQuestionType;
    text: string;
    options?: {
      id: string;
      value: string;
      deleted_at?: string | null;
    }[];
    /**
     * @format date-time
     */
    deleted_at?: string | null;
  }[];
};

export type GetModeratedStudyApplicationsRequestBody = {
  filters?: Schemas.UsabilityTestFilter[];
};

export type GetModeratedStudyApplicationsVariables = {
  body?: GetModeratedStudyApplicationsRequestBody;
  pathParams: GetModeratedStudyApplicationsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Gets data for the applications table and the screener answers
 */
export const fetchGetModeratedStudyApplications = (
  variables: GetModeratedStudyApplicationsVariables,
) =>
  usabilityhubFetch<
    GetModeratedStudyApplicationsResponse,
    GetModeratedStudyApplicationsError,
    GetModeratedStudyApplicationsRequestBody,
    {},
    {},
    GetModeratedStudyApplicationsPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/applications",
    method: "post",
    ...variables,
  });

/**
 * Gets data for the applications table and the screener answers
 */
export const useGetModeratedStudyApplications = <
  TData = GetModeratedStudyApplicationsResponse,
>(
  variables: GetModeratedStudyApplicationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetModeratedStudyApplicationsResponse,
      GetModeratedStudyApplicationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetModeratedStudyApplicationsResponse,
    GetModeratedStudyApplicationsError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_studies/{moderated_study_id}/applications",
      operationId: "getModeratedStudyApplications",
      variables,
    }),
    () =>
      fetchGetModeratedStudyApplications({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type SetAvailabilityPathParams = {
  moderatedStudyId: string;
};

export type SetAvailabilityError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type SetAvailabilityVariables = {
  body: Schemas.Availability;
  pathParams: SetAvailabilityPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update the researcher's availability to be booked for events
 */
export const fetchSetAvailability = (variables: SetAvailabilityVariables) =>
  usabilityhubFetch<
    Responses.R204,
    SetAvailabilityError,
    Schemas.Availability,
    {},
    {},
    SetAvailabilityPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/availability",
    method: "put",
    ...variables,
  });

/**
 * Update the researcher's availability to be booked for events
 */
export const useSetAvailability = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      SetAvailabilityError,
      SetAvailabilityVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    SetAvailabilityError,
    SetAvailabilityVariables
  >(
    (variables: SetAvailabilityVariables) =>
      fetchSetAvailability({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CreateModeratedStudyApplicantError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type CreateModeratedStudyApplicantResponse = {
  /**
   * @format uuid
   */
  moderated_study_applicant_id: string;
};

export type CreateModeratedStudyApplicantRequestBody = {
  /**
   * @format uuid
   */
  moderated_study_application_id: string;
  email: string;
  full_name: string;
  preferred_name: string;
  agreed_to_terms: boolean;
};

export type CreateModeratedStudyApplicantVariables = {
  body: CreateModeratedStudyApplicantRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create a Moderated Study Applicant
 */
export const fetchCreateModeratedStudyApplicant = (
  variables: CreateModeratedStudyApplicantVariables,
) =>
  usabilityhubFetch<
    CreateModeratedStudyApplicantResponse,
    CreateModeratedStudyApplicantError,
    CreateModeratedStudyApplicantRequestBody,
    {},
    {},
    {}
  >({ url: "/api/moderated_study_applicants", method: "post", ...variables });

/**
 * Create a Moderated Study Applicant
 */
export const useCreateModeratedStudyApplicant = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CreateModeratedStudyApplicantResponse,
      CreateModeratedStudyApplicantError,
      CreateModeratedStudyApplicantVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CreateModeratedStudyApplicantResponse,
    CreateModeratedStudyApplicantError,
    CreateModeratedStudyApplicantVariables
  >(
    (variables: CreateModeratedStudyApplicantVariables) =>
      fetchCreateModeratedStudyApplicant({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type StartScreenerResponseError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type StartScreenerResponseResponse = {
  /**
   * @format uuid
   */
  screener_response_id: string;
};

export type StartScreenerResponseRequestBody = {
  /**
   * @format uuid
   */
  moderated_study_application_id: string;
};

export type StartScreenerResponseVariables = {
  body: StartScreenerResponseRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Start a Screener Response
 */
export const fetchStartScreenerResponse = (
  variables: StartScreenerResponseVariables,
) =>
  usabilityhubFetch<
    StartScreenerResponseResponse,
    StartScreenerResponseError,
    StartScreenerResponseRequestBody,
    {},
    {},
    {}
  >({ url: "/api/screener_responses/start", method: "post", ...variables });

/**
 * Start a Screener Response
 */
export const useStartScreenerResponse = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      StartScreenerResponseResponse,
      StartScreenerResponseError,
      StartScreenerResponseVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    StartScreenerResponseResponse,
    StartScreenerResponseError,
    StartScreenerResponseVariables
  >(
    (variables: StartScreenerResponseVariables) =>
      fetchStartScreenerResponse({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type SubmitScreenerResponsePathParams = {
  screenerResponseId: string;
};

export type SubmitScreenerResponseError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type SubmitScreenerResponseVariables = {
  body: Schemas.SubmitScreenerRequestBody;
  pathParams: SubmitScreenerResponsePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Submit a Screener Response
 */
export const fetchSubmitScreenerResponse = (
  variables: SubmitScreenerResponseVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    SubmitScreenerResponseError,
    Schemas.SubmitScreenerRequestBody,
    {},
    {},
    SubmitScreenerResponsePathParams
  >({
    url: "/api/screener_responses/{screenerResponseId}/submit",
    method: "patch",
    ...variables,
  });

/**
 * Submit a Screener Response
 */
export const useSubmitScreenerResponse = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      SubmitScreenerResponseError,
      SubmitScreenerResponseVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    SubmitScreenerResponseError,
    SubmitScreenerResponseVariables
  >(
    (variables: SubmitScreenerResponseVariables) =>
      fetchSubmitScreenerResponse({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetModeratedStudyApplicationPathParams = {
  moderatedStudyApplicationId: string;
};

export type GetModeratedStudyApplicationError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type GetModeratedStudyApplicationVariables = {
  pathParams: GetModeratedStudyApplicationPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get a Moderated Study Application and related information
 */
export const fetchGetModeratedStudyApplication = (
  variables: GetModeratedStudyApplicationVariables,
) =>
  usabilityhubFetch<
    Responses.ModeratedStudyApplicationFlow,
    GetModeratedStudyApplicationError,
    undefined,
    {},
    {},
    GetModeratedStudyApplicationPathParams
  >({
    url: "/api/moderated_study_applications/{moderatedStudyApplicationId}",
    method: "get",
    ...variables,
  });

/**
 * Get a Moderated Study Application and related information
 */
export const useGetModeratedStudyApplication = <
  TData = Responses.ModeratedStudyApplicationFlow,
>(
  variables: GetModeratedStudyApplicationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Responses.ModeratedStudyApplicationFlow,
      GetModeratedStudyApplicationError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Responses.ModeratedStudyApplicationFlow,
    GetModeratedStudyApplicationError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_study_applications/{moderated_study_application_id}",
      operationId: "getModeratedStudyApplication",
      variables,
    }),
    () =>
      fetchGetModeratedStudyApplication({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type PreviewModeratedStudyApplicationPathParams = {
  moderatedStudyId: string;
};

export type PreviewModeratedStudyApplicationQueryParams = {
  recruitment_link_id?: string;
};

export type PreviewModeratedStudyApplicationError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.R404;
}>;

export type PreviewModeratedStudyApplicationVariables = {
  pathParams: PreviewModeratedStudyApplicationPathParams;
  queryParams?: PreviewModeratedStudyApplicationQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Return a preview version of the application flow serialization
 */
export const fetchPreviewModeratedStudyApplication = (
  variables: PreviewModeratedStudyApplicationVariables,
) =>
  usabilityhubFetch<
    Responses.ModeratedStudyApplicationFlow,
    PreviewModeratedStudyApplicationError,
    undefined,
    {},
    PreviewModeratedStudyApplicationQueryParams,
    PreviewModeratedStudyApplicationPathParams
  >({
    url: "/api/moderated_study_previews/{moderatedStudyId}",
    method: "get",
    ...variables,
  });

/**
 * Return a preview version of the application flow serialization
 */
export const usePreviewModeratedStudyApplication = <
  TData = Responses.ModeratedStudyApplicationFlow,
>(
  variables: PreviewModeratedStudyApplicationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Responses.ModeratedStudyApplicationFlow,
      PreviewModeratedStudyApplicationError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Responses.ModeratedStudyApplicationFlow,
    PreviewModeratedStudyApplicationError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_study_previews/{moderated_study_id}",
      operationId: "previewModeratedStudyApplication",
      variables,
    }),
    () =>
      fetchPreviewModeratedStudyApplication({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CreateModeratedStudyBookingPathParams = {
  /**
   * @format uuid
   */
  moderatedStudyApplicationId: string;
};

export type CreateModeratedStudyBookingError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type CreateModeratedStudyBookingResponse = {
  /**
   * @format uuid
   */
  moderated_study_booking_id: string;
};

export type CreateModeratedStudyBookingRequestBody = {
  /**
   * @format date-time
   */
  starts_at: string;
  participant_timezone: string;
};

export type CreateModeratedStudyBookingVariables = {
  body: CreateModeratedStudyBookingRequestBody;
  pathParams: CreateModeratedStudyBookingPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Create a ModeratedStudyBooking record for an available interview slot based on the provided start time.
 */
export const fetchCreateModeratedStudyBooking = (
  variables: CreateModeratedStudyBookingVariables,
) =>
  usabilityhubFetch<
    CreateModeratedStudyBookingResponse,
    CreateModeratedStudyBookingError,
    CreateModeratedStudyBookingRequestBody,
    {},
    {},
    CreateModeratedStudyBookingPathParams
  >({
    url: "/api/moderated_study_applications/{moderatedStudyApplicationId}/create_booking",
    method: "post",
    ...variables,
  });

/**
 * Create a ModeratedStudyBooking record for an available interview slot based on the provided start time.
 */
export const useCreateModeratedStudyBooking = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CreateModeratedStudyBookingResponse,
      CreateModeratedStudyBookingError,
      CreateModeratedStudyBookingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    CreateModeratedStudyBookingResponse,
    CreateModeratedStudyBookingError,
    CreateModeratedStudyBookingVariables
  >(
    (variables: CreateModeratedStudyBookingVariables) =>
      fetchCreateModeratedStudyBooking({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ParticipantCancelModeratedStudyBookingPathParams = {
  /**
   * @format uuid
   */
  moderatedStudyApplicationId: string;
};

export type ParticipantCancelModeratedStudyBookingError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type ParticipantCancelModeratedStudyBookingRequestBody = {
  /**
   * @format uuid
   */
  moderated_study_booking_id: string;
  reason: string;
};

export type ParticipantCancelModeratedStudyBookingVariables = {
  body: ParticipantCancelModeratedStudyBookingRequestBody;
  pathParams: ParticipantCancelModeratedStudyBookingPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Cancel a Moderated Study Booking as a participant
 */
export const fetchParticipantCancelModeratedStudyBooking = (
  variables: ParticipantCancelModeratedStudyBookingVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    ParticipantCancelModeratedStudyBookingError,
    ParticipantCancelModeratedStudyBookingRequestBody,
    {},
    {},
    ParticipantCancelModeratedStudyBookingPathParams
  >({
    url: "/api/moderated_study_applications/{moderatedStudyApplicationId}/cancel_booking",
    method: "post",
    ...variables,
  });

/**
 * Cancel a Moderated Study Booking as a participant
 */
export const useParticipantCancelModeratedStudyBooking = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      ParticipantCancelModeratedStudyBookingError,
      ParticipantCancelModeratedStudyBookingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    ParticipantCancelModeratedStudyBookingError,
    ParticipantCancelModeratedStudyBookingVariables
  >(
    (variables: ParticipantCancelModeratedStudyBookingVariables) =>
      fetchParticipantCancelModeratedStudyBooking({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type ParticipantRescheduleModeratedStudyBookingPathParams = {
  /**
   * @format uuid
   */
  moderatedStudyApplicationId: string;
};

export type ParticipantRescheduleModeratedStudyBookingError =
  Fetcher.ErrorWrapper<
    | {
        status: 400;
        payload: Responses.R400;
      }
    | {
        status: 403;
        payload: Responses.R403;
      }
    | {
        status: 404;
        payload: Responses.R404;
      }
  >;

export type ParticipantRescheduleModeratedStudyBookingResponse = {
  /**
   * @format uuid
   */
  moderated_study_booking_id: string;
};

export type ParticipantRescheduleModeratedStudyBookingRequestBody = {
  /**
   * @format uuid
   */
  moderated_study_booking_id: string;
  /**
   * @format date-time
   */
  starts_at: string;
  participant_timezone: string;
};

export type ParticipantRescheduleModeratedStudyBookingVariables = {
  body: ParticipantRescheduleModeratedStudyBookingRequestBody;
  pathParams: ParticipantRescheduleModeratedStudyBookingPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Reschedule a Moderated Study Booking as a participant
 */
export const fetchParticipantRescheduleModeratedStudyBooking = (
  variables: ParticipantRescheduleModeratedStudyBookingVariables,
) =>
  usabilityhubFetch<
    ParticipantRescheduleModeratedStudyBookingResponse,
    ParticipantRescheduleModeratedStudyBookingError,
    ParticipantRescheduleModeratedStudyBookingRequestBody,
    {},
    {},
    ParticipantRescheduleModeratedStudyBookingPathParams
  >({
    url: "/api/moderated_study_applications/{moderatedStudyApplicationId}/reschedule_booking",
    method: "post",
    ...variables,
  });

/**
 * Reschedule a Moderated Study Booking as a participant
 */
export const useParticipantRescheduleModeratedStudyBooking = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ParticipantRescheduleModeratedStudyBookingResponse,
      ParticipantRescheduleModeratedStudyBookingError,
      ParticipantRescheduleModeratedStudyBookingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    ParticipantRescheduleModeratedStudyBookingResponse,
    ParticipantRescheduleModeratedStudyBookingError,
    ParticipantRescheduleModeratedStudyBookingVariables
  >(
    (variables: ParticipantRescheduleModeratedStudyBookingVariables) =>
      fetchParticipantRescheduleModeratedStudyBooking({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type ApplicantDeclineModeratedStudyInvitationPathParams = {
  /**
   * @format uuid
   */
  moderatedStudyApplicationId: string;
};

export type ApplicantDeclineModeratedStudyInvitationError =
  Fetcher.ErrorWrapper<
    | {
        status: 400;
        payload: Responses.R400;
      }
    | {
        status: 403;
        payload: Responses.R403;
      }
    | {
        status: 404;
        payload: Responses.R404;
      }
  >;

export type ApplicantDeclineModeratedStudyInvitationVariables = {
  pathParams: ApplicantDeclineModeratedStudyInvitationPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Decline an invitation for a Moderated Study Booking as either an applicant or a researcher
 */
export const fetchApplicantDeclineModeratedStudyInvitation = (
  variables: ApplicantDeclineModeratedStudyInvitationVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    ApplicantDeclineModeratedStudyInvitationError,
    undefined,
    {},
    {},
    ApplicantDeclineModeratedStudyInvitationPathParams
  >({
    url: "/api/moderated_study_applications/{moderatedStudyApplicationId}/decline_invitation",
    method: "post",
    ...variables,
  });

/**
 * Decline an invitation for a Moderated Study Booking as either an applicant or a researcher
 */
export const useApplicantDeclineModeratedStudyInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      ApplicantDeclineModeratedStudyInvitationError,
      ApplicantDeclineModeratedStudyInvitationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    ApplicantDeclineModeratedStudyInvitationError,
    ApplicantDeclineModeratedStudyInvitationVariables
  >(
    (variables: ApplicantDeclineModeratedStudyInvitationVariables) =>
      fetchApplicantDeclineModeratedStudyInvitation({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type ParticipantDeclineModeratedStudyBookingRescheduleRequestPathParams =
  {
    /**
     * @format uuid
     */
    moderatedStudyApplicationId: string;
  };

export type ParticipantDeclineModeratedStudyBookingRescheduleRequestError =
  Fetcher.ErrorWrapper<{
    status: 404;
    payload: Responses.R404;
  }>;

export type ParticipantDeclineModeratedStudyBookingRescheduleRequestRequestBody =
  {
    /**
     * @format uuid
     */
    moderated_study_booking_id: string;
  };

export type ParticipantDeclineModeratedStudyBookingRescheduleRequestVariables =
  {
    body: ParticipantDeclineModeratedStudyBookingRescheduleRequestRequestBody;
    pathParams: ParticipantDeclineModeratedStudyBookingRescheduleRequestPathParams;
  } & UsabilityhubContext["fetcherOptions"];

/**
 * Decline a reschedule request for a Moderated Study Booking as a participant
 */
export const fetchParticipantDeclineModeratedStudyBookingRescheduleRequest = (
  variables: ParticipantDeclineModeratedStudyBookingRescheduleRequestVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    ParticipantDeclineModeratedStudyBookingRescheduleRequestError,
    ParticipantDeclineModeratedStudyBookingRescheduleRequestRequestBody,
    {},
    {},
    ParticipantDeclineModeratedStudyBookingRescheduleRequestPathParams
  >({
    url: "/api/moderated_study_applications/{moderatedStudyApplicationId}/decline_reschedule_request",
    method: "post",
    ...variables,
  });

/**
 * Decline a reschedule request for a Moderated Study Booking as a participant
 */
export const useParticipantDeclineModeratedStudyBookingRescheduleRequest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      ParticipantDeclineModeratedStudyBookingRescheduleRequestError,
      ParticipantDeclineModeratedStudyBookingRescheduleRequestVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    ParticipantDeclineModeratedStudyBookingRescheduleRequestError,
    ParticipantDeclineModeratedStudyBookingRescheduleRequestVariables
  >(
    (
      variables: ParticipantDeclineModeratedStudyBookingRescheduleRequestVariables,
    ) =>
      fetchParticipantDeclineModeratedStudyBookingRescheduleRequest({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type ApplyForModeratedStudyPathParams = {
  /**
   * @format uuid
   */
  moderatedStudyApplicationId: string;
};

export type ApplyForModeratedStudyError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type ApplyForModeratedStudyVariables = {
  pathParams: ApplyForModeratedStudyPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Apply for a Moderated Study
 */
export const fetchApplyForModeratedStudy = (
  variables: ApplyForModeratedStudyVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    ApplyForModeratedStudyError,
    undefined,
    {},
    {},
    ApplyForModeratedStudyPathParams
  >({
    url: "/api/moderated_study_applications/{moderatedStudyApplicationId}/apply",
    method: "post",
    ...variables,
  });

/**
 * Apply for a Moderated Study
 */
export const useApplyForModeratedStudy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      ApplyForModeratedStudyError,
      ApplyForModeratedStudyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    ApplyForModeratedStudyError,
    ApplyForModeratedStudyVariables
  >(
    (variables: ApplyForModeratedStudyVariables) =>
      fetchApplyForModeratedStudy({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetModeratedStudyBookingsPathParams = {
  moderatedStudyId: string;
};

export type GetModeratedStudyBookingsError = Fetcher.ErrorWrapper<undefined>;

export type GetModeratedStudyBookingsResponse = {
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format uuid
   */
  moderated_study_application_id: string;
  /**
   * @format date-time
   */
  starts_at: string;
  /**
   * @format date-time
   */
  ends_at: string;
  full_name: string | null;
  preferred_name: string | null;
  email: string | null;
  location: string;
  location_type: "none" | "zoom" | "teams" | "custom";
  auto_upload_recordings: boolean;
  incentive: string | null;
  host_ids: number[];
  incentive_paid: boolean;
  declined_reschedule_request: boolean | null;
  cancelation_info: {
    canceler_name: string;
    reason: string | null;
    /**
     * @format date-time
     */
    canceled_at: string;
    canceled_with_short_notice: boolean;
  } | null;
  report_info: {
    reporter_name: string;
    reason: string | null;
    /**
     * @format date-time
     */
    reported_at: string;
    state: string;
  } | null;
  state:
    | "booked"
    | "complete"
    | "auto_complete"
    | "no_show"
    | "reported"
    | "canceled_by_participant"
    | "canceled_by_researcher"
    | "rescheduled_by_participant"
    | "rescheduled_by_researcher"
    | "declined_by_applicant"
    | "declined_by_researcher"
    | "declined_by_automatic";
  is_panelist: boolean;
  deleted_participant: boolean;
  recordings: Schemas.ModeratedStudyBookingRecording[];
  clicked_join_link_within_reasonable_time: boolean;
}[];

export type GetModeratedStudyBookingsVariables = {
  pathParams: GetModeratedStudyBookingsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Get Moderated Study Bookings
 */
export const fetchGetModeratedStudyBookings = (
  variables: GetModeratedStudyBookingsVariables,
) =>
  usabilityhubFetch<
    GetModeratedStudyBookingsResponse,
    GetModeratedStudyBookingsError,
    undefined,
    {},
    {},
    GetModeratedStudyBookingsPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings",
    method: "get",
    ...variables,
  });

/**
 * Get Moderated Study Bookings
 */
export const useGetModeratedStudyBookings = <
  TData = GetModeratedStudyBookingsResponse,
>(
  variables: GetModeratedStudyBookingsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetModeratedStudyBookingsResponse,
      GetModeratedStudyBookingsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetModeratedStudyBookingsResponse,
    GetModeratedStudyBookingsError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_studies/{moderated_study_id}/bookings",
      operationId: "getModeratedStudyBookings",
      variables,
    }),
    () => fetchGetModeratedStudyBookings({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetModeratedStudyScreenerResponsesPathParams = {
  moderatedStudyId: string;
};

export type GetModeratedStudyScreenerResponsesError =
  Fetcher.ErrorWrapper<undefined>;

export type GetModeratedStudyScreenerResponsesResponse = {
  /**
   * @format uuid
   */
  id?: string;
}[];

export type GetModeratedStudyScreenerResponsesVariables = {
  pathParams: GetModeratedStudyScreenerResponsesPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * List Screener Responses for a Moderated Study
 */
export const fetchGetModeratedStudyScreenerResponses = (
  variables: GetModeratedStudyScreenerResponsesVariables,
) =>
  usabilityhubFetch<
    GetModeratedStudyScreenerResponsesResponse,
    GetModeratedStudyScreenerResponsesError,
    undefined,
    {},
    {},
    GetModeratedStudyScreenerResponsesPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/screener_responses",
    method: "get",
    ...variables,
  });

/**
 * List Screener Responses for a Moderated Study
 */
export const useGetModeratedStudyScreenerResponses = <
  TData = GetModeratedStudyScreenerResponsesResponse,
>(
  variables: GetModeratedStudyScreenerResponsesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetModeratedStudyScreenerResponsesResponse,
      GetModeratedStudyScreenerResponsesError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetModeratedStudyScreenerResponsesResponse,
    GetModeratedStudyScreenerResponsesError,
    TData
  >(
    queryKeyFn({
      path: "/api/moderated_studies/{moderated_study_id}/screener_responses",
      operationId: "getModeratedStudyScreenerResponses",
      variables,
    }),
    () =>
      fetchGetModeratedStudyScreenerResponses({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type DeleteModeratedStudyApplicantsPathParams = {
  moderatedStudyId: string;
};

export type DeleteModeratedStudyApplicantsError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type DeleteModeratedStudyApplicantsRequestBody = {
  moderated_study_applicant_ids: string[];
};

export type DeleteModeratedStudyApplicantsVariables = {
  body: DeleteModeratedStudyApplicantsRequestBody;
  pathParams: DeleteModeratedStudyApplicantsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Delete Moderated Study applicants
 */
export const fetchDeleteModeratedStudyApplicants = (
  variables: DeleteModeratedStudyApplicantsVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    DeleteModeratedStudyApplicantsError,
    DeleteModeratedStudyApplicantsRequestBody,
    {},
    {},
    DeleteModeratedStudyApplicantsPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/delete_applicants",
    method: "post",
    ...variables,
  });

/**
 * Delete Moderated Study applicants
 */
export const useDeleteModeratedStudyApplicants = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      DeleteModeratedStudyApplicantsError,
      DeleteModeratedStudyApplicantsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    DeleteModeratedStudyApplicantsError,
    DeleteModeratedStudyApplicantsVariables
  >(
    (variables: DeleteModeratedStudyApplicantsVariables) =>
      fetchDeleteModeratedStudyApplicants({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type InviteApplicationsToModeratedStudyPathParams = {
  moderatedStudyId: string;
};

export type InviteApplicationsToModeratedStudyError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type InviteApplicationsToModeratedStudyRequestBody = {
  moderated_study_application_ids: string[];
};

export type InviteApplicationsToModeratedStudyVariables = {
  body: InviteApplicationsToModeratedStudyRequestBody;
  pathParams: InviteApplicationsToModeratedStudyPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Invite Applicants to a Moderated Study
 */
export const fetchInviteApplicationsToModeratedStudy = (
  variables: InviteApplicationsToModeratedStudyVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    InviteApplicationsToModeratedStudyError,
    InviteApplicationsToModeratedStudyRequestBody,
    {},
    {},
    InviteApplicationsToModeratedStudyPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/invite",
    method: "post",
    ...variables,
  });

/**
 * Invite Applicants to a Moderated Study
 */
export const useInviteApplicationsToModeratedStudy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      InviteApplicationsToModeratedStudyError,
      InviteApplicationsToModeratedStudyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    InviteApplicationsToModeratedStudyError,
    InviteApplicationsToModeratedStudyVariables
  >(
    (variables: InviteApplicationsToModeratedStudyVariables) =>
      fetchInviteApplicationsToModeratedStudy({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type ReinviteApplicationsToModeratedStudyPathParams = {
  moderatedStudyId: string;
};

export type ReinviteApplicationsToModeratedStudyError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type ReinviteApplicationsToModeratedStudyRequestBody = {
  moderated_study_application_ids: string[];
};

export type ReinviteApplicationsToModeratedStudyVariables = {
  body: ReinviteApplicationsToModeratedStudyRequestBody;
  pathParams: ReinviteApplicationsToModeratedStudyPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Reinvite Applicants to a Moderated Study
 */
export const fetchReinviteApplicationsToModeratedStudy = (
  variables: ReinviteApplicationsToModeratedStudyVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    ReinviteApplicationsToModeratedStudyError,
    ReinviteApplicationsToModeratedStudyRequestBody,
    {},
    {},
    ReinviteApplicationsToModeratedStudyPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/reinvite",
    method: "post",
    ...variables,
  });

/**
 * Reinvite Applicants to a Moderated Study
 */
export const useReinviteApplicationsToModeratedStudy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      ReinviteApplicationsToModeratedStudyError,
      ReinviteApplicationsToModeratedStudyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    ReinviteApplicationsToModeratedStudyError,
    ReinviteApplicationsToModeratedStudyVariables
  >(
    (variables: ReinviteApplicationsToModeratedStudyVariables) =>
      fetchReinviteApplicationsToModeratedStudy({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type RevokeModeratedStudyInvitationsPathParams = {
  moderatedStudyId: string;
};

export type RevokeModeratedStudyInvitationsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type RevokeModeratedStudyInvitationsRequestBody = {
  moderated_study_application_ids: string[];
};

export type RevokeModeratedStudyInvitationsVariables = {
  body: RevokeModeratedStudyInvitationsRequestBody;
  pathParams: RevokeModeratedStudyInvitationsPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Revoke invitations for a Moderated Study
 */
export const fetchRevokeModeratedStudyInvitations = (
  variables: RevokeModeratedStudyInvitationsVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    RevokeModeratedStudyInvitationsError,
    RevokeModeratedStudyInvitationsRequestBody,
    {},
    {},
    RevokeModeratedStudyInvitationsPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/revoke_invitations",
    method: "post",
    ...variables,
  });

/**
 * Revoke invitations for a Moderated Study
 */
export const useRevokeModeratedStudyInvitations = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      RevokeModeratedStudyInvitationsError,
      RevokeModeratedStudyInvitationsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    RevokeModeratedStudyInvitationsError,
    RevokeModeratedStudyInvitationsVariables
  >(
    (variables: RevokeModeratedStudyInvitationsVariables) =>
      fetchRevokeModeratedStudyInvitations({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetRecruitmentLinkQueryParams = {
  /**
   * unique_id of the usability test to look up
   */
  usability_test_unique_id?: string;
  /**
   * unique_id of the test set to look up
   */
  test_set_unique_id?: string;
};

export type GetRecruitmentLinkError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type GetRecruitmentLinkVariables = {
  queryParams?: GetRecruitmentLinkQueryParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Returns information about the recruitment link status for the provided usability test or set.  You must provide either `usability_test_unique_id` or `test_set_unique_id` but not both.
 */
export const fetchGetRecruitmentLink = (
  variables: GetRecruitmentLinkVariables,
) =>
  usabilityhubFetch<
    Schemas.RecruitmentLink,
    GetRecruitmentLinkError,
    undefined,
    {},
    GetRecruitmentLinkQueryParams,
    {}
  >({ url: "/api/recruitment_links", method: "get", ...variables });

/**
 * Returns information about the recruitment link status for the provided usability test or set.  You must provide either `usability_test_unique_id` or `test_set_unique_id` but not both.
 */
export const useGetRecruitmentLink = <TData = Schemas.RecruitmentLink,>(
  variables: GetRecruitmentLinkVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RecruitmentLink,
      GetRecruitmentLinkError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    Schemas.RecruitmentLink,
    GetRecruitmentLinkError,
    TData
  >(
    queryKeyFn({
      path: "/api/recruitment_links",
      operationId: "getRecruitmentLink",
      variables,
    }),
    () => fetchGetRecruitmentLink({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdateRecruitmentLinkError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: {
    /**
     * Error message
     */
    error?: string;
  };
}>;

export type UpdateRecruitmentLinkRequestBody = {
  usability_test_unique_id?: string;
  test_set_unique_id?: string;
  recruitment_link: {
    active?: boolean;
    allow_multiple_responses?: boolean;
    enable_response_limit?: boolean;
    response_limit?: number | null;
    enable_demographics?: boolean;
    capture_age?: boolean;
    capture_country?: boolean;
    enable_redirect?: boolean;
    redirect_link?: string | null;
    capture_demographic_attribute_ids?: number[];
    enable_custom_thank_you?: boolean;
    thank_you_heading?: string | null;
    thank_you_message?: string | null;
  };
};

export type UpdateRecruitmentLinkVariables = {
  body: UpdateRecruitmentLinkRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Updates the recruitment link status for the provided usability test or set.  You must provide either `usability_test_unique_id` or `test_set_unique_id` but not both.
 */
export const fetchUpdateRecruitmentLink = (
  variables: UpdateRecruitmentLinkVariables,
) =>
  usabilityhubFetch<
    Schemas.RecruitmentLink,
    UpdateRecruitmentLinkError,
    UpdateRecruitmentLinkRequestBody,
    {},
    {},
    {}
  >({ url: "/api/recruitment_links", method: "patch", ...variables });

/**
 * Updates the recruitment link status for the provided usability test or set.  You must provide either `usability_test_unique_id` or `test_set_unique_id` but not both.
 */
export const useUpdateRecruitmentLink = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RecruitmentLink,
      UpdateRecruitmentLinkError,
      UpdateRecruitmentLinkVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Schemas.RecruitmentLink,
    UpdateRecruitmentLinkError,
    UpdateRecruitmentLinkVariables
  >(
    (variables: UpdateRecruitmentLinkVariables) =>
      fetchUpdateRecruitmentLink({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UpdateOrganizationSettingsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
>;

export type UpdateOrganizationSettingsRequestBody = {
  organization_name: string;
  /**
   * @format binary
   */
  logo?: Blob;
  delete_logo: "true" | "false";
  default_test_button_color: string;
  default_test_language_code: string;
};

export type UpdateOrganizationSettingsVariables = {
  body: UpdateOrganizationSettingsRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update organization settings
 */
export const fetchUpdateOrganizationSettings = (
  variables: UpdateOrganizationSettingsVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdateOrganizationSettingsError,
    UpdateOrganizationSettingsRequestBody,
    {},
    {},
    {}
  >({ url: "/api/settings/organization", method: "patch", ...variables });

/**
 * Update organization settings
 */
export const useUpdateOrganizationSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdateOrganizationSettingsError,
      UpdateOrganizationSettingsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdateOrganizationSettingsError,
    UpdateOrganizationSettingsVariables
  >(
    (variables: UpdateOrganizationSettingsVariables) =>
      fetchUpdateOrganizationSettings({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListTimezonesError = Fetcher.ErrorWrapper<undefined>;

export type ListTimezonesResponse = {
  timezones: {
    label: string;
    value: string;
  }[];
};

export type ListTimezonesVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Returns the master list of timezones we support in the application.
 */
export const fetchListTimezones = (variables: ListTimezonesVariables) =>
  usabilityhubFetch<
    ListTimezonesResponse,
    ListTimezonesError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/timezones", method: "get", ...variables });

/**
 * Returns the master list of timezones we support in the application.
 */
export const useListTimezones = <TData = ListTimezonesResponse,>(
  variables: ListTimezonesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListTimezonesResponse,
      ListTimezonesError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<ListTimezonesResponse, ListTimezonesError, TData>(
    queryKeyFn({
      path: "/api/timezones",
      operationId: "listTimezones",
      variables,
    }),
    () => fetchListTimezones({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdateZoomSettingsError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.R400;
}>;

export type UpdateZoomSettingsRequestBody = {
  waiting_room: boolean;
  join_before_host: boolean;
};

export type UpdateZoomSettingsVariables = {
  body: UpdateZoomSettingsRequestBody;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Updates Zoom integration settings for the current user
 */
export const fetchUpdateZoomSettings = (
  variables: UpdateZoomSettingsVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdateZoomSettingsError,
    UpdateZoomSettingsRequestBody,
    {},
    {},
    {}
  >({ url: "/api/zoom_settings", method: "patch", ...variables });

/**
 * Updates Zoom integration settings for the current user
 */
export const useUpdateZoomSettings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdateZoomSettingsError,
      UpdateZoomSettingsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdateZoomSettingsError,
    UpdateZoomSettingsVariables
  >(
    (variables: UpdateZoomSettingsVariables) =>
      fetchUpdateZoomSettings({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UpdateDeviceRequirementPathParams = {
  id: string;
};

export type UpdateDeviceRequirementError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UpdateDeviceRequirementRequestBody = {
  /**
   * Devices that may be used for the study
   */
  device_types: string[];
  /**
   * Peripherals required for the study
   */
  device_peripherals: string[];
};

export type UpdateDeviceRequirementVariables = {
  body: UpdateDeviceRequirementRequestBody;
  pathParams: UpdateDeviceRequirementPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Update device requirement
 */
export const fetchUpdateDeviceRequirement = (
  variables: UpdateDeviceRequirementVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdateDeviceRequirementError,
    UpdateDeviceRequirementRequestBody,
    {},
    {},
    UpdateDeviceRequirementPathParams
  >({ url: "/api/device_requirements/{id}", method: "put", ...variables });

/**
 * Update device requirement
 */
export const useUpdateDeviceRequirement = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdateDeviceRequirementError,
      UpdateDeviceRequirementVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdateDeviceRequirementError,
    UpdateDeviceRequirementVariables
  >(
    (variables: UpdateDeviceRequirementVariables) =>
      fetchUpdateDeviceRequirement({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UpdateModeratedStudyBookingPathParams = {
  moderatedStudyBookingId: string;
  moderatedStudyId: string;
};

export type UpdateModeratedStudyBookingError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        code?: "AuthenticationError";
        message: string;
      };
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type UpdateModeratedStudyBookingRequestBody = {
  incentive?: string;
  location?: string;
  location_type?: "none" | "zoom" | "teams" | "custom";
  auto_upload_recordings?: boolean;
  hosts?: number[];
};

export type UpdateModeratedStudyBookingVariables = {
  body?: UpdateModeratedStudyBookingRequestBody;
  pathParams: UpdateModeratedStudyBookingPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Updates on a ModeratedStudyBooking object.
 */
export const fetchUpdateModeratedStudyBooking = (
  variables: UpdateModeratedStudyBookingVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    UpdateModeratedStudyBookingError,
    UpdateModeratedStudyBookingRequestBody,
    {},
    {},
    UpdateModeratedStudyBookingPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings/{moderatedStudyBookingId}",
    method: "patch",
    ...variables,
  });

/**
 * Updates on a ModeratedStudyBooking object.
 */
export const useUpdateModeratedStudyBooking = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      UpdateModeratedStudyBookingError,
      UpdateModeratedStudyBookingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    UpdateModeratedStudyBookingError,
    UpdateModeratedStudyBookingVariables
  >(
    (variables: UpdateModeratedStudyBookingVariables) =>
      fetchUpdateModeratedStudyBooking({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CancelModeratedStudyBookingPathParams = {
  moderatedStudyBookingId: string;
  moderatedStudyId: string;
};

export type CancelModeratedStudyBookingError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type CancelModeratedStudyBookingRequestBody = {
  reason: string | null;
  booking_begins_soon: boolean;
};

export type CancelModeratedStudyBookingVariables = {
  body: CancelModeratedStudyBookingRequestBody;
  pathParams: CancelModeratedStudyBookingPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Cancels a Moderated Study Booking.
 */
export const fetchCancelModeratedStudyBooking = (
  variables: CancelModeratedStudyBookingVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    CancelModeratedStudyBookingError,
    CancelModeratedStudyBookingRequestBody,
    {},
    {},
    CancelModeratedStudyBookingPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings/{moderatedStudyBookingId}/cancel",
    method: "post",
    ...variables,
  });

/**
 * Cancels a Moderated Study Booking.
 */
export const useCancelModeratedStudyBooking = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      CancelModeratedStudyBookingError,
      CancelModeratedStudyBookingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    CancelModeratedStudyBookingError,
    CancelModeratedStudyBookingVariables
  >(
    (variables: CancelModeratedStudyBookingVariables) =>
      fetchCancelModeratedStudyBooking({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type RescheduleModeratedStudyBookingPathParams = {
  moderatedStudyBookingId: string;
  moderatedStudyId: string;
};

export type RescheduleModeratedStudyBookingError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type RescheduleModeratedStudyBookingRequestBody = {
  reason: string | null;
  booking_begins_soon: boolean;
};

export type RescheduleModeratedStudyBookingVariables = {
  body: RescheduleModeratedStudyBookingRequestBody;
  pathParams: RescheduleModeratedStudyBookingPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Reschedule Moderated Study Booking as a researcher
 */
export const fetchRescheduleModeratedStudyBooking = (
  variables: RescheduleModeratedStudyBookingVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    RescheduleModeratedStudyBookingError,
    RescheduleModeratedStudyBookingRequestBody,
    {},
    {},
    RescheduleModeratedStudyBookingPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings/{moderatedStudyBookingId}/reschedule",
    method: "post",
    ...variables,
  });

/**
 * Reschedule Moderated Study Booking as a researcher
 */
export const useRescheduleModeratedStudyBooking = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      RescheduleModeratedStudyBookingError,
      RescheduleModeratedStudyBookingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    RescheduleModeratedStudyBookingError,
    RescheduleModeratedStudyBookingVariables
  >(
    (variables: RescheduleModeratedStudyBookingVariables) =>
      fetchRescheduleModeratedStudyBooking({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type MarkModeratedStudyBookingAsCompletePathParams = {
  moderatedStudyBookingId: string;
  moderatedStudyId: string;
};

export type MarkModeratedStudyBookingAsCompleteError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type MarkModeratedStudyBookingAsCompleteResponse = {
  events: Schemas.Event[];
};

export type MarkModeratedStudyBookingAsCompleteRequestBody = {
  mark_as_paid: boolean;
  rating: string | null;
  comment: string | null;
};

export type MarkModeratedStudyBookingAsCompleteVariables = {
  body: MarkModeratedStudyBookingAsCompleteRequestBody;
  pathParams: MarkModeratedStudyBookingAsCompletePathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Marks a Moderated Study Booking as complete.
 */
export const fetchMarkModeratedStudyBookingAsComplete = (
  variables: MarkModeratedStudyBookingAsCompleteVariables,
) =>
  usabilityhubFetch<
    MarkModeratedStudyBookingAsCompleteResponse,
    MarkModeratedStudyBookingAsCompleteError,
    MarkModeratedStudyBookingAsCompleteRequestBody,
    {},
    {},
    MarkModeratedStudyBookingAsCompletePathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings/{moderatedStudyBookingId}/mark_as_complete",
    method: "post",
    ...variables,
  });

/**
 * Marks a Moderated Study Booking as complete.
 */
export const useMarkModeratedStudyBookingAsComplete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      MarkModeratedStudyBookingAsCompleteResponse,
      MarkModeratedStudyBookingAsCompleteError,
      MarkModeratedStudyBookingAsCompleteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    MarkModeratedStudyBookingAsCompleteResponse,
    MarkModeratedStudyBookingAsCompleteError,
    MarkModeratedStudyBookingAsCompleteVariables
  >(
    (variables: MarkModeratedStudyBookingAsCompleteVariables) =>
      fetchMarkModeratedStudyBookingAsComplete({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type MarkModeratedStudyBookingAsReportedPathParams = {
  moderatedStudyBookingId: string;
  moderatedStudyId: string;
};

export type MarkModeratedStudyBookingAsReportedError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type MarkModeratedStudyBookingAsReportedRequestBody = {
  reason: string;
  link: string | null;
};

export type MarkModeratedStudyBookingAsReportedVariables = {
  body: MarkModeratedStudyBookingAsReportedRequestBody;
  pathParams: MarkModeratedStudyBookingAsReportedPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Marks a Moderated Study Booking as reported.
 */
export const fetchMarkModeratedStudyBookingAsReported = (
  variables: MarkModeratedStudyBookingAsReportedVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    MarkModeratedStudyBookingAsReportedError,
    MarkModeratedStudyBookingAsReportedRequestBody,
    {},
    {},
    MarkModeratedStudyBookingAsReportedPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings/{moderatedStudyBookingId}/mark_as_reported",
    method: "post",
    ...variables,
  });

/**
 * Marks a Moderated Study Booking as reported.
 */
export const useMarkModeratedStudyBookingAsReported = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      MarkModeratedStudyBookingAsReportedError,
      MarkModeratedStudyBookingAsReportedVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    MarkModeratedStudyBookingAsReportedError,
    MarkModeratedStudyBookingAsReportedVariables
  >(
    (variables: MarkModeratedStudyBookingAsReportedVariables) =>
      fetchMarkModeratedStudyBookingAsReported({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type MarkModeratedStudyBookingAsNoShowPathParams = {
  moderatedStudyBookingId: string;
  moderatedStudyId: string;
};

export type MarkModeratedStudyBookingAsNoShowError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type MarkModeratedStudyBookingAsNoShowVariables = {
  pathParams: MarkModeratedStudyBookingAsNoShowPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Marks a Moderated Study Booking as no-show.
 */
export const fetchMarkModeratedStudyBookingAsNoShow = (
  variables: MarkModeratedStudyBookingAsNoShowVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    MarkModeratedStudyBookingAsNoShowError,
    undefined,
    {},
    {},
    MarkModeratedStudyBookingAsNoShowPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings/{moderatedStudyBookingId}/mark_as_no_show",
    method: "post",
    ...variables,
  });

/**
 * Marks a Moderated Study Booking as no-show.
 */
export const useMarkModeratedStudyBookingAsNoShow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      MarkModeratedStudyBookingAsNoShowError,
      MarkModeratedStudyBookingAsNoShowVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    MarkModeratedStudyBookingAsNoShowError,
    MarkModeratedStudyBookingAsNoShowVariables
  >(
    (variables: MarkModeratedStudyBookingAsNoShowVariables) =>
      fetchMarkModeratedStudyBookingAsNoShow({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type MarkModeratedStudyBookingAsPaidPathParams = {
  moderatedStudyBookingId: string;
  moderatedStudyId: string;
};

export type MarkModeratedStudyBookingAsPaidError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.R400;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type MarkModeratedStudyBookingAsPaidVariables = {
  pathParams: MarkModeratedStudyBookingAsPaidPathParams;
} & UsabilityhubContext["fetcherOptions"];

/**
 * Marks a Moderated Study Booking as having had its incentive paid out.
 */
export const fetchMarkModeratedStudyBookingAsPaid = (
  variables: MarkModeratedStudyBookingAsPaidVariables,
) =>
  usabilityhubFetch<
    Responses.R204,
    MarkModeratedStudyBookingAsPaidError,
    undefined,
    {},
    {},
    MarkModeratedStudyBookingAsPaidPathParams
  >({
    url: "/api/moderated_studies/{moderatedStudyId}/bookings/{moderatedStudyBookingId}/mark_as_paid",
    method: "post",
    ...variables,
  });

/**
 * Marks a Moderated Study Booking as having had its incentive paid out.
 */
export const useMarkModeratedStudyBookingAsPaid = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.R204,
      MarkModeratedStudyBookingAsPaidError,
      MarkModeratedStudyBookingAsPaidVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useUsabilityhubContext();
  return reactQuery.useMutation<
    Responses.R204,
    MarkModeratedStudyBookingAsPaidError,
    MarkModeratedStudyBookingAsPaidVariables
  >(
    (variables: MarkModeratedStudyBookingAsPaidVariables) =>
      fetchMarkModeratedStudyBookingAsPaid({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type ListCountriesError = Fetcher.ErrorWrapper<undefined>;

export type ListCountriesResponse = {
  countries?: Schemas.Country[];
};

export type ListCountriesVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Returns the list of countries in the application
 */
export const fetchListCountries = (variables: ListCountriesVariables) =>
  usabilityhubFetch<
    ListCountriesResponse,
    ListCountriesError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/countries", method: "get", ...variables });

/**
 * Returns the list of countries in the application
 */
export const useListCountries = <TData = ListCountriesResponse,>(
  variables: ListCountriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListCountriesResponse,
      ListCountriesError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<ListCountriesResponse, ListCountriesError, TData>(
    queryKeyFn({
      path: "/api/countries",
      operationId: "listCountries",
      variables,
    }),
    () => fetchListCountries({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetGoogleCalendarsError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type GetGoogleCalendarsResponse = Schemas.ModeratedStudyCalendar[];

export type GetGoogleCalendarsVariables = UsabilityhubContext["fetcherOptions"];

/**
 * Get a list of users Google calendars for the current user
 */
export const fetchGetGoogleCalendars = (
  variables: GetGoogleCalendarsVariables,
) =>
  usabilityhubFetch<
    GetGoogleCalendarsResponse,
    GetGoogleCalendarsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/google_calendars", method: "get", ...variables });

/**
 * Get a list of users Google calendars for the current user
 */
export const useGetGoogleCalendars = <TData = GetGoogleCalendarsResponse,>(
  variables: GetGoogleCalendarsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetGoogleCalendarsResponse,
      GetGoogleCalendarsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    GetGoogleCalendarsResponse,
    GetGoogleCalendarsError,
    TData
  >(
    queryKeyFn({
      path: "/api/google_calendars",
      operationId: "getGoogleCalendars",
      variables,
    }),
    () => fetchGetGoogleCalendars({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ListOutlookCalendarsError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.R403;
    }
  | {
      status: 404;
      payload: Responses.R404;
    }
>;

export type ListOutlookCalendarsResponse = Schemas.ModeratedStudyCalendar[];

export type ListOutlookCalendarsVariables =
  UsabilityhubContext["fetcherOptions"];

/**
 * Get a list of Outlook calendars for the current user
 */
export const fetchListOutlookCalendars = (
  variables: ListOutlookCalendarsVariables,
) =>
  usabilityhubFetch<
    ListOutlookCalendarsResponse,
    ListOutlookCalendarsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/outlook_calendars", method: "get", ...variables });

/**
 * Get a list of Outlook calendars for the current user
 */
export const useListOutlookCalendars = <TData = ListOutlookCalendarsResponse,>(
  variables: ListOutlookCalendarsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListOutlookCalendarsResponse,
      ListOutlookCalendarsError,
      TData
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useUsabilityhubContext(options);
  return reactQuery.useQuery<
    ListOutlookCalendarsResponse,
    ListOutlookCalendarsError,
    TData
  >(
    queryKeyFn({
      path: "/api/outlook_calendars",
      operationId: "listOutlookCalendars",
      variables,
    }),
    () => fetchListOutlookCalendars({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type QueryOperation =
  | {
      path: "/api/admin/admin_notes";
      operationId: "getAdminNotes";
      variables: GetAdminNotesVariables;
    }
  | {
      path: "/api/admin/demographic_profiles/{id}/fluencies";
      operationId: "adminDemographicProfileFluencies";
      variables: AdminDemographicProfileFluenciesVariables;
    }
  | {
      path: "/api/admin/demographics";
      operationId: "adminListDemographics";
      variables: AdminListDemographicsVariables;
    }
  | {
      path: "/api/admin/demographics/groups";
      operationId: "adminListDemographicGroups";
      variables: AdminListDemographicGroupsVariables;
    }
  | {
      path: "/api/admin/responses/{response_id}";
      operationId: "adminResponseUsabilityTestResults";
      variables: AdminResponseUsabilityTestResultsVariables;
    }
  | {
      path: "/api/admin/usability_test_results/{usability_test_unique_id}";
      operationId: "adminUsabilityTestResults";
      variables: AdminUsabilityTestResultsVariables;
    }
  | {
      path: "/api/admin/usability_test_results/practice_test_results/{usability_test_unique_id}";
      operationId: "adminPracticeUsabilityTestResults";
      variables: AdminPracticeUsabilityTestResultsVariables;
    }
  | {
      path: "/api/account/current";
      operationId: "getCurrentAccount";
      variables: GetCurrentAccountVariables;
    }
  | {
      path: "/api/account/total_credits";
      operationId: "getAccountTotalCredits";
      variables: GetAccountTotalCreditsVariables;
    }
  | {
      path: "/api/point_transactions";
      operationId: "listPointTransactions";
      variables: ListPointTransactionsVariables;
    }
  | {
      path: "/api/moderated_study_chat_messages";
      operationId: "listModeratedStudyChatMessages";
      variables: ListModeratedStudyChatMessagesVariables;
    }
  | {
      path: "/api/moderated_study_chat_messages/unread_chats";
      operationId: "listUnreadModeratedStudyChats";
      variables: ListUnreadModeratedStudyChatsVariables;
    }
  | {
      path: "/api/credits/batches";
      operationId: "listCreditBatches";
      variables: ListCreditBatchesVariables;
    }
  | {
      path: "/api/credits/automatic_purchase";
      operationId: "getAutomaticPurchase";
      variables: GetAutomaticPurchaseVariables;
    }
  | {
      path: "/api/credits/automatic_purchase/evaluate";
      operationId: "evaluateAutomaticPurchase";
      variables: EvaluateAutomaticPurchaseVariables;
    }
  | {
      path: "/api/demographics";
      operationId: "listDemographics";
      variables: ListDemographicsVariables;
    }
  | {
      path: "/api/demographic_profiles/demographic_profiles_for_user";
      operationId: "demographicProfileForUser";
      variables: DemographicProfileForUserVariables;
    }
  | {
      path: "/api/demographic_profiles/demographic_profiles_index";
      operationId: "demographicProfileIndex";
      variables: DemographicProfileIndexVariables;
    }
  | {
      path: "/api/feature_flags";
      operationId: "getActiveFeatureFlags";
      variables: GetActiveFeatureFlagsVariables;
    }
  | {
      path: "/api/feature_flags/available";
      operationId: "listAllFeatureFlags";
      variables: ListAllFeatureFlagsVariables;
    }
  | {
      path: "/api/usability_tests/{usability_test_id}/orders/new";
      operationId: "getNewOrderPage";
      variables: GetNewOrderPageVariables;
    }
  | {
      path: "/api/languages";
      operationId: "listLanguages";
      variables: ListLanguagesVariables;
    }
  | {
      path: "/api/plans";
      operationId: "listPlans";
      variables: ListPlansVariables;
    }
  | {
      path: "/api/translations";
      operationId: "listTranslations";
      variables: ListTranslationsVariables;
    }
  | {
      path: "/api/recording_transcripts/{recording_id}";
      operationId: "getRecordingTranscript";
      variables: GetRecordingTranscriptVariables;
    }
  | {
      path: "/api/moderated_studies";
      operationId: "listModeratedStudies";
      variables: ListModeratedStudiesVariables;
    }
  | {
      path: "/api/moderated_studies/active_studies";
      operationId: "listActiveModeratedStudies";
      variables: ListActiveModeratedStudiesVariables;
    }
  | {
      path: "/api/moderated_studies/{moderated_study_id}";
      operationId: "getModeratedStudy";
      variables: GetModeratedStudyVariables;
    }
  | {
      path: "/api/moderated_studies/{moderated_study_id}/locations";
      operationId: "getModeratedStudyLocations";
      variables: GetModeratedStudyLocationsVariables;
    }
  | {
      path: "/api/moderated_studies/{moderated_study_id}/summary";
      operationId: "getModeratedStudySummary";
      variables: GetModeratedStudySummaryVariables;
    }
  | {
      path: "/api/moderated_studies/{moderated_study_id}/bookings/{moderated_study_booking_id}/recordings";
      operationId: "getModeratedStudyBookingRecordings";
      variables: GetModeratedStudyBookingRecordingsVariables;
    }
  | {
      path: "/api/moderated_studies/{moderated_study_id}/bookings/{moderated_study_booking_id}/recordings/{recording_id}/transcript";
      operationId: "getModeratedStudyInterviewTranscript";
      variables: GetModeratedStudyInterviewTranscriptVariables;
    }
  | {
      path: "/api/moderated_study_applications/{moderated_study_application_id}/booking_slots";
      operationId: "listModeratedStudyBookingSlots";
      variables: ListModeratedStudyBookingSlotsVariables;
    }
  | {
      path: "/api/moderated_study_previews/{moderated_study_id}/booking_slots";
      operationId: "previewModeratedStudyBookingSlots";
      variables: PreviewModeratedStudyBookingSlotsVariables;
    }
  | {
      path: "/api/user_notices";
      operationId: "getNotices";
      variables: GetNoticesVariables;
    }
  | {
      path: "/api/saved_recordings";
      operationId: "listSavedRecordings";
      variables: ListSavedRecordingsVariables;
    }
  | {
      path: "/api/recording_views";
      operationId: "listRecordingViews";
      variables: ListRecordingViewsVariables;
    }
  | {
      path: "/api/screenshots/{id}";
      operationId: "getScreenshot";
      variables: GetScreenshotVariables;
    }
  | {
      path: "/api/spaces";
      operationId: "listSpaces";
      variables: ListSpacesVariables;
    }
  | {
      path: "/api/spaces/{space_id}";
      operationId: "getSpace";
      variables: GetSpaceVariables;
    }
  | {
      path: "/api/storage/multipart/{key}/{upload_id}";
      operationId: "listParts";
      variables: ListPartsVariables;
    }
  | {
      path: "/api/studies";
      operationId: "listStudies";
      variables: ListStudiesVariables;
    }
  | {
      path: "/api/team_members/deleting_user_info/{user_id}";
      operationId: "getDeletingUserInfo";
      variables: GetDeletingUserInfoVariables;
    }
  | {
      path: "/api/team_members/summary";
      operationId: "getTeamMembersSummary";
      variables: GetTeamMembersSummaryVariables;
    }
  | {
      path: "/api/team_members";
      operationId: "listTeamMembers";
      variables: ListTeamMembersVariables;
    }
  | {
      path: "/api/team_members/unarchive_requested";
      operationId: "unarchiveRequested";
      variables: UnarchiveRequestedVariables;
    }
  | {
      path: "/api/team_members/team_member_unarchive_requests";
      operationId: "teamMemberUnarchiveRequests";
      variables: TeamMemberUnarchiveRequestsVariables;
    }
  | {
      path: "/api/test_results/{usability_test_unique_id}/responses/{response_id}";
      operationId: "getTestResultsIndividualResponse";
      variables: GetTestResultsIndividualResponseVariables;
    }
  | {
      path: "/api/test_results/{usability_test_unique_id}";
      operationId: "getApiTestResults";
      variables: GetApiTestResultsVariables;
    }
  | {
      path: "/api/usercrowd/notification_preferences";
      operationId: "getPanelistNotificationPreferences";
      variables: GetPanelistNotificationPreferencesVariables;
    }
  | {
      path: "/api/order_assignments";
      operationId: "listUsercrowdOrderAssignments";
      variables: ListUsercrowdOrderAssignmentsVariables;
    }
  | {
      path: "/api/order_assignments/{id}";
      operationId: "getUsercrowdOrderAssignment";
      variables: GetUsercrowdOrderAssignmentVariables;
    }
  | {
      path: "/api/usercrowd/integrations";
      operationId: "getPanelistIntegrations";
      variables: GetPanelistIntegrationsVariables;
    }
  | {
      path: "/api/usercrowd/notification_subscriptions";
      operationId: "listNotificationSubscriptions";
      variables: ListNotificationSubscriptionsVariables;
    }
  | {
      path: "/api/usercrowd/panelist/availability";
      operationId: "getPanelistAvailability";
      variables: GetPanelistAvailabilityVariables;
    }
  | {
      path: "/api/usercrowd/panelist/me";
      operationId: "currentPanelistInfo";
      variables: CurrentPanelistInfoVariables;
    }
  | {
      path: "/api/usercrowd/panelist/stats";
      operationId: "panelistStats";
      variables: PanelistStatsVariables;
    }
  | {
      path: "/api/usercrowd/panelist/history";
      operationId: "panelistHistory";
      variables: PanelistHistoryVariables;
    }
  | {
      path: "/api/usercrowd/panelist/payouts";
      operationId: "panelistPayouts";
      variables: PanelistPayoutsVariables;
    }
  | {
      path: "/api/usercrowd/panelist/settings";
      operationId: "getPanelistSettings";
      variables: GetPanelistSettingsVariables;
    }
  | {
      path: "/api/usercrowd/moderated_study_bookings/upcoming";
      operationId: "listUsercrowdUpcomingBookings";
      variables: ListUsercrowdUpcomingBookingsVariables;
    }
  | {
      path: "/api/version";
      operationId: "getVersion";
      variables: GetVersionVariables;
    }
  | {
      path: "/api/moderated_studies/{moderated_study_id}/orders/quote";
      operationId: "getModeratedStudyOrderQuote";
      variables: GetModeratedStudyOrderQuoteVariables;
    }
  | {
      path: "/api/dynamic_templates";
      operationId: "getDynamicTemplates";
      variables: GetDynamicTemplatesVariables;
    }
  | {
      path: "/api/dynamic_templates/{id}";
      operationId: "checkDynamicTemplateExists";
      variables: CheckDynamicTemplateExistsVariables;
    }
  | {
      path: "/api/account/moderated_studies_quota";
      operationId: "getModeratedStudyQuota";
      variables: GetModeratedStudyQuotaVariables;
    }
  | {
      path: "/api/onboarding";
      operationId: "getOnboarding";
      variables: GetOnboardingVariables;
    }
  | {
      path: "/api/disabled_features";
      operationId: "listDisabledFeatures";
      variables: ListDisabledFeaturesVariables;
    }
  | {
      path: "/api/tests_with_recording_enabled";
      operationId: "listTestsWithRecordingEnabled";
      variables: ListTestsWithRecordingEnabledVariables;
    }
  | {
      path: "/api/settings/billing/billing_history";
      operationId: "billingHistory";
      variables: BillingHistoryVariables;
    }
  | {
      path: "/api/settings/billing/upcoming_invoice";
      operationId: "upcomingInvoice";
      variables: UpcomingInvoiceVariables;
    }
  | {
      path: "/api/settings/billing/has_invoices";
      operationId: "hasInvoices";
      variables: HasInvoicesVariables;
    }
  | {
      path: "/api/test_sets/variation_sets";
      operationId: "listVariationSets";
      variables: ListVariationSetsVariables;
    }
  | {
      path: "/api/test_sets/{unique_id}/preview";
      operationId: "previewTestSet";
      variables: PreviewTestSetVariables;
    }
  | {
      path: "/api/test_sets/{unique_id}/variation_set";
      operationId: "getVariationSet";
      variables: GetVariationSetVariables;
    }
  | {
      path: "/api/filters/options";
      operationId: "listFilterOptions";
      variables: ListFilterOptionsVariables;
    }
  | {
      path: "/api/usability_tests/new";
      operationId: "usabilityTestNew";
      variables: UsabilityTestNewVariables;
    }
  | {
      path: "/api/usability_tests/{usability_test_id}/edit";
      operationId: "usabilityTestEdit";
      variables: UsabilityTestEditVariables;
    }
  | {
      path: "/api/usability_tests/{usability_test_unique_id}/preview";
      operationId: "previewUsabilityTest";
      variables: PreviewUsabilityTestVariables;
    }
  | {
      path: "/api/usability_tests/{usability_test_id}/orders";
      operationId: "usabilityTestOrders";
      variables: UsabilityTestOrdersVariables;
    }
  | {
      path: "/api/usability_tests/{usability_test_id}/recruit";
      operationId: "usabilityTestRecruitPage";
      variables: UsabilityTestRecruitPageVariables;
    }
  | {
      path: "/api/usability_tests/{usability_test_id}/page";
      operationId: "usabilityTestPage";
      variables: UsabilityTestPageVariables;
    }
  | {
      path: "/api/usability_tests/{usability_test_id}/results";
      operationId: "usabilityTestResults";
      variables: UsabilityTestResultsVariables;
    }
  | {
      path: "/api/usability_tests/{usability_test_id}/results/{private_id}";
      operationId: "sharedUsabilityTestResults";
      variables: SharedUsabilityTestResultsVariables;
    }
  | {
      path: "/api/usability_tests/{usability_test_id}/results/section/{section_index}";
      operationId: "usabilityTestResultsForSection";
      variables: UsabilityTestResultsForSectionVariables;
    }
  | {
      path: "/api/usability_tests";
      operationId: "listUsabilityTests";
      variables: ListUsabilityTestsVariables;
    }
  | {
      path: "/api/tests/{usability_test_id}/results/{private_id}/sections/{section_id}/tree_testing/aggregated";
      operationId: "getAggregatedTreeTestResults";
      variables: GetAggregatedTreeTestResultsVariables;
    }
  | {
      path: "/api/admin/ai_flows";
      operationId: "adminListAiFlows";
      variables: AdminListAiFlowsVariables;
    }
  | {
      path: "/api/admin/ai_flows/{id}";
      operationId: "adminShowAiFlow";
      variables: AdminShowAiFlowVariables;
    }
  | {
      path: "/api/admin/ai_flows/batch_runs";
      operationId: "adminListAiFlowBatchRuns";
      variables: AdminListAiFlowBatchRunsVariables;
    }
  | {
      path: "/api/admin/ai_flows/{ai_flow_id}/batch_runs/{run_id}";
      operationId: "adminShowAiFlowBatchRun";
      variables: AdminShowAiFlowBatchRunVariables;
    }
  | {
      path: "/api/admin/ai_flows/{ai_flow_id}/batch_runs/{run_id}/{item_id}";
      operationId: "adminShowAiFlowBatchRunItem";
      variables: AdminShowAiFlowBatchRunItemVariables;
    }
  | {
      path: "/api/admin/payouts/orders/{order_id}";
      operationId: "adminPayoutsOrder";
      variables: AdminPayoutsOrderVariables;
    }
  | {
      path: "/api/admin/payouts/third_party_orders/{third_party_order_id}";
      operationId: "adminPayoutsThirdPartyOrder";
      variables: AdminPayoutsThirdPartyOrderVariables;
    }
  | {
      path: "/api/users/tax_status";
      operationId: "taxStatus";
      variables: TaxStatusVariables;
    }
  | {
      path: "/api/responses/{response_id}";
      operationId: "getUsabilityTestResponseFlow";
      variables: GetUsabilityTestResponseFlowVariables;
    }
  | {
      path: "/api/tree_testing/trees/{id}";
      operationId: "getTreeTestTree";
      variables: GetTreeTestTreeVariables;
    }
  | {
      path: "/api/ordeal";
      operationId: "getExperiments";
      variables: GetExperimentsVariables;
    }
  | {
      path: "/admin/ordeal/api/experiments";
      operationId: "getOrdealExperiments";
      variables: GetOrdealExperimentsVariables;
    }
  | {
      path: "/api/demographic_presets";
      operationId: "listDemographicPresets";
      variables: ListDemographicPresetsVariables;
    }
  | {
      path: "/api/dashboard_new";
      operationId: "getDashboardNew";
      variables: GetDashboardNewVariables;
    }
  | {
      path: "/api/test_builder/{usability_test_unique_id}";
      operationId: "getTestBuilder";
      variables: GetTestBuilderVariables;
    }
  | {
      path: "/api/comments";
      operationId: "listComments";
      variables: ListCommentsVariables;
    }
  | {
      path: "/api/targetable_locations/{scope}";
      operationId: "listTargetableLocations";
      variables: ListTargetableLocationsVariables;
    }
  | {
      path: "/api/integrations";
      operationId: "getIntegrations";
      variables: GetIntegrationsVariables;
    }
  | {
      path: "/api/subscriptions/{guid}";
      operationId: "getSubscription";
      variables: GetSubscriptionVariables;
    }
  | {
      path: "/api/figma_file_versions/{figma_file_version_id}/viewable";
      operationId: "figmaFileVersionViewable";
      variables: FigmaFileVersionViewableVariables;
    }
  | {
      path: "/api/figma_file_versions/{figma_file_version_id}/image/{node_id}";
      operationId: "figmaFileVersionImage";
      variables: FigmaFileVersionImageVariables;
    }
  | {
      path: "/api/site_information/fetch";
      operationId: "fetchSiteInformation";
      variables: FetchSiteInformationVariables;
    }
  | {
      path: "/api/projects";
      operationId: "listProjects";
      variables: ListProjectsVariables;
    }
  | {
      path: "/api/projects/{id}";
      operationId: "getProject";
      variables: GetProjectVariables;
    }
  | {
      path: "/api/projects/{id}/archive";
      operationId: "canArchiveProject";
      variables: CanArchiveProjectVariables;
    }
  | {
      path: "/api/moderated_studies/{moderated_study_id}/archive";
      operationId: "canArchiveModeratedStudy";
      variables: CanArchiveModeratedStudyVariables;
    }
  | {
      path: "/api/moderated_studies/{moderated_study_id}/recruitment_links";
      operationId: "getApiModeratedStudiesModeratedStudyIdRecruitmentLinks";
      variables: GetApiModeratedStudiesModeratedStudyIdRecruitmentLinksVariables;
    }
  | {
      path: "/api/moderated_studies/{moderated_study_id}/recruitment_links/{moderated_study_recruitment_link_id}";
      operationId: "getModeratedStudyRecruitmentLink";
      variables: GetModeratedStudyRecruitmentLinkVariables;
    }
  | {
      path: "/api/moderated_studies/{moderated_study_id}/applications";
      operationId: "getModeratedStudyApplications";
      variables: GetModeratedStudyApplicationsVariables;
    }
  | {
      path: "/api/moderated_study_applications/{moderated_study_application_id}";
      operationId: "getModeratedStudyApplication";
      variables: GetModeratedStudyApplicationVariables;
    }
  | {
      path: "/api/moderated_study_previews/{moderated_study_id}";
      operationId: "previewModeratedStudyApplication";
      variables: PreviewModeratedStudyApplicationVariables;
    }
  | {
      path: "/api/moderated_studies/{moderated_study_id}/bookings";
      operationId: "getModeratedStudyBookings";
      variables: GetModeratedStudyBookingsVariables;
    }
  | {
      path: "/api/moderated_studies/{moderated_study_id}/screener_responses";
      operationId: "getModeratedStudyScreenerResponses";
      variables: GetModeratedStudyScreenerResponsesVariables;
    }
  | {
      path: "/api/recruitment_links";
      operationId: "getRecruitmentLink";
      variables: GetRecruitmentLinkVariables;
    }
  | {
      path: "/api/timezones";
      operationId: "listTimezones";
      variables: ListTimezonesVariables;
    }
  | {
      path: "/api/countries";
      operationId: "listCountries";
      variables: ListCountriesVariables;
    }
  | {
      path: "/api/google_calendars";
      operationId: "getGoogleCalendars";
      variables: GetGoogleCalendarsVariables;
    }
  | {
      path: "/api/outlook_calendars";
      operationId: "listOutlookCalendars";
      variables: ListOutlookCalendarsVariables;
    };
